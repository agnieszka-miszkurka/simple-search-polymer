{
  "schema_version": "1.0.0",
  "namespaces": [
    {
      "name": "Polymer",
      "description": "",
      "summary": "Polymer is a lightweight library built on top of the web\n  standards-based Web Components API's, and makes it easy to build your\n  own custom HTML elements.",
      "sourceRange": {
        "file": "components\\polymer\\lib\\utils\\boot.html",
        "start": {
          "line": 27,
          "column": 2
        },
        "end": {
          "line": 29,
          "column": 4
        }
      },
      "namespaces": [
        {
          "name": "Polymer.ResolveUrl",
          "description": "Module with utilities for resolving relative URL's.",
          "summary": "Module with utilities for resolving relative URL's.",
          "sourceRange": {
            "file": "components\\polymer\\lib\\utils\\resolve-url.html",
            "start": {
              "line": 103,
              "column": 4
            },
            "end": {
              "line": 107,
              "column": 6
            }
          },
          "functions": [
            {
              "name": "Polymer.ResolveUrl.resolveUrl",
              "description": "Resolves the given URL against the provided `baseUri'.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\resolve-url.html",
                "start": {
                  "line": 32,
                  "column": 4
                },
                "end": {
                  "line": 65,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "string",
                  "desc": "Input URL to resolve",
                  "name": "url"
                },
                {
                  "type": "?string=",
                  "desc": "Base URI to resolve the URL against",
                  "name": "baseURI"
                }
              ],
              "return": {
                "type": "string",
                "desc": "resolved URL"
              }
            },
            {
              "name": "Polymer.ResolveUrl.resolveCss",
              "description": "Resolves any relative URL's in the given CSS text against the provided\n`ownerDocument`'s `baseURI`.",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\resolve-url.html",
                "start": {
                  "line": 76,
                  "column": 4
                },
                "end": {
                  "line": 82,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "string",
                  "desc": "CSS text to process",
                  "name": "cssText"
                },
                {
                  "type": "string",
                  "desc": "Base URI to resolve the URL against",
                  "name": "baseURI"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Processed CSS text with resolved URL's"
              }
            },
            {
              "name": "Polymer.ResolveUrl.pathFromUrl",
              "description": "Returns a path from a given `url`. The path includes the trailing\n`/` from the url.",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\resolve-url.html",
                "start": {
                  "line": 92,
                  "column": 4
                },
                "end": {
                  "line": 94,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "string",
                  "desc": "Input URL to transform",
                  "name": "url"
                }
              ],
              "return": {
                "type": "string",
                "desc": "resolved path"
              }
            }
          ]
        },
        {
          "name": "Polymer.Settings",
          "description": "Sets the global, legacy settings.",
          "summary": "",
          "sourceRange": {
            "file": "components\\polymer\\lib\\utils\\settings.html",
            "start": {
              "line": 25,
              "column": 2
            },
            "end": {
              "line": 25,
              "column": 44
            }
          }
        },
        {
          "name": "Polymer.StyleGather",
          "description": "Module with utilities for collection CSS text from `<templates>`, external\nstylesheets, and `dom-module`s.",
          "summary": "Module with utilities for collection CSS text from various sources.",
          "sourceRange": {
            "file": "components\\polymer\\lib\\utils\\style-gather.html",
            "start": {
              "line": 49,
              "column": 2
            },
            "end": {
              "line": 294,
              "column": 4
            }
          },
          "functions": [
            {
              "name": "Polymer.StyleGather.stylesFromModules",
              "description": "Returns a list of <style> elements in a space-separated list of `dom-module`s.",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\style-gather.html",
                "start": {
                  "line": 60,
                  "column": 5
                },
                "end": {
                  "line": 67,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "string",
                  "desc": "List of dom-module id's within which to\nsearch for css.",
                  "name": "moduleIds"
                }
              ],
              "return": {
                "type": "!Array.<!HTMLStyleElement>",
                "desc": "Array of contained <style> elements"
              }
            },
            {
              "name": "Polymer.StyleGather.stylesFromModule",
              "description": "Returns a list of <style> elements in a given `dom-module`.\nStyles in a `dom-module` can come either from `<style>`s within the\nfirst `<template>`, or else from one or more\n`<link rel=\"import\" type=\"css\">` links outside the template.",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\style-gather.html",
                "start": {
                  "line": 80,
                  "column": 4
                },
                "end": {
                  "line": 103,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "string",
                  "desc": "dom-module id to gather styles from",
                  "name": "moduleId"
                }
              ],
              "return": {
                "type": "!Array.<!HTMLStyleElement>",
                "desc": "Array of contained styles."
              }
            },
            {
              "name": "Polymer.StyleGather.stylesFromTemplate",
              "description": "Returns the `<style>` elements within a given template.",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\style-gather.html",
                "start": {
                  "line": 114,
                  "column": 4
                },
                "end": {
                  "line": 137,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "!HTMLTemplateElement",
                  "desc": "Template to gather styles from",
                  "name": "template"
                },
                {
                  "type": "string",
                  "desc": "baseURI for style content",
                  "name": "baseURI"
                }
              ],
              "return": {
                "type": "!Array.<!HTMLStyleElement>",
                "desc": "Array of styles"
              }
            },
            {
              "name": "Polymer.StyleGather.stylesFromModuleImports",
              "description": "Returns a list of <style> elements  from stylesheets loaded via `<link rel=\"import\" type=\"css\">` links within the specified `dom-module`.",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\style-gather.html",
                "start": {
                  "line": 147,
                  "column": 5
                },
                "end": {
                  "line": 150,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "string",
                  "desc": "Id of `dom-module` to gather CSS from",
                  "name": "moduleId"
                }
              ],
              "return": {
                "type": "!Array.<!HTMLStyleElement>",
                "desc": "Array of contained styles."
              }
            },
            {
              "name": "Polymer.StyleGather._stylesFromModuleImports",
              "description": "",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\style-gather.html",
                "start": {
                  "line": 158,
                  "column": 4
                },
                "end": {
                  "line": 177,
                  "column": 5
                }
              },
              "privacy": "protected",
              "params": [
                {
                  "type": "!HTMLElement",
                  "desc": "dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles",
                  "name": "module"
                }
              ],
              "return": {
                "type": "!Array.<!HTMLStyleElement>",
                "desc": "Array of contained styles"
              }
            },
            {
              "name": "Polymer.StyleGather.cssFromModules",
              "description": "Returns CSS text of styles in a space-separated list of `dom-module`s.\nNote: This method is deprecated, use `stylesFromModules` instead.",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\style-gather.html",
                "start": {
                  "line": 191,
                  "column": 5
                },
                "end": {
                  "line": 198,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "string",
                  "desc": "List of dom-module id's within which to\nsearch for css.",
                  "name": "moduleIds"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Concatenated CSS content from specified `dom-module`s"
              }
            },
            {
              "name": "Polymer.StyleGather.cssFromModule",
              "description": "Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`\ncan come either from `<style>`s within the first `<template>`, or else\nfrom one or more `<link rel=\"import\" type=\"css\">` links outside the\ntemplate.\n\nAny `<styles>` processed are removed from their original location.\nNote: This method is deprecated, use `styleFromModule` instead.",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\style-gather.html",
                "start": {
                  "line": 215,
                  "column": 4
                },
                "end": {
                  "line": 232,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "string",
                  "desc": "dom-module id to gather styles from",
                  "name": "moduleId"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Concatenated CSS content from specified `dom-module`"
              }
            },
            {
              "name": "Polymer.StyleGather.cssFromTemplate",
              "description": "Returns CSS text of `<styles>` within a given template.\n\nAny `<styles>` processed are removed from their original location.\nNote: This method is deprecated, use `styleFromTemplate` instead.",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\style-gather.html",
                "start": {
                  "line": 247,
                  "column": 4
                },
                "end": {
                  "line": 259,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "!HTMLTemplateElement",
                  "desc": "Template to gather styles from",
                  "name": "template"
                },
                {
                  "type": "string",
                  "desc": "Base URI to resolve the URL against",
                  "name": "baseURI"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Concatenated CSS content from specified template"
              }
            },
            {
              "name": "Polymer.StyleGather.cssFromModuleImports",
              "description": "Returns CSS text from stylesheets loaded via `<link rel=\"import\" type=\"css\">`\nlinks within the specified `dom-module`.\n\nNote: This method is deprecated, use `stylesFromModuleImports` instead.",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\style-gather.html",
                "start": {
                  "line": 274,
                  "column": 4
                },
                "end": {
                  "line": 277,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "string",
                  "desc": "Id of `dom-module` to gather CSS from",
                  "name": "moduleId"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Concatenated CSS content from links in specified `dom-module`"
              }
            },
            {
              "name": "Polymer.StyleGather._cssFromModuleImports",
              "description": "",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\style-gather.html",
                "start": {
                  "line": 286,
                  "column": 5
                },
                "end": {
                  "line": 293,
                  "column": 5
                }
              },
              "privacy": "protected",
              "params": [
                {
                  "type": "!HTMLElement",
                  "desc": "dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles",
                  "name": "module"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Concatenated CSS content from links in the dom-module"
              }
            }
          ]
        },
        {
          "name": "Polymer.Path",
          "description": "Module with utilities for manipulating structured data path strings.",
          "summary": "Module with utilities for manipulating structured data path strings.",
          "sourceRange": {
            "file": "components\\polymer\\lib\\utils\\path.html",
            "start": {
              "line": 23,
              "column": 2
            },
            "end": {
              "line": 259,
              "column": 4
            }
          },
          "functions": [
            {
              "name": "Polymer.Path.isPath",
              "description": "Returns true if the given string is a structured data path (has dots).\n\nExample:\n\n```\nPolymer.Path.isPath('foo.bar.baz') // true\nPolymer.Path.isPath('foo')         // false\n```",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\path.html",
                "start": {
                  "line": 39,
                  "column": 4
                },
                "end": {
                  "line": 41,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "string",
                  "desc": "Path string",
                  "name": "path"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the string contained one or more dots"
              }
            },
            {
              "name": "Polymer.Path.root",
              "description": "Returns the root property name for the given path.\n\nExample:\n\n```\nPolymer.Path.root('foo.bar.baz') // 'foo'\nPolymer.Path.root('foo')         // 'foo'\n```",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\path.html",
                "start": {
                  "line": 57,
                  "column": 4
                },
                "end": {
                  "line": 63,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "string",
                  "desc": "Path string",
                  "name": "path"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Root property name"
              }
            },
            {
              "name": "Polymer.Path.isAncestor",
              "description": "Given `base` is `foo.bar`, `foo` is an ancestor, `foo.bar` is not\nReturns true if the given path is an ancestor of the base path.\n\nExample:\n\n```\nPolymer.Path.isAncestor('foo.bar', 'foo')         // true\nPolymer.Path.isAncestor('foo.bar', 'foo.bar')     // false\nPolymer.Path.isAncestor('foo.bar', 'foo.bar.baz') // false\n```",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\path.html",
                "start": {
                  "line": 82,
                  "column": 4
                },
                "end": {
                  "line": 85,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "string",
                  "desc": "Path string to test against.",
                  "name": "base"
                },
                {
                  "type": "string",
                  "desc": "Path string to test.",
                  "name": "path"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if `path` is an ancestor of `base`."
              }
            },
            {
              "name": "Polymer.Path.isDescendant",
              "description": "Given `base` is `foo.bar`, `foo.bar.baz` is an descendant\n\nExample:\n\n```\nPolymer.Path.isDescendant('foo.bar', 'foo.bar.baz') // true\nPolymer.Path.isDescendant('foo.bar', 'foo.bar')     // false\nPolymer.Path.isDescendant('foo.bar', 'foo')         // false\n```",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\path.html",
                "start": {
                  "line": 103,
                  "column": 4
                },
                "end": {
                  "line": 106,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "string",
                  "desc": "Path string to test against.",
                  "name": "base"
                },
                {
                  "type": "string",
                  "desc": "Path string to test.",
                  "name": "path"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if `path` is a descendant of `base`."
              }
            },
            {
              "name": "Polymer.Path.translate",
              "description": "Replaces a previous base path with a new base path, preserving the\nremainder of the path.\n\nUser must ensure `path` has a prefix of `base`.\n\nExample:\n\n```\nPolymer.Path.translate('foo.bar', 'zot', 'foo.bar.baz') // 'zot.baz'\n```",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\path.html",
                "start": {
                  "line": 126,
                  "column": 4
                },
                "end": {
                  "line": 128,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "string",
                  "desc": "Current base string to remove",
                  "name": "base"
                },
                {
                  "type": "string",
                  "desc": "New base string to replace with",
                  "name": "newBase"
                },
                {
                  "type": "string",
                  "desc": "Path to translate",
                  "name": "path"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Translated string"
              }
            },
            {
              "name": "Polymer.Path.normalize",
              "description": "Converts array-based paths to flattened path.  String-based paths\nare returned as-is.\n\nExample:\n\n```\nPolymer.Path.normalize(['foo.bar', 0, 'baz'])  // 'foo.bar.0.baz'\nPolymer.Path.normalize('foo.bar.0.baz')        // 'foo.bar.0.baz'\n```",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\path.html",
                "start": {
                  "line": 157,
                  "column": 4
                },
                "end": {
                  "line": 170,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "(string | !Array.<(string | number)>)",
                  "desc": "Input path",
                  "name": "path"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Flattened path"
              }
            },
            {
              "name": "Polymer.Path.split",
              "description": "Splits a path into an array of property names. Accepts either arrays\nof path parts or strings.\n\nExample:\n\n```\nPolymer.Path.split(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']\nPolymer.Path.split('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']\n```",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\path.html",
                "start": {
                  "line": 189,
                  "column": 4
                },
                "end": {
                  "line": 194,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "(string | !Array.<(string | number)>)",
                  "desc": "Input path",
                  "name": "path"
                }
              ],
              "return": {
                "type": "!Array.<string>",
                "desc": "Array of path parts"
              }
            },
            {
              "name": "Polymer.Path.get",
              "description": "Reads a value from a path.  If any sub-property in the path is `undefined`,\nthis method returns `undefined` (will never throw.",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\path.html",
                "start": {
                  "line": 209,
                  "column": 4
                },
                "end": {
                  "line": 224,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "Object",
                  "desc": "Object from which to dereference path from",
                  "name": "root"
                },
                {
                  "type": "(string | !Array.<(string | number)>)",
                  "desc": "Path to read",
                  "name": "path"
                },
                {
                  "type": "Object=",
                  "desc": "If an object is provided to `info`, the normalized\n (flattened) path will be set to `info.path`.",
                  "name": "info"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value at path, or `undefined` if the path could not be\n fully dereferenced."
              }
            },
            {
              "name": "Polymer.Path.set",
              "description": "Sets a value to a path.  If any sub-property in the path is `undefined`,\nthis method will no-op.",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\path.html",
                "start": {
                  "line": 237,
                  "column": 4
                },
                "end": {
                  "line": 257,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "Object",
                  "desc": "Object from which to dereference path from",
                  "name": "root"
                },
                {
                  "type": "(string | !Array.<(string | number)>)",
                  "desc": "Path to set",
                  "name": "path"
                },
                {
                  "type": "*",
                  "desc": "Value to set to path",
                  "name": "value"
                }
              ],
              "return": {
                "type": "(string | undefined)",
                "desc": "The normalized version of the input path"
              }
            }
          ]
        },
        {
          "name": "Polymer.CaseMap",
          "description": "Module with utilities for converting between \"dash-case\" and \"camelCase\"\nidentifiers.",
          "summary": "Module that provides utilities for converting between \"dash-case\"\n  and \"camelCase\".",
          "sourceRange": {
            "file": "components\\polymer\\lib\\utils\\case-map.html",
            "start": {
              "line": 27,
              "column": 2
            },
            "end": {
              "line": 59,
              "column": 4
            }
          },
          "functions": [
            {
              "name": "Polymer.CaseMap.dashToCamelCase",
              "description": "Converts \"dash-case\" identifier (e.g. `foo-bar-baz`) to \"camelCase\"\n(e.g. `fooBarBaz`).",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\case-map.html",
                "start": {
                  "line": 37,
                  "column": 4
                },
                "end": {
                  "line": 43,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "string",
                  "desc": "Dash-case identifier",
                  "name": "dash"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Camel-case representation of the identifier"
              }
            },
            {
              "name": "Polymer.CaseMap.camelToDashCase",
              "description": "Converts \"camelCase\" identifier (e.g. `fooBarBaz`) to \"dash-case\"\n(e.g. `foo-bar-baz`).",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\case-map.html",
                "start": {
                  "line": 53,
                  "column": 4
                },
                "end": {
                  "line": 57,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "string",
                  "desc": "Camel-case identifier",
                  "name": "camel"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Dash-case representation of the identifier"
              }
            }
          ]
        },
        {
          "name": "Polymer.Async",
          "description": "Module that provides a number of strategies for enqueuing asynchronous\ntasks.  Each sub-module provides a standard `run(fn)` interface that returns a\nhandle, and a `cancel(handle)` interface for canceling async tasks before\nthey run.",
          "summary": "Module that provides a number of strategies for enqueuing asynchronous\ntasks.",
          "sourceRange": {
            "file": "components\\polymer\\lib\\utils\\async.html",
            "start": {
              "line": 51,
              "column": 2
            },
            "end": {
              "line": 212,
              "column": 4
            }
          },
          "namespaces": [
            {
              "name": "Polymer.Async.timeOut",
              "description": "Async interface wrapper around `setTimeout`.",
              "summary": "Async interface wrapper around `setTimeout`.",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\async.html",
                "start": {
                  "line": 60,
                  "column": 4
                },
                "end": {
                  "line": 98,
                  "column": 5
                }
              },
              "functions": [
                {
                  "name": "Polymer.Async.timeOut.after",
                  "description": "Returns a sub-module with the async interface providing the provided\ndelay.",
                  "summary": "",
                  "sourceRange": {
                    "file": "components\\polymer\\lib\\utils\\async.html",
                    "start": {
                      "line": 69,
                      "column": 6
                    },
                    "end": {
                      "line": 76,
                      "column": 7
                    }
                  },
                  "privacy": "public",
                  "params": [
                    {
                      "type": "number=",
                      "desc": "Time to wait before calling callbacks in ms",
                      "name": "delay"
                    }
                  ],
                  "return": {
                    "type": "!AsyncInterface",
                    "desc": "An async timeout interface"
                  }
                },
                {
                  "name": "Polymer.Async.timeOut.run",
                  "description": "Enqueues a function called in the next task.",
                  "summary": "",
                  "sourceRange": {
                    "file": "components\\polymer\\lib\\utils\\async.html",
                    "start": {
                      "line": 85,
                      "column": 6
                    },
                    "end": {
                      "line": 87,
                      "column": 7
                    }
                  },
                  "privacy": "public",
                  "params": [
                    {
                      "type": "!Function",
                      "desc": "Callback to run",
                      "name": "fn"
                    },
                    {
                      "type": "number=",
                      "desc": "Delay in milliseconds",
                      "name": "delay"
                    }
                  ],
                  "return": {
                    "type": "number",
                    "desc": "Handle used for canceling task"
                  }
                },
                {
                  "name": "Polymer.Async.timeOut.cancel",
                  "description": "Cancels a previously enqueued `timeOut` callback.",
                  "summary": "",
                  "sourceRange": {
                    "file": "components\\polymer\\lib\\utils\\async.html",
                    "start": {
                      "line": 95,
                      "column": 6
                    },
                    "end": {
                      "line": 97,
                      "column": 7
                    }
                  },
                  "privacy": "public",
                  "params": [
                    {
                      "type": "number",
                      "desc": "Handle returned from `run` of callback to cancel",
                      "name": "handle"
                    }
                  ],
                  "return": {
                    "type": "void",
                    "desc": ""
                  }
                }
              ]
            },
            {
              "name": "Polymer.Async.animationFrame",
              "description": "Async interface wrapper around `requestAnimationFrame`.",
              "summary": "Async interface wrapper around `requestAnimationFrame`.",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\async.html",
                "start": {
                  "line": 107,
                  "column": 4
                },
                "end": {
                  "line": 128,
                  "column": 5
                }
              },
              "functions": [
                {
                  "name": "Polymer.Async.animationFrame.run",
                  "description": "Enqueues a function called at `requestAnimationFrame` timing.",
                  "summary": "",
                  "sourceRange": {
                    "file": "components\\polymer\\lib\\utils\\async.html",
                    "start": {
                      "line": 115,
                      "column": 6
                    },
                    "end": {
                      "line": 117,
                      "column": 7
                    }
                  },
                  "privacy": "public",
                  "params": [
                    {
                      "type": "function (number): void",
                      "desc": "Callback to run",
                      "name": "fn"
                    }
                  ],
                  "return": {
                    "type": "number",
                    "desc": "Handle used for canceling task"
                  }
                },
                {
                  "name": "Polymer.Async.animationFrame.cancel",
                  "description": "Cancels a previously enqueued `animationFrame` callback.",
                  "summary": "",
                  "sourceRange": {
                    "file": "components\\polymer\\lib\\utils\\async.html",
                    "start": {
                      "line": 125,
                      "column": 6
                    },
                    "end": {
                      "line": 127,
                      "column": 7
                    }
                  },
                  "privacy": "public",
                  "params": [
                    {
                      "type": "number",
                      "desc": "Handle returned from `run` of callback to cancel",
                      "name": "handle"
                    }
                  ],
                  "return": {
                    "type": "void",
                    "desc": ""
                  }
                }
              ]
            },
            {
              "name": "Polymer.Async.idlePeriod",
              "description": "Async interface wrapper around `requestIdleCallback`.  Falls back to\n`setTimeout` on browsers that do not support `requestIdleCallback`.",
              "summary": "Async interface wrapper around `requestIdleCallback`.",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\async.html",
                "start": {
                  "line": 138,
                  "column": 4
                },
                "end": {
                  "line": 163,
                  "column": 5
                }
              },
              "functions": [
                {
                  "name": "Polymer.Async.idlePeriod.run",
                  "description": "Enqueues a function called at `requestIdleCallback` timing.",
                  "summary": "",
                  "sourceRange": {
                    "file": "components\\polymer\\lib\\utils\\async.html",
                    "start": {
                      "line": 146,
                      "column": 6
                    },
                    "end": {
                      "line": 150,
                      "column": 7
                    }
                  },
                  "privacy": "public",
                  "params": [
                    {
                      "type": "function (!IdleDeadline): void",
                      "desc": "Callback to run",
                      "name": "fn"
                    }
                  ],
                  "return": {
                    "type": "number",
                    "desc": "Handle used for canceling task"
                  }
                },
                {
                  "name": "Polymer.Async.idlePeriod.cancel",
                  "description": "Cancels a previously enqueued `idlePeriod` callback.",
                  "summary": "",
                  "sourceRange": {
                    "file": "components\\polymer\\lib\\utils\\async.html",
                    "start": {
                      "line": 158,
                      "column": 6
                    },
                    "end": {
                      "line": 162,
                      "column": 7
                    }
                  },
                  "privacy": "public",
                  "params": [
                    {
                      "type": "number",
                      "desc": "Handle returned from `run` of callback to cancel",
                      "name": "handle"
                    }
                  ],
                  "return": {
                    "type": "void",
                    "desc": ""
                  }
                }
              ]
            },
            {
              "name": "Polymer.Async.microTask",
              "description": "Async interface for enqueuing callbacks that run at microtask timing.\n\nNote that microtask timing is achieved via a single `MutationObserver`,\nand thus callbacks enqueued with this API will all run in a single\nbatch, and not interleaved with other microtasks such as promises.\nPromises are avoided as an implementation choice for the time being\ndue to Safari bugs that cause Promises to lack microtask guarantees.",
              "summary": "Async interface for enqueuing callbacks that run at microtask\n  timing.",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\async.html",
                "start": {
                  "line": 179,
                  "column": 4
                },
                "end": {
                  "line": 211,
                  "column": 5
                }
              },
              "functions": [
                {
                  "name": "Polymer.Async.microTask.run",
                  "description": "Enqueues a function called at microtask timing.",
                  "summary": "",
                  "sourceRange": {
                    "file": "components\\polymer\\lib\\utils\\async.html",
                    "start": {
                      "line": 188,
                      "column": 6
                    },
                    "end": {
                      "line": 192,
                      "column": 7
                    }
                  },
                  "privacy": "public",
                  "params": [
                    {
                      "type": "!Function=",
                      "desc": "Callback to run",
                      "name": "callback"
                    }
                  ],
                  "return": {
                    "type": "number",
                    "desc": "Handle used for canceling task"
                  }
                },
                {
                  "name": "Polymer.Async.microTask.cancel",
                  "description": "Cancels a previously enqueued `microTask` callback.",
                  "summary": "",
                  "sourceRange": {
                    "file": "components\\polymer\\lib\\utils\\async.html",
                    "start": {
                      "line": 201,
                      "column": 6
                    },
                    "end": {
                      "line": 209,
                      "column": 7
                    }
                  },
                  "privacy": "public",
                  "params": [
                    {
                      "type": "number",
                      "desc": "Handle returned from `run` of callback to cancel",
                      "name": "handle"
                    }
                  ],
                  "return": {
                    "type": "void",
                    "desc": ""
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Polymer.telemetry",
          "description": "Provides basic tracking of element definitions (registrations) and\ninstance counts.",
          "summary": "Provides basic tracking of element definitions (registrations) and\ninstance counts.",
          "sourceRange": {
            "file": "components\\polymer\\lib\\mixins\\element-mixin.html",
            "start": {
              "line": 675,
              "column": 2
            },
            "end": {
              "line": 712,
              "column": 4
            }
          }
        },
        {
          "name": "Polymer.Gestures",
          "description": "Module for adding listeners to a node for the following normalized\ncross-platform \"gesture\" events:\n- `down` - mouse or touch went down\n- `up` - mouse or touch went up\n- `tap` - mouse click or finger tap\n- `track` - mouse drag or touch move",
          "summary": "Module for adding cross-platform gesture event listeners.",
          "sourceRange": {
            "file": "components\\polymer\\lib\\utils\\gestures.html",
            "start": {
              "line": 339,
              "column": 2
            },
            "end": {
              "line": 712,
              "column": 4
            }
          },
          "functions": [
            {
              "name": "Polymer.Gestures.deepTargetFind",
              "description": "Finds the element rendered on the screen at the provided coordinates.\n\nSimilar to `document.elementFromPoint`, but pierces through\nshadow roots.",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\gestures.html",
                "start": {
                  "line": 355,
                  "column": 4
                },
                "end": {
                  "line": 374,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "number",
                  "desc": "Horizontal pixel coordinate",
                  "name": "x"
                },
                {
                  "type": "number",
                  "desc": "Vertical pixel coordinate",
                  "name": "y"
                }
              ],
              "return": {
                "type": "Element",
                "desc": "Returns the deepest shadowRoot inclusive element\nfound at the screen position given."
              }
            },
            {
              "name": "Polymer.Gestures.addListener",
              "description": "Adds an event listener to a node for the given gesture type.",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\gestures.html",
                "start": {
                  "line": 503,
                  "column": 4
                },
                "end": {
                  "line": 509,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "!Node",
                  "desc": "Node to add listener on",
                  "name": "node"
                },
                {
                  "type": "string",
                  "desc": "Gesture type: `down`, `up`, `track`, or `tap`",
                  "name": "evType"
                },
                {
                  "type": "!function (!Event): void",
                  "desc": "Event listener function to call",
                  "name": "handler"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if a gesture event listener was added."
              }
            },
            {
              "name": "Polymer.Gestures.removeListener",
              "description": "Removes an event listener from a node for the given gesture type.",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\gestures.html",
                "start": {
                  "line": 522,
                  "column": 4
                },
                "end": {
                  "line": 528,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "!Node",
                  "desc": "Node to remove listener from",
                  "name": "node"
                },
                {
                  "type": "string",
                  "desc": "Gesture type: `down`, `up`, `track`, or `tap`",
                  "name": "evType"
                },
                {
                  "type": "!function (!Event): void",
                  "desc": "Event listener function previously passed to\n `addListener`.",
                  "name": "handler"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if a gesture event listener was removed."
              }
            },
            {
              "name": "Polymer.Gestures.register",
              "description": "Registers a new gesture event recognizer for adding new custom\ngesture event types.",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\gestures.html",
                "start": {
                  "line": 610,
                  "column": 4
                },
                "end": {
                  "line": 615,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "!GestureRecognizer",
                  "desc": "Gesture recognizer descriptor",
                  "name": "recog"
                }
              ],
              "return": {
                "type": "void",
                "desc": ""
              }
            },
            {
              "name": "Polymer.Gestures.setTouchAction",
              "description": "Sets scrolling direction on node.\n\nThis value is checked on first move, thus it should be called prior to\nadding event listeners.",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\gestures.html",
                "start": {
                  "line": 647,
                  "column": 4
                },
                "end": {
                  "line": 658,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "!Element",
                  "desc": "Node to set touch action setting on",
                  "name": "node"
                },
                {
                  "type": "string",
                  "desc": "Touch action value",
                  "name": "value"
                }
              ],
              "return": {
                "type": "void",
                "desc": ""
              }
            },
            {
              "name": "Polymer.Gestures.prevent",
              "description": "Prevents the dispatch and default action of the given event name.",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\gestures.html",
                "start": {
                  "line": 690,
                  "column": 4
                },
                "end": {
                  "line": 695,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "string",
                  "desc": "Event name.",
                  "name": "evName"
                }
              ],
              "return": {
                "type": "void",
                "desc": ""
              }
            },
            {
              "name": "Polymer.Gestures.resetMouseCanceller",
              "description": "Reset the 2500ms timeout on processing mouse input after detecting touch input.\n\nTouch inputs create synthesized mouse inputs anywhere from 0 to 2000ms after the touch.\nThis method should only be called during testing with simulated touch inputs.\nCalling this method in production may cause duplicate taps or other Gestures.",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\gestures.html",
                "start": {
                  "line": 707,
                  "column": 4
                },
                "end": {
                  "line": 711,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [],
              "return": {
                "type": "void",
                "desc": ""
              }
            }
          ]
        },
        {
          "name": "Polymer.RenderStatus",
          "description": "Module for scheduling flushable pre-render and post-render tasks.",
          "summary": "Module for scheduling flushable pre-render and post-render tasks.",
          "sourceRange": {
            "file": "components\\polymer\\lib\\utils\\render-status.html",
            "start": {
              "line": 73,
              "column": 2
            },
            "end": {
              "line": 129,
              "column": 4
            }
          },
          "functions": [
            {
              "name": "Polymer.RenderStatus.beforeNextRender",
              "description": "Enqueues a callback which will be run before the next render, at\n`requestAnimationFrame` timing.\n\nThis method is useful for enqueuing work that requires DOM measurement,\nsince measurement may not be reliable in custom element callbacks before\nthe first render, as well as for batching measurement tasks in general.\n\nTasks in this queue may be flushed by calling `Polymer.RenderStatus.flush()`.",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\render-status.html",
                "start": {
                  "line": 91,
                  "column": 4
                },
                "end": {
                  "line": 96,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "*",
                  "desc": "Context object the callback function will be bound to",
                  "name": "context"
                },
                {
                  "type": "function (...*): void",
                  "desc": "Callback function",
                  "name": "callback"
                },
                {
                  "type": "!Array=",
                  "desc": "An array of arguments to call the callback function with",
                  "name": "args"
                }
              ],
              "return": {
                "type": "void",
                "desc": ""
              }
            },
            {
              "name": "Polymer.RenderStatus.afterNextRender",
              "description": "Enqueues a callback which will be run after the next render, equivalent\nto one task (`setTimeout`) after the next `requestAnimationFrame`.\n\nThis method is useful for tuning the first-render performance of an\nelement or application by deferring non-critical work until after the\nfirst paint.  Typical non-render-critical work may include adding UI\nevent listeners and aria attributes.",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\render-status.html",
                "start": {
                  "line": 113,
                  "column": 4
                },
                "end": {
                  "line": 118,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "*",
                  "desc": "Context object the callback function will be bound to",
                  "name": "context"
                },
                {
                  "type": "function (...*): void",
                  "desc": "Callback function",
                  "name": "callback"
                },
                {
                  "type": "!Array=",
                  "desc": "An array of arguments to call the callback function with",
                  "name": "args"
                }
              ],
              "return": {
                "type": "void",
                "desc": ""
              }
            }
          ]
        },
        {
          "name": "Polymer.ArraySplice",
          "description": "",
          "summary": "Module that provides utilities for diffing arrays.",
          "sourceRange": {
            "file": "components\\polymer\\lib\\utils\\array-splice.html",
            "start": {
              "line": 278,
              "column": 2
            },
            "end": {
              "line": 312,
              "column": 4
            }
          },
          "functions": [
            {
              "name": "Polymer.ArraySplice.calculateSplices",
              "description": "Returns an array of splice records indicating the minimum edits required\nto transform the `previous` array into the `current` array.\n\nSplice records are ordered by index and contain the following fields:\n- `index`: index where edit started\n- `removed`: array of removed items from this index\n- `addedCount`: number of items added at this index\n\nThis function is based on the Levenshtein \"minimum edit distance\"\nalgorithm. Note that updates are treated as removal followed by addition.\n\nThe worst-case time complexity of this algorithm is `O(l * p)`\n  l: The length of the current array\n  p: The length of the previous array\n\nHowever, the worst-case complexity is reduced by an `O(n)` optimization\nto detect any shared prefix & suffix between the two arrays and only\nperform the more expensive minimum edit distance calculation over the\nnon-shared portions of the arrays.",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\array-splice.html",
                "start": {
                  "line": 311,
                  "column": 4
                },
                "end": {
                  "line": 311,
                  "column": 20
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "!Array",
                  "desc": "The \"changed\" array for which splices will be\ncalculated.",
                  "name": "current"
                },
                {
                  "type": "!Array",
                  "desc": "The \"unchanged\" original array to compare\n`current` against to determine the splices.",
                  "name": "previous"
                }
              ],
              "return": {
                "type": "!Array",
                "desc": "Returns an array of splice record objects. Each of these\ncontains: `index` the location where the splice occurred; `removed`\nthe array of removed items from this location; `addedCount` the number\nof items added at this location."
              }
            }
          ]
        },
        {
          "name": "Polymer.dom",
          "description": "Legacy DOM and Event manipulation API wrapper factory used to abstract\ndifferences between native Shadow DOM and \"Shady DOM\" when polyfilling on\nolder browsers.\n\nNote that in Polymer 2.x use of `Polymer.dom` is no longer required and\nin the majority of cases simply facades directly to the standard native\nAPI.",
          "summary": "Legacy DOM and Event manipulation API wrapper factory used to\nabstract differences between native Shadow DOM and \"Shady DOM.\"",
          "sourceRange": {
            "file": "components\\polymer\\lib\\legacy\\polymer.dom.html",
            "start": {
              "line": 367,
              "column": 2
            },
            "end": {
              "line": 379,
              "column": 4
            }
          },
          "functions": [
            {
              "name": "Polymer.dom.matchesSelector",
              "description": "Cross-platform `element.matches` shim.",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\legacy\\polymer.dom.html",
                "start": {
                  "line": 34,
                  "column": 2
                },
                "end": {
                  "line": 36,
                  "column": 4
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "!Node",
                  "desc": "Node to check selector against",
                  "name": "node"
                },
                {
                  "type": "string",
                  "desc": "Selector to match",
                  "name": "selector"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if node matched selector"
              }
            }
          ]
        },
        {
          "name": "Polymer.Templatize",
          "description": "Module for preparing and stamping instances of templates that utilize\nPolymer's data-binding and declarative event listener features.\n\nExample:\n\n    // Get a template from somewhere, e.g. light DOM\n    let template = this.querySelector('template');\n    // Prepare the template\n    let TemplateClass = Polymer.Templatize.templatize(template);\n    // Instance the template with an initial data model\n    let instance = new TemplateClass({myProp: 'initial'});\n    // Insert the instance's DOM somewhere, e.g. element's shadow DOM\n    this.shadowRoot.appendChild(instance.root);\n    // Changing a property on the instance will propagate to bindings\n    // in the template\n    instance.myProp = 'new value';\n\nThe `options` dictionary passed to `templatize` allows for customizing\nfeatures of the generated template class, including how outer-scope host\nproperties should be forwarded into template instances, how any instance\nproperties added into the template's scope should be notified out to\nthe host, and whether the instance should be decorated as a \"parent model\"\nof any event handlers.\n\n    // Customize property forwarding and event model decoration\n    let TemplateClass = Polymer.Templatize.templatize(template, this, {\n      parentModel: true,\n      forwardHostProp(property, value) {...},\n      instanceProps: {...},\n      notifyInstanceProp(instance, property, value) {...},\n    });",
          "summary": "Module for preparing and stamping instances of templates\n  utilizing Polymer templating features.",
          "sourceRange": {
            "file": "components\\polymer\\lib\\utils\\templatize.html",
            "start": {
              "line": 420,
              "column": 4
            },
            "end": {
              "line": 572,
              "column": 6
            }
          },
          "functions": [
            {
              "name": "Polymer.Templatize.templatize",
              "description": "Returns an anonymous `Polymer.PropertyEffects` class bound to the\n`<template>` provided.  Instancing the class will result in the\ntemplate being stamped into a document fragment stored as the instance's\n`root` property, after which it can be appended to the DOM.\n\nTemplates may utilize all Polymer data-binding features as well as\ndeclarative event listeners.  Event listeners and inline computing\nfunctions in the template will be called on the host of the template.\n\nThe constructor returned takes a single argument dictionary of initial\nproperty values to propagate into template bindings.  Additionally\nhost properties can be forwarded in, and instance properties can be\nnotified out by providing optional callbacks in the `options` dictionary.\n\nValid configuration in `options` are as follows:\n\n- `forwardHostProp(property, value)`: Called when a property referenced\n  in the template changed on the template's host. As this library does\n  not retain references to templates instanced by the user, it is the\n  templatize owner's responsibility to forward host property changes into\n  user-stamped instances.  The `instance.forwardHostProp(property, value)`\n   method on the generated class should be called to forward host\n  properties into the template to prevent unnecessary property-changed\n  notifications. Any properties referenced in the template that are not\n  defined in `instanceProps` will be notified up to the template's host\n  automatically.\n- `instanceProps`: Dictionary of property names that will be added\n  to the instance by the templatize owner.  These properties shadow any\n  host properties, and changes within the template to these properties\n  will result in `notifyInstanceProp` being called.\n- `mutableData`: When `true`, the generated class will skip strict\n  dirty-checking for objects and arrays (always consider them to be\n  \"dirty\").\n- `notifyInstanceProp(instance, property, value)`: Called when\n  an instance property changes.  Users may choose to call `notifyPath`\n  on e.g. the owner to notify the change.\n- `parentModel`: When `true`, events handled by declarative event listeners\n  (`on-event=\"handler\"`) will be decorated with a `model` property pointing\n  to the template instance that stamped it.  It will also be returned\n  from `instance.parentModel` in cases where template instance nesting\n  causes an inner model to shadow an outer model.\n\nAll callbacks are called bound to the `owner`. Any context\nneeded for the callbacks (such as references to `instances` stamped)\nshould be stored on the `owner` such that they can be retrieved via\n`this`.\n\nWhen `options.forwardHostProp` is declared as an option, any properties\nreferenced in the template will be automatically forwarded from the host of\nthe `<template>` to instances, with the exception of any properties listed in\nthe `options.instanceProps` object.  `instanceProps` are assumed to be\nmanaged by the owner of the instances, either passed into the constructor\nor set after the fact.  Note, any properties passed into the constructor will\nalways be set to the instance (regardless of whether they would normally\nbe forwarded from the host).\n\nNote that `templatize()` can be run only once for a given `<template>`.\nFurther calls will result in an error. Also, there is a special\nbehavior if the template was duplicated through a mechanism such as\n`<dom-repeat>` or `<test-fixture>`. In this case, all calls to\n`templatize()` return the same class for all duplicates of a template.\nThe class returned from `templatize()` is generated only once using\nthe `options` from the first call. This means that any `options`\nprovided to subsequent calls will be ignored. Therefore, it is very\nimportant not to close over any variables inside the callbacks. Also,\narrow functions must be avoided because they bind the outer `this`.\nInside the callbacks, any contextual information can be accessed\nthrough `this`, which points to the `owner`.",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\templatize.html",
                "start": {
                  "line": 501,
                  "column": 6
                },
                "end": {
                  "line": 527,
                  "column": 7
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "!HTMLTemplateElement",
                  "desc": "Template to templatize",
                  "name": "template"
                },
                {
                  "type": "Polymer_PropertyEffects=",
                  "desc": "Owner of the template instances;\n  any optional callbacks will be bound to this owner.",
                  "name": "owner"
                },
                {
                  "type": "Object=",
                  "desc": "Options dictionary (see summary for details)",
                  "name": "options"
                }
              ],
              "return": {
                "type": "function (new: TemplateInstanceBase)",
                "desc": "Generated class bound to the template\n  provided"
              }
            },
            {
              "name": "Polymer.Templatize.modelForElement",
              "description": "Returns the template \"model\" associated with a given element, which\nserves as the binding scope for the template instance the element is\ncontained in. A template model is an instance of\n`TemplateInstanceBase`, and should be used to manipulate data\nassociated with this template instance.\n\nExample:\n\n  let model = modelForElement(el);\n  if (model.index < 10) {\n    model.set('item.checked', true);\n  }",
              "summary": "",
              "sourceRange": {
                "file": "components\\polymer\\lib\\utils\\templatize.html",
                "start": {
                  "line": 550,
                  "column": 6
                },
                "end": {
                  "line": 571,
                  "column": 7
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "HTMLTemplateElement",
                  "desc": "The model will be returned for\n  elements stamped from this template",
                  "name": "template"
                },
                {
                  "type": "Node=",
                  "desc": "Node for which to return a template model.",
                  "name": "node"
                }
              ],
              "return": {
                "type": "TemplateInstanceBase",
                "desc": "Template instance representing the\n  binding scope for the element"
              }
            }
          ]
        },
        {
          "name": "Polymer.AppLayout",
          "description": "",
          "summary": "",
          "sourceRange": {
            "file": "components\\app-layout\\helpers\\helpers.html",
            "start": {
              "line": 14,
              "column": 2
            },
            "end": {
              "line": 14,
              "column": 46
            }
          }
        },
        {
          "name": "Polymer.IronScrollManager",
          "description": "The IronScrollManager is intended to provide a central source\nof authority and control over which elements in a document are currently\nallowed to scroll.",
          "summary": "",
          "sourceRange": {
            "file": "components\\iron-overlay-behavior\\iron-scroll-manager.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 388,
              "column": 4
            }
          },
          "functions": [
            {
              "name": "Polymer.IronScrollManager.elementIsScrollLocked",
              "description": "Returns true if the provided element is \"scroll locked\", which is to\nsay that it cannot be scrolled via pointer or keyboard interactions.",
              "summary": "",
              "sourceRange": {
                "file": "components\\iron-overlay-behavior\\iron-scroll-manager.html",
                "start": {
                  "line": 72,
                  "column": 4
                },
                "end": {
                  "line": 99,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "!HTMLElement",
                  "desc": "An HTML element instance which may or may\nnot be scroll locked.",
                  "name": "element"
                }
              ]
            },
            {
              "name": "Polymer.IronScrollManager.pushScrollLock",
              "description": "Push an element onto the current scroll lock stack. The most recently\npushed element and its children will be considered scrollable. All\nother elements will not be scrollable.\n\nScroll locking is implemented as a stack so that cases such as\ndropdowns within dropdowns are handled well.",
              "summary": "",
              "sourceRange": {
                "file": "components\\iron-overlay-behavior\\iron-scroll-manager.html",
                "start": {
                  "line": 112,
                  "column": 4
                },
                "end": {
                  "line": 126,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "!HTMLElement",
                  "desc": "The element that should lock scroll.",
                  "name": "element"
                }
              ]
            },
            {
              "name": "Polymer.IronScrollManager.removeScrollLock",
              "description": "Remove an element from the scroll lock stack. The element being\nremoved does not need to be the most recently pushed element. However,\nthe scroll lock constraints only change when the most recently pushed\nelement is removed.",
              "summary": "",
              "sourceRange": {
                "file": "components\\iron-overlay-behavior\\iron-scroll-manager.html",
                "start": {
                  "line": 138,
                  "column": 4
                },
                "end": {
                  "line": 153,
                  "column": 5
                }
              },
              "privacy": "public",
              "params": [
                {
                  "type": "!HTMLElement",
                  "desc": "The element to remove from the scroll\nlock stack.",
                  "name": "element"
                }
              ]
            }
          ]
        }
      ],
      "elements": [
        {
          "description": "The `dom-module` element registers the dom it contains to the name given\nby the module's id attribute. It provides a unified database of dom\naccessible via its static `import` API.\n\nA key use case of `dom-module` is for providing custom element `<template>`s\nvia HTML imports that are parsed by the native HTML parser, that can be\nrelocated during a bundling pass and still looked up by `id`.\n\nExample:\n\n    <dom-module id=\"foo\">\n      <img src=\"stuff.png\">\n    </dom-module>\n\nThen in code in some other location that cannot access the dom-module above\n\n    let img = customElements.get('dom-module').import('foo', 'img');",
          "summary": "Custom element that provides a registry of relocatable DOM content\n  by `id` that is agnostic to bundling.",
          "path": "components\\polymer\\lib\\elements\\dom-module.html",
          "properties": [],
          "methods": [
            {
              "name": "attributeChangedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 82,
                  "column": 4
                },
                "end": {
                  "line": 86,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of attribute."
                },
                {
                  "name": "old",
                  "type": "?string",
                  "description": "Old value of attribute."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Current value of attribute."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "register",
              "description": "Registers the dom-module at a given id. This method should only be called\nwhen a dom-module is imperatively created. For\nexample, `document.createElement('dom-module').register('foo')`.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 120,
                  "column": 4
                },
                "end": {
                  "line": 131,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "id",
                  "type": "string=",
                  "description": "The id at which to register the dom-module."
                }
              ],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 2
            },
            "end": {
              "line": 132,
              "column": 3
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Polymer.DomModule",
          "attributes": [
            {
              "name": "id",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 55,
                  "column": 46
                },
                "end": {
                  "line": 55,
                  "column": 50
                }
              },
              "metadata": {}
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "dom-module"
        },
        {
          "description": "Custom element to allow using Polymer's template features (data binding,\ndeclarative event listeners, etc.) in the main document without defining\na new custom element.\n\n`<template>` tags utilizing bindings may be wrapped with the `<dom-bind>`\nelement, which will immediately stamp the wrapped template into the main\ndocument and bind elements to the `dom-bind` element itself as the\nbinding scope.",
          "summary": "Custom element to allow using Polymer's template features (data\n  binding, declarative event listeners, etc.) in the main document.",
          "path": "components\\polymer\\lib\\elements\\dom-bind.html",
          "properties": [
            {
              "name": "__dataClientsReady",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1147,
                  "column": 8
                },
                "end": {
                  "line": 1147,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPendingClients",
              "type": "Array",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1149,
                  "column": 8
                },
                "end": {
                  "line": 1149,
                  "column": 34
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataToNotify",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1151,
                  "column": 8
                },
                "end": {
                  "line": 1151,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataLinkedPaths",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1153,
                  "column": 8
                },
                "end": {
                  "line": 1153,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHasPaths",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1155,
                  "column": 8
                },
                "end": {
                  "line": 1155,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataCompoundStorage",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1157,
                  "column": 8
                },
                "end": {
                  "line": 1157,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHost",
              "type": "Polymer_PropertyEffects",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1159,
                  "column": 8
                },
                "end": {
                  "line": 1159,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataTemp",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1161,
                  "column": 8
                },
                "end": {
                  "line": 1161,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataClientsInitialized",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1163,
                  "column": 8
                },
                "end": {
                  "line": 1163,
                  "column": 38
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__data",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1165,
                  "column": 8
                },
                "end": {
                  "line": 1165,
                  "column": 20
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPending",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1167,
                  "column": 8
                },
                "end": {
                  "line": 1167,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataOld",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1169,
                  "column": 8
                },
                "end": {
                  "line": 1169,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__computeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1171,
                  "column": 8
                },
                "end": {
                  "line": 1171,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__reflectEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1173,
                  "column": 8
                },
                "end": {
                  "line": 1173,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__notifyEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1175,
                  "column": 8
                },
                "end": {
                  "line": 1175,
                  "column": 29
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__propagateEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1177,
                  "column": 8
                },
                "end": {
                  "line": 1177,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__observeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1179,
                  "column": 8
                },
                "end": {
                  "line": 1179,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__readOnly",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1181,
                  "column": 8
                },
                "end": {
                  "line": 1181,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__templateInfo",
              "type": "!TemplateInfo",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1183,
                  "column": 8
                },
                "end": {
                  "line": 1183,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "mutableData",
              "type": "boolean",
              "description": "Instance-level flag for configuring the dirty-checking strategy\nfor this element.  When true, Objects and Arrays will skip dirty\nchecking, otherwise strict equality checking will be used.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\mutable-data.html",
                "start": {
                  "line": 169,
                  "column": 10
                },
                "end": {
                  "line": 169,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Polymer.OptionalMutableData"
            }
          ],
          "methods": [
            {
              "name": "_stampTemplate",
              "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2423,
                  "column": 6
                },
                "end": {
                  "line": 2448,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to stamp"
                }
              ],
              "return": {
                "type": "!StampedTemplate",
                "desc": "Cloned template content"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addMethodEventListenerToNode",
              "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 452,
                  "column": 6
                },
                "end": {
                  "line": 457,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add listener on"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Name of method"
                },
                {
                  "name": "context",
                  "type": "*=",
                  "description": "Context the method will be called on (defaults\n  to `node`)"
                }
              ],
              "return": {
                "type": "Function",
                "desc": "Generated handler function"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_addEventListenerToNode",
              "description": "Add the event listener to the node if it is a gestures event.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\gesture-event-listeners.html",
                "start": {
                  "line": 55,
                  "column": 6
                },
                "end": {
                  "line": 59,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add event listener to"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to add"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.GestureEventListeners"
            },
            {
              "name": "_removeEventListenerFromNode",
              "description": "Remove the event listener to the node if it is a gestures event.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\gesture-event-listeners.html",
                "start": {
                  "line": 69,
                  "column": 6
                },
                "end": {
                  "line": 73,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to remove event listener from"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.GestureEventListeners"
            },
            {
              "name": "_createPropertyAccessor",
              "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 115,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_addPropertyToAttributeMap",
              "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 132,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                }
              ],
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_definePropertyAccessor",
              "description": "Overrides PropertiesChanged implementation to save existing prototype\nproperty value so that it can be reset.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-accessors.html",
                "start": {
                  "line": 288,
                  "column": 6
                },
                "end": {
                  "line": 291,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created\n\nWhen calling on a prototype, any overwritten values are saved in\n`__dataProto`, and it is up to the subclasser to decide how/when\nto set those properties back into the accessor.  When calling on an\ninstance, the overwritten value is set via `_setPendingProperty`,\nand the user should call `_invalidateProperties` or `_flushProperties`\nfor the values to take effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "ready",
              "description": "Overrides `PropertyAccessors` so that property accessor\nside effects are not enabled until after client dom is fully ready.\nAlso calls `_flushClients` callback to ensure client dom is enabled\nthat was not enabled as a result of flushing properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1658,
                  "column": 6
                },
                "end": {
                  "line": 1674,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_initializeProperties",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1193,
                  "column": 6
                },
                "end": {
                  "line": 1206,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_initializeInstanceProperties",
              "description": "Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n`_setProperty`'s `shouldNotify: true`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1231,
                  "column": 6
                },
                "end": {
                  "line": 1240,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Properties to initialize on the instance"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setProperty",
              "description": "Overrides base implementation to ensure all accessors set `shouldNotify`\nto true, for per-property notification tracking.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1513,
                  "column": 6
                },
                "end": {
                  "line": 1517,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_getProperty",
              "description": "Returns the value for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 247,
                  "column": 8
                },
                "end": {
                  "line": 249,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value for the given property"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setPendingProperty",
              "description": "Overrides the `PropertiesChanged` implementation to introduce special\ndirty check logic depending on the property & value being set:\n\n1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n   Stored in `__dataTemp`, dirty checked against `__dataTemp`\n2. Object set to simple property (e.g. 'prop': {...})\n   Stored in `__dataTemp` and `__data`, dirty checked against\n   `__dataTemp` by default implementation of `_shouldPropertyChange`\n3. Primitive value set to simple property (e.g. 'prop': 42)\n   Stored in `__data`, dirty checked against `__data`\n\nThe dirty-check is important to prevent cycles due to two-way\nnotification, but paths and objects are only dirty checked against any\nprevious value set during this turn via a \"temporary cache\" that is\ncleared when the last `_propertiesChanged` exits. This is so:\na. any cached array paths (e.g. 'array.3.prop') may be invalidated\n   due to array mutations like shift/unshift/splice; this is fine\n   since path changes are dirty-checked at user entry points like `set`\nb. dirty-checking for objects only lasts one turn to allow the user\n   to mutate the object in-place and re-set it with the same identity\n   and have all sub-properties re-propagated in a subsequent turn.\n\nThe temp cache is not necessarily sufficient to prevent invalid array\npaths, since a splice can happen during the same turn (with pathological\nuser code); we could introduce a \"fixup\" for temporarily cached array\npaths if needed: https://github.com/Polymer/polymer/issues/4227",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1473,
                  "column": 6
                },
                "end": {
                  "line": 1502,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "shouldNotify",
                  "type": "boolean=",
                  "description": "True if property should fire notification\n  event (applies only for `notify: true` properties)"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property changed"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_invalidateProperties",
              "description": "Overrides `PropertyAccessor`'s default async queuing of\n`_propertiesChanged`: if `__dataReady` is false (has not yet been\nmanually flushed), the function no-ops; otherwise flushes\n`_propertiesChanged` synchronously.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1528,
                  "column": 6
                },
                "end": {
                  "line": 1532,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_enableProperties",
              "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 313,
                  "column": 8
                },
                "end": {
                  "line": 322,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_flushProperties",
              "description": "Overrides superclass implementation.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1556,
                  "column": 6
                },
                "end": {
                  "line": 1560,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_shouldPropertiesChange",
              "description": "Called in `_flushProperties` to determine if `_propertiesChanged`\nshould be called. The default implementation returns true if\nproperties are pending. Override to customize when\n`_propertiesChanged` is called.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 356,
                  "column": 8
                },
                "end": {
                  "line": 358,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "true if changedProps is truthy"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertiesChanged",
              "description": "Implements `PropertyAccessors`'s properties changed callback.\n\nRuns each class of effects for the batch of changed properties in\na specific order (compute, propagate, reflect, observe, notify).",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1689,
                  "column": 6
                },
                "end": {
                  "line": 1722,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_shouldPropertyChange",
              "description": "Overrides `Polymer.PropertyEffects` to provide option for skipping\nstrict equality checking for Objects and Arrays.\n\nWhen `this.mutableData` is true on this instance, this method\npulls the value to dirty check against from the `__dataTemp` cache\n(rather than the normal `__data` cache) for Objects.  Since the temp\ncache is cleared at the end of a turn, this implementation allows\nside-effects of deep object changes to be processed by re-setting the\nsame object (using the temp cache as an in-turn backstop to prevent\ncycles due to 2-way notification).",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\mutable-data.html",
                "start": {
                  "line": 191,
                  "column": 6
                },
                "end": {
                  "line": 193,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change"
              },
              "inheritedFrom": "Polymer.OptionalMutableData"
            },
            {
              "name": "attributeChangedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 64,
                  "column": 6
                },
                "end": {
                  "line": 67,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_attributeToProperty",
              "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 433,
                  "column": 8
                },
                "end": {
                  "line": 440,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to deserialize."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "of the attribute."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertyToAttribute",
              "description": "Serializes a property to its associated attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 452,
                  "column": 8
                },
                "end": {
                  "line": 458,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name to reflect."
                },
                {
                  "name": "attribute",
                  "type": "string=",
                  "description": "Attribute name to reflect to."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Property value to refect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_valueToNodeAttribute",
              "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 473,
                  "column": 8
                },
                "end": {
                  "line": 480,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to set attribute to."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to serialize."
                },
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Attribute name to serialize to."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_serializeValue",
              "description": "Overrides PropertiesChanged implemention to serialize objects as JSON.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-accessors.html",
                "start": {
                  "line": 205,
                  "column": 6
                },
                "end": {
                  "line": 222,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Property value to serialize."
                }
              ],
              "return": {
                "type": "(string | undefined)",
                "desc": "String serialized from the provided property value."
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_deserializeValue",
              "description": "Converts a string to a typed JavaScript value.\n\nThis method is called by Polymer when reading HTML attribute values to\nJS properties.  Users may override this method on Polymer element\nprototypes to provide deserialization for custom `type`s.  Note,\nthe `type` argument is the value of the `type` field provided in the\n`properties` configuration object for a given property, and is\nby convention the constructor for the type to deserialize.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-accessors.html",
                "start": {
                  "line": 239,
                  "column": 6
                },
                "end": {
                  "line": 270,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Attribute value to deserialize."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "Type to deserialize the string to."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Typed value deserialized from the provided string."
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_initializeProtoProperties",
              "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1217,
                  "column": 6
                },
                "end": {
                  "line": 1221,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Properties to initialize on the prototype"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_ensureAttribute",
              "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-accessors.html",
                "start": {
                  "line": 192,
                  "column": 6
                },
                "end": {
                  "line": 197,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to ensure is set."
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "of the attribute."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_hasAccessor",
              "description": "Returns true if this library created an accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-accessors.html",
                "start": {
                  "line": 299,
                  "column": 6
                },
                "end": {
                  "line": 301,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if an accessor was created"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_isPropertyPending",
              "description": "Returns true if the specified property has a pending change.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-accessors.html",
                "start": {
                  "line": 310,
                  "column": 6
                },
                "end": {
                  "line": 312,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if property has a pending change"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_addPropertyEffect",
              "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1255,
                  "column": 6
                },
                "end": {
                  "line": 1263,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removePropertyEffect",
              "description": "Removes the given property effect.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1273,
                  "column": 6
                },
                "end": {
                  "line": 1279,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property the effect was associated with"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasPropertyEffect",
              "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1290,
                  "column": 6
                },
                "end": {
                  "line": 1293,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "type",
                  "type": "string=",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReadOnlyEffect",
              "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1303,
                  "column": 6
                },
                "end": {
                  "line": 1305,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasNotifyEffect",
              "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1315,
                  "column": 6
                },
                "end": {
                  "line": 1317,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReflectEffect",
              "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1327,
                  "column": 6
                },
                "end": {
                  "line": 1329,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasComputedEffect",
              "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1339,
                  "column": 6
                },
                "end": {
                  "line": 1341,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setPendingPropertyOrPath",
              "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1373,
                  "column": 6
                },
                "end": {
                  "line": 1405,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(number | string)>)",
                  "description": "Path to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "shouldNotify",
                  "type": "boolean=",
                  "description": "Set to true if this change should\n cause a property notification event dispatch"
                },
                {
                  "name": "isPathNotification",
                  "type": "boolean=",
                  "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setUnmanagedPropertyToNode",
              "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1428,
                  "column": 6
                },
                "end": {
                  "line": 1436,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "The node to set a property on"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "The property to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "The value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_enqueueClient",
              "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1543,
                  "column": 6
                },
                "end": {
                  "line": 1548,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "client",
                  "type": "Object",
                  "description": "PropertyEffects client to enqueue"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_flushClients",
              "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1569,
                  "column": 6
                },
                "end": {
                  "line": 1580,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__enableOrFlushClients",
              "description": "(c) the stamped dom enables.",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1594,
                  "column": 6
                },
                "end": {
                  "line": 1607,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_readyClients",
              "description": "Perform any initial setup on client dom. Called before the first\n`_flushProperties` call on client dom and before any element\nobservers are called.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1617,
                  "column": 6
                },
                "end": {
                  "line": 1619,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "setProperties",
              "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1636,
                  "column": 6
                },
                "end": {
                  "line": 1647,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
                },
                {
                  "name": "setReadOnly",
                  "type": "boolean=",
                  "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_propagatePropertyChanges",
              "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1734,
                  "column": 6
                },
                "end": {
                  "line": 1744,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "changedProps",
                  "type": "Object",
                  "description": "Bag of changed properties"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "linkPaths",
              "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1755,
                  "column": 6
                },
                "end": {
                  "line": 1760,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "to",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Target path to link."
                },
                {
                  "name": "from",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Source path to link."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unlinkPaths",
              "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1772,
                  "column": 6
                },
                "end": {
                  "line": 1777,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Target path to unlink."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifySplices",
              "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1809,
                  "column": 6
                },
                "end": {
                  "line": 1813,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "splices",
                  "type": "Array",
                  "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "get",
              "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1834,
                  "column": 6
                },
                "end": {
                  "line": 1836,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "set",
              "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1859,
                  "column": 6
                },
                "end": {
                  "line": 1869,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set at the specified path."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "push",
              "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1885,
                  "column": 6
                },
                "end": {
                  "line": 1894,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to push onto array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "pop",
              "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1909,
                  "column": 6
                },
                "end": {
                  "line": 1918,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "splice",
              "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1937,
                  "column": 6
                },
                "end": {
                  "line": 1974,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "start",
                  "type": "number",
                  "description": "Index from which to start removing/inserting."
                },
                {
                  "name": "deleteCount",
                  "type": "number",
                  "description": "Number of items to remove."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert into array."
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Array of removed items."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "shift",
              "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1989,
                  "column": 6
                },
                "end": {
                  "line": 1998,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unshift",
              "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2014,
                  "column": 6
                },
                "end": {
                  "line": 2022,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert info array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifyPath",
              "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2037,
                  "column": 6
                },
                "end": {
                  "line": 2054,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Value at the path (optional)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReadOnlyProperty",
              "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2067,
                  "column": 6
                },
                "end": {
                  "line": 2074,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createPropertyObserver",
              "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2088,
                  "column": 6
                },
                "end": {
                  "line": 2098,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string | function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createMethodObserver",
              "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2111,
                  "column": 6
                },
                "end": {
                  "line": 2117,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createNotifyingProperty",
              "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2128,
                  "column": 6
                },
                "end": {
                  "line": 2136,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReflectedProperty",
              "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2147,
                  "column": 6
                },
                "end": {
                  "line": 2160,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createComputedProperty",
              "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2174,
                  "column": 6
                },
                "end": {
                  "line": 2180,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_bindTemplate",
              "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2357,
                  "column": 6
                },
                "end": {
                  "line": 2380,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                },
                {
                  "name": "instanceBinding",
                  "type": "boolean=",
                  "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removeBoundDom",
              "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2459,
                  "column": 6
                },
                "end": {
                  "line": 2480,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "!StampedTemplate",
                  "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 70,
                  "column": 6
                },
                "end": {
                  "line": 73,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 76,
                  "column": 6
                },
                "end": {
                  "line": 78,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "__insertChildren",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 80,
                  "column": 6
                },
                "end": {
                  "line": 82,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__removeChildren",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 84,
                  "column": 6
                },
                "end": {
                  "line": 90,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "render",
              "description": "Forces the element to render its content. This is typically only\nnecessary to call if HTMLImports with the async attribute are used.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 97,
                  "column": 6
                },
                "end": {
                  "line": 128,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [
            {
              "name": "_parseTemplate",
              "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 197,
                  "column": 6
                },
                "end": {
                  "line": 208,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to parse"
                },
                {
                  "name": "outerTemplateInfo",
                  "type": "TemplateInfo=",
                  "description": "Template metadata from the outer\n  template, for parsing nested templates"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Parsed template metadata"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateContent",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 210,
                  "column": 6
                },
                "end": {
                  "line": 212,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "templateInfo"
                },
                {
                  "name": "nodeInfo"
                }
              ],
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNode",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2499,
                  "column": 6
                },
                "end": {
                  "line": 2513,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateChildNodes",
              "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 258,
                  "column": 6
                },
                "end": {
                  "line": 295,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "root",
                  "type": "Node",
                  "description": "Root node whose `childNodes` will be parsed"
                },
                {
                  "name": "templateInfo",
                  "type": "!TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "!NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNestedTemplate",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2591,
                  "column": 6
                },
                "end": {
                  "line": 2601,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateNodeAttributes",
              "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 333,
                  "column": 6
                },
                "end": {
                  "line": 342,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNodeAttribute",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2534,
                  "column": 6
                },
                "end": {
                  "line": 2575,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Attribute name"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Attribute value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_contentForTemplate",
              "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 388,
                  "column": 6
                },
                "end": {
                  "line": 391,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "HTMLTemplateElement",
                  "description": "Template to retrieve `content` for"
                }
              ],
              "return": {
                "type": "DocumentFragment",
                "desc": "Content fragment"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "createProperties",
              "description": "Creates property accessors for the given property names.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 58,
                  "column": 8
                },
                "end": {
                  "line": 66,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "!Object",
                  "description": "Object whose keys are names of accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeNameForProperty",
              "description": "Returns an attribute name that corresponds to the given property.\nBy default, converts camel to dash case, e.g. `fooBar` to `foo-bar`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-accessors.html",
                "start": {
                  "line": 143,
                  "column": 6
                },
                "end": {
                  "line": 145,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property to convert"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Attribute name corresponding to the given property."
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "typeForProperty",
              "description": "Override point to provide a type to which to deserialize a value to\na given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 88,
                  "column": 8
                },
                "end": {
                  "line": 88,
                  "column": 40
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "createPropertiesForAttributes",
              "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-accessors.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 133,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "addPropertyEffect",
              "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2220,
                  "column": 6
                },
                "end": {
                  "line": 2222,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createPropertyObserver",
              "description": "Creates a single-property observer for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2234,
                  "column": 6
                },
                "end": {
                  "line": 2236,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string | function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createMethodObserver",
              "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2251,
                  "column": 6
                },
                "end": {
                  "line": 2253,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating"
                }
              ],
              "return": {
                "type": "void",
                "desc": "whether method names should be included as a dependency to the effect."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createNotifyingProperty",
              "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2263,
                  "column": 6
                },
                "end": {
                  "line": 2265,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReadOnlyProperty",
              "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2283,
                  "column": 6
                },
                "end": {
                  "line": 2285,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReflectedProperty",
              "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2295,
                  "column": 6
                },
                "end": {
                  "line": 2297,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createComputedProperty",
              "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2313,
                  "column": 6
                },
                "end": {
                  "line": 2315,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "bindTemplate",
              "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2329,
                  "column": 6
                },
                "end": {
                  "line": 2331,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addTemplatePropertyEffect",
              "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2395,
                  "column": 6
                },
                "end": {
                  "line": 2401,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Template metadata to add effect to"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseBindings",
              "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2636,
                  "column": 6
                },
                "end": {
                  "line": 2701,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "text",
                  "type": "string",
                  "description": "Text to parse from attribute or textContent"
                },
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Current template metadata"
                }
              ],
              "return": {
                "type": "Array.<!BindingPart>",
                "desc": "Array of binding part metadata"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_evaluateBinding",
              "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2717,
                  "column": 6
                },
                "end": {
                  "line": 2734,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "inst",
                  "type": "this",
                  "description": "Element that should be used as scope for\n  binding dependencies"
                },
                {
                  "name": "part",
                  "type": "BindingPart",
                  "description": "Binding part metadata"
                },
                {
                  "name": "path",
                  "type": "string",
                  "description": "Property/path that triggered this effect"
                },
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of current property changes"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value the binding part evaluated to"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 4
            },
            "end": {
              "line": 130,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Polymer.DomBind",
          "attributes": [
            {
              "name": "mutable-data",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 54,
                  "column": 48
                },
                "end": {
                  "line": 54,
                  "column": 62
                }
              },
              "metadata": {}
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "dom-bind",
          "mixins": [
            "Polymer.PropertyEffects",
            "Polymer.OptionalMutableData",
            "Polymer.GestureEventListeners"
          ]
        },
        {
          "description": "Base class that provides the core API for Polymer's meta-programming\nfeatures including template stamping, data-binding, attribute deserialization,\nand property change observation.",
          "summary": "Custom element base class that provides the core API for Polymer's\n  key meta-programming features including template stamping, data-binding,\n  attribute deserialization, and property change observation",
          "path": "components\\polymer\\polymer-element.html",
          "properties": [
            {
              "name": "__dataClientsReady",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1147,
                  "column": 8
                },
                "end": {
                  "line": 1147,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPendingClients",
              "type": "Array",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1149,
                  "column": 8
                },
                "end": {
                  "line": 1149,
                  "column": 34
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataToNotify",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1151,
                  "column": 8
                },
                "end": {
                  "line": 1151,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataLinkedPaths",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1153,
                  "column": 8
                },
                "end": {
                  "line": 1153,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHasPaths",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1155,
                  "column": 8
                },
                "end": {
                  "line": 1155,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataCompoundStorage",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1157,
                  "column": 8
                },
                "end": {
                  "line": 1157,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHost",
              "type": "Polymer_PropertyEffects",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1159,
                  "column": 8
                },
                "end": {
                  "line": 1159,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataTemp",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1161,
                  "column": 8
                },
                "end": {
                  "line": 1161,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataClientsInitialized",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1163,
                  "column": 8
                },
                "end": {
                  "line": 1163,
                  "column": 38
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__data",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1165,
                  "column": 8
                },
                "end": {
                  "line": 1165,
                  "column": 20
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPending",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1167,
                  "column": 8
                },
                "end": {
                  "line": 1167,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataOld",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1169,
                  "column": 8
                },
                "end": {
                  "line": 1169,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__computeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1171,
                  "column": 8
                },
                "end": {
                  "line": 1171,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__reflectEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1173,
                  "column": 8
                },
                "end": {
                  "line": 1173,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__notifyEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1175,
                  "column": 8
                },
                "end": {
                  "line": 1175,
                  "column": 29
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__propagateEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1177,
                  "column": 8
                },
                "end": {
                  "line": 1177,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__observeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1179,
                  "column": 8
                },
                "end": {
                  "line": 1179,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__readOnly",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1181,
                  "column": 8
                },
                "end": {
                  "line": 1181,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__templateInfo",
              "type": "!TemplateInfo",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1183,
                  "column": 8
                },
                "end": {
                  "line": 1183,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_template",
              "type": "HTMLTemplateElement",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\element-mixin.html",
                "start": {
                  "line": 421,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_importPath",
              "type": "string",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\element-mixin.html",
                "start": {
                  "line": 423,
                  "column": 8
                },
                "end": {
                  "line": 423,
                  "column": 25
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "rootPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "lib\\mixins\\element-mixin.html",
                "start": {
                  "line": 425,
                  "column": 8
                },
                "end": {
                  "line": 425,
                  "column": 22
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "importPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "lib\\mixins\\element-mixin.html",
                "start": {
                  "line": 427,
                  "column": 8
                },
                "end": {
                  "line": 427,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "root",
              "type": "(StampedTemplate | HTMLElement | ShadowRoot)",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "lib\\mixins\\element-mixin.html",
                "start": {
                  "line": 429,
                  "column": 8
                },
                "end": {
                  "line": 429,
                  "column": 18
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "$",
              "type": "!Object.<string, !Element>",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "lib\\mixins\\element-mixin.html",
                "start": {
                  "line": 431,
                  "column": 8
                },
                "end": {
                  "line": 431,
                  "column": 15
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            }
          ],
          "methods": [
            {
              "name": "_stampTemplate",
              "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 2423,
                  "column": 6
                },
                "end": {
                  "line": 2448,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to stamp"
                }
              ],
              "return": {
                "type": "!StampedTemplate",
                "desc": "Cloned template content"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addMethodEventListenerToNode",
              "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\template-stamp.html",
                "start": {
                  "line": 452,
                  "column": 6
                },
                "end": {
                  "line": 457,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add listener on"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Name of method"
                },
                {
                  "name": "context",
                  "type": "*=",
                  "description": "Context the method will be called on (defaults\n  to `node`)"
                }
              ],
              "return": {
                "type": "Function",
                "desc": "Generated handler function"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_addEventListenerToNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\template-stamp.html",
                "start": {
                  "line": 467,
                  "column": 6
                },
                "end": {
                  "line": 469,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add event listener to"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to add"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_removeEventListenerFromNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\template-stamp.html",
                "start": {
                  "line": 479,
                  "column": 6
                },
                "end": {
                  "line": 481,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to remove event listener from"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_createPropertyAccessor",
              "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\properties-changed.html",
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 115,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_addPropertyToAttributeMap",
              "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\properties-changed.html",
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 132,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                }
              ],
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_definePropertyAccessor",
              "description": "Defines a property accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\properties-changed.html",
                "start": {
                  "line": 140,
                  "column": 9
                },
                "end": {
                  "line": 153,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "ready",
              "description": "Stamps the element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\element-mixin.html",
                "start": {
                  "line": 540,
                  "column": 6
                },
                "end": {
                  "line": 546,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeProperties",
              "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\element-mixin.html",
                "start": {
                  "line": 446,
                  "column": 6
                },
                "end": {
                  "line": 480,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeInstanceProperties",
              "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\properties-changed.html",
                "start": {
                  "line": 222,
                  "column": 8
                },
                "end": {
                  "line": 224,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of property values that were overwritten\n  when creating property accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setProperty",
              "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\properties-changed.html",
                "start": {
                  "line": 235,
                  "column": 8
                },
                "end": {
                  "line": 239,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_getProperty",
              "description": "Returns the value for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\properties-changed.html",
                "start": {
                  "line": 247,
                  "column": 8
                },
                "end": {
                  "line": 249,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value for the given property"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setPendingProperty",
              "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\properties-changed.html",
                "start": {
                  "line": 264,
                  "column": 8
                },
                "end": {
                  "line": 280,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "ext",
                  "type": "boolean=",
                  "description": "Not used here; affordance for closure"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property changed"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_invalidateProperties",
              "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\properties-changed.html",
                "start": {
                  "line": 290,
                  "column": 8
                },
                "end": {
                  "line": 300,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_enableProperties",
              "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\properties-changed.html",
                "start": {
                  "line": 313,
                  "column": 8
                },
                "end": {
                  "line": 322,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_flushProperties",
              "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\properties-changed.html",
                "start": {
                  "line": 333,
                  "column": 8
                },
                "end": {
                  "line": 342,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertiesChange",
              "description": "Called in `_flushProperties` to determine if `_propertiesChanged`\nshould be called. The default implementation returns true if\nproperties are pending. Override to customize when\n`_propertiesChanged` is called.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\properties-changed.html",
                "start": {
                  "line": 356,
                  "column": 8
                },
                "end": {
                  "line": 358,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "true if changedProps is truthy"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertiesChanged",
              "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\properties-changed.html",
                "start": {
                  "line": 372,
                  "column": 8
                },
                "end": {
                  "line": 373,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertyChange",
              "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\properties-changed.html",
                "start": {
                  "line": 393,
                  "column": 8
                },
                "end": {
                  "line": 400,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeChangedCallback",
              "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
              "privacy": "public",
              "sourceRange": {
                "file": "lib\\mixins\\properties-changed.html",
                "start": {
                  "line": 412,
                  "column": 8
                },
                "end": {
                  "line": 419,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of attribute that changed"
                },
                {
                  "name": "old",
                  "type": "?string",
                  "description": "Old attribute value"
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "New attribute value"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_attributeToProperty",
              "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\properties-changed.html",
                "start": {
                  "line": 433,
                  "column": 8
                },
                "end": {
                  "line": 440,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to deserialize."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "of the attribute."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertyToAttribute",
              "description": "Serializes a property to its associated attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\properties-changed.html",
                "start": {
                  "line": 452,
                  "column": 8
                },
                "end": {
                  "line": 458,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name to reflect."
                },
                {
                  "name": "attribute",
                  "type": "string=",
                  "description": "Attribute name to reflect to."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Property value to refect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_valueToNodeAttribute",
              "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\properties-changed.html",
                "start": {
                  "line": 473,
                  "column": 8
                },
                "end": {
                  "line": 480,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to set attribute to."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to serialize."
                },
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Attribute name to serialize to."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_serializeValue",
              "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\properties-changed.html",
                "start": {
                  "line": 493,
                  "column": 8
                },
                "end": {
                  "line": 500,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Property value to serialize."
                }
              ],
              "return": {
                "type": "(string | undefined)",
                "desc": "String serialized from the provided\nproperty  value."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_deserializeValue",
              "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\properties-changed.html",
                "start": {
                  "line": 514,
                  "column": 8
                },
                "end": {
                  "line": 523,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Value to deserialize."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "Type to deserialize the string to."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Typed value deserialized from the provided string."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_initializeProtoProperties",
              "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1217,
                  "column": 6
                },
                "end": {
                  "line": 1221,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Properties to initialize on the prototype"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_ensureAttribute",
              "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-accessors.html",
                "start": {
                  "line": 192,
                  "column": 6
                },
                "end": {
                  "line": 197,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to ensure is set."
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "of the attribute."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_hasAccessor",
              "description": "Returns true if this library created an accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-accessors.html",
                "start": {
                  "line": 299,
                  "column": 6
                },
                "end": {
                  "line": 301,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if an accessor was created"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_isPropertyPending",
              "description": "Returns true if the specified property has a pending change.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-accessors.html",
                "start": {
                  "line": 310,
                  "column": 6
                },
                "end": {
                  "line": 312,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if property has a pending change"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_addPropertyEffect",
              "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1255,
                  "column": 6
                },
                "end": {
                  "line": 1263,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removePropertyEffect",
              "description": "Removes the given property effect.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1273,
                  "column": 6
                },
                "end": {
                  "line": 1279,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property the effect was associated with"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasPropertyEffect",
              "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1290,
                  "column": 6
                },
                "end": {
                  "line": 1293,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "type",
                  "type": "string=",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReadOnlyEffect",
              "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1303,
                  "column": 6
                },
                "end": {
                  "line": 1305,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasNotifyEffect",
              "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1315,
                  "column": 6
                },
                "end": {
                  "line": 1317,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReflectEffect",
              "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1327,
                  "column": 6
                },
                "end": {
                  "line": 1329,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasComputedEffect",
              "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1339,
                  "column": 6
                },
                "end": {
                  "line": 1341,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setPendingPropertyOrPath",
              "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1373,
                  "column": 6
                },
                "end": {
                  "line": 1405,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(number | string)>)",
                  "description": "Path to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "shouldNotify",
                  "type": "boolean=",
                  "description": "Set to true if this change should\n cause a property notification event dispatch"
                },
                {
                  "name": "isPathNotification",
                  "type": "boolean=",
                  "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setUnmanagedPropertyToNode",
              "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1428,
                  "column": 6
                },
                "end": {
                  "line": 1436,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "The node to set a property on"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "The property to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "The value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_enqueueClient",
              "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1543,
                  "column": 6
                },
                "end": {
                  "line": 1548,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "client",
                  "type": "Object",
                  "description": "PropertyEffects client to enqueue"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_flushClients",
              "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1569,
                  "column": 6
                },
                "end": {
                  "line": 1580,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__enableOrFlushClients",
              "description": "(c) the stamped dom enables.",
              "privacy": "private",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1594,
                  "column": 6
                },
                "end": {
                  "line": 1607,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_readyClients",
              "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\element-mixin.html",
                "start": {
                  "line": 558,
                  "column": 6
                },
                "end": {
                  "line": 567,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "setProperties",
              "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
              "privacy": "public",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1636,
                  "column": 6
                },
                "end": {
                  "line": 1647,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
                },
                {
                  "name": "setReadOnly",
                  "type": "boolean=",
                  "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_propagatePropertyChanges",
              "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1734,
                  "column": 6
                },
                "end": {
                  "line": 1744,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "changedProps",
                  "type": "Object",
                  "description": "Bag of changed properties"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "linkPaths",
              "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
              "privacy": "public",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1755,
                  "column": 6
                },
                "end": {
                  "line": 1760,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "to",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Target path to link."
                },
                {
                  "name": "from",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Source path to link."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unlinkPaths",
              "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
              "privacy": "public",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1772,
                  "column": 6
                },
                "end": {
                  "line": 1777,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Target path to unlink."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifySplices",
              "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
              "privacy": "public",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1809,
                  "column": 6
                },
                "end": {
                  "line": 1813,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "splices",
                  "type": "Array",
                  "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "get",
              "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
              "privacy": "public",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1834,
                  "column": 6
                },
                "end": {
                  "line": 1836,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "set",
              "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
              "privacy": "public",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1859,
                  "column": 6
                },
                "end": {
                  "line": 1869,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set at the specified path."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "push",
              "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1885,
                  "column": 6
                },
                "end": {
                  "line": 1894,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to push onto array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "pop",
              "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1909,
                  "column": 6
                },
                "end": {
                  "line": 1918,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "splice",
              "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1937,
                  "column": 6
                },
                "end": {
                  "line": 1974,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "start",
                  "type": "number",
                  "description": "Index from which to start removing/inserting."
                },
                {
                  "name": "deleteCount",
                  "type": "number",
                  "description": "Number of items to remove."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert into array."
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Array of removed items."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "shift",
              "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 1989,
                  "column": 6
                },
                "end": {
                  "line": 1998,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unshift",
              "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 2014,
                  "column": 6
                },
                "end": {
                  "line": 2022,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert info array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifyPath",
              "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
              "privacy": "public",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 2037,
                  "column": 6
                },
                "end": {
                  "line": 2054,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Value at the path (optional)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReadOnlyProperty",
              "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 2067,
                  "column": 6
                },
                "end": {
                  "line": 2074,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createPropertyObserver",
              "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 2088,
                  "column": 6
                },
                "end": {
                  "line": 2098,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string | function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createMethodObserver",
              "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 2111,
                  "column": 6
                },
                "end": {
                  "line": 2117,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createNotifyingProperty",
              "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 2128,
                  "column": 6
                },
                "end": {
                  "line": 2136,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReflectedProperty",
              "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 2147,
                  "column": 6
                },
                "end": {
                  "line": 2160,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createComputedProperty",
              "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 2174,
                  "column": 6
                },
                "end": {
                  "line": 2180,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_bindTemplate",
              "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 2357,
                  "column": 6
                },
                "end": {
                  "line": 2380,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                },
                {
                  "name": "instanceBinding",
                  "type": "boolean=",
                  "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removeBoundDom",
              "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 2459,
                  "column": 6
                },
                "end": {
                  "line": 2480,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "!StampedTemplate",
                  "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "connectedCallback",
              "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
              "privacy": "public",
              "sourceRange": {
                "file": "lib\\mixins\\element-mixin.html",
                "start": {
                  "line": 527,
                  "column": 6
                },
                "end": {
                  "line": 532,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "disconnectedCallback",
              "description": "Called when the element is removed from a document",
              "privacy": "public",
              "sourceRange": {
                "file": "lib\\mixins\\properties-mixin.html",
                "start": {
                  "line": 215,
                  "column": 6
                },
                "end": {
                  "line": 219,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_attachDom",
              "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\element-mixin.html",
                "start": {
                  "line": 581,
                  "column": 6
                },
                "end": {
                  "line": 597,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "StampedTemplate",
                  "description": "to attach to the element."
                }
              ],
              "return": {
                "type": "ShadowRoot",
                "desc": "node to which the dom has been attached."
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "updateStyles",
              "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.\n\nNote: This function does not support updating CSS mixins.\nYou can not dynamically change the value of an `@apply`.",
              "privacy": "public",
              "sourceRange": {
                "file": "lib\\mixins\\element-mixin.html",
                "start": {
                  "line": 620,
                  "column": 6
                },
                "end": {
                  "line": 624,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "properties",
                  "type": "Object=",
                  "description": "Bag of custom property key/values to\n  apply to this element."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "resolveUrl",
              "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
              "privacy": "public",
              "sourceRange": {
                "file": "lib\\mixins\\element-mixin.html",
                "start": {
                  "line": 641,
                  "column": 6
                },
                "end": {
                  "line": 646,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "url",
                  "type": "string",
                  "description": "URL to resolve."
                },
                {
                  "name": "base",
                  "type": "string=",
                  "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Rewritten URL relative to base"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            }
          ],
          "staticMethods": [
            {
              "name": "_parseTemplate",
              "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\template-stamp.html",
                "start": {
                  "line": 197,
                  "column": 6
                },
                "end": {
                  "line": 208,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to parse"
                },
                {
                  "name": "outerTemplateInfo",
                  "type": "TemplateInfo=",
                  "description": "Template metadata from the outer\n  template, for parsing nested templates"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Parsed template metadata"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateContent",
              "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\element-mixin.html",
                "start": {
                  "line": 657,
                  "column": 6
                },
                "end": {
                  "line": 660,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "templateInfo"
                },
                {
                  "name": "nodeInfo"
                }
              ],
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_parseTemplateNode",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 2499,
                  "column": 6
                },
                "end": {
                  "line": 2513,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateChildNodes",
              "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\template-stamp.html",
                "start": {
                  "line": 258,
                  "column": 6
                },
                "end": {
                  "line": 295,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "root",
                  "type": "Node",
                  "description": "Root node whose `childNodes` will be parsed"
                },
                {
                  "name": "templateInfo",
                  "type": "!TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "!NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNestedTemplate",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 2591,
                  "column": 6
                },
                "end": {
                  "line": 2601,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateNodeAttributes",
              "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\template-stamp.html",
                "start": {
                  "line": 333,
                  "column": 6
                },
                "end": {
                  "line": 342,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNodeAttribute",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 2534,
                  "column": 6
                },
                "end": {
                  "line": 2575,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Attribute name"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Attribute value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_contentForTemplate",
              "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\template-stamp.html",
                "start": {
                  "line": 388,
                  "column": 6
                },
                "end": {
                  "line": 391,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "HTMLTemplateElement",
                  "description": "Template to retrieve `content` for"
                }
              ],
              "return": {
                "type": "DocumentFragment",
                "desc": "Content fragment"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "createProperties",
              "description": "Override of PropertiesChanged createProperties to create accessors\nand property effects for all of the properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\element-mixin.html",
                "start": {
                  "line": 325,
                  "column": 7
                },
                "end": {
                  "line": 329,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "attributeNameForProperty",
              "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\properties-changed.html",
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property to convert"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Attribute name corresponding to the given property."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "typeForProperty",
              "description": "Overrides `PropertiesChanged` method to return type specified in the\nstatic `properties` object for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\properties-mixin.html",
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 183,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Type to which to deserialize attribute"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "createPropertiesForAttributes",
              "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
              "privacy": "public",
              "sourceRange": {
                "file": "lib\\mixins\\property-accessors.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 133,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "addPropertyEffect",
              "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 2220,
                  "column": 6
                },
                "end": {
                  "line": 2222,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createPropertyObserver",
              "description": "Creates a single-property observer for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 2234,
                  "column": 6
                },
                "end": {
                  "line": 2236,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string | function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createMethodObserver",
              "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 2251,
                  "column": 6
                },
                "end": {
                  "line": 2253,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating"
                }
              ],
              "return": {
                "type": "void",
                "desc": "whether method names should be included as a dependency to the effect."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createNotifyingProperty",
              "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 2263,
                  "column": 6
                },
                "end": {
                  "line": 2265,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReadOnlyProperty",
              "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 2283,
                  "column": 6
                },
                "end": {
                  "line": 2285,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReflectedProperty",
              "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 2295,
                  "column": 6
                },
                "end": {
                  "line": 2297,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createComputedProperty",
              "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 2313,
                  "column": 6
                },
                "end": {
                  "line": 2315,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "bindTemplate",
              "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 2329,
                  "column": 6
                },
                "end": {
                  "line": 2331,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addTemplatePropertyEffect",
              "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 2395,
                  "column": 6
                },
                "end": {
                  "line": 2401,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Template metadata to add effect to"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseBindings",
              "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 2636,
                  "column": 6
                },
                "end": {
                  "line": 2701,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "text",
                  "type": "string",
                  "description": "Text to parse from attribute or textContent"
                },
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Current template metadata"
                }
              ],
              "return": {
                "type": "Array.<!BindingPart>",
                "desc": "Array of binding part metadata"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_evaluateBinding",
              "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\property-effects.html",
                "start": {
                  "line": 2717,
                  "column": 6
                },
                "end": {
                  "line": 2734,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "inst",
                  "type": "this",
                  "description": "Element that should be used as scope for\n  binding dependencies"
                },
                {
                  "name": "part",
                  "type": "BindingPart",
                  "description": "Binding part metadata"
                },
                {
                  "name": "path",
                  "type": "string",
                  "description": "Property/path that triggered this effect"
                },
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of current property changes"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value the binding part evaluated to"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "finalize",
              "description": "Finalizes an element definition, including ensuring any super classes\nare also finalized. This includes ensuring property\naccessors exist on the element prototype. This method calls\n`_finalizeClass` to finalize each constructor in the prototype chain.",
              "privacy": "public",
              "sourceRange": {
                "file": "lib\\mixins\\properties-mixin.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 137,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_finalizeClass",
              "description": "Override of PropertiesMixin _finalizeClass to create observers and\nfind the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\element-mixin.html",
                "start": {
                  "line": 293,
                  "column": 5
                },
                "end": {
                  "line": 316,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "createObservers",
              "description": "Creates observers for the given `observers` array.\nLeverages `PropertyEffects` to create observers.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\element-mixin.html",
                "start": {
                  "line": 342,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "observers",
                  "type": "Object",
                  "description": "Array of observer descriptors for\n  this class"
                },
                {
                  "name": "dynamicFns",
                  "type": "Object",
                  "description": "Object containing keys for any properties\n  that are functions and should trigger the effect when the function\n  reference is changed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_processStyleText",
              "description": "Gather style text for a style element in the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\element-mixin.html",
                "start": {
                  "line": 490,
                  "column": 6
                },
                "end": {
                  "line": 492,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "cssText",
                  "type": "string",
                  "description": "Text containing styling to process"
                },
                {
                  "name": "baseURI",
                  "type": "string",
                  "description": "Base URI to rebase CSS paths against"
                }
              ],
              "return": {
                "type": "string",
                "desc": "The processed CSS text"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_finalizeTemplate",
              "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "lib\\mixins\\element-mixin.html",
                "start": {
                  "line": 503,
                  "column": 6
                },
                "end": {
                  "line": 514,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "is",
                  "type": "string",
                  "description": "Tag name (or type extension name) for this element"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 18
            },
            "end": {
              "line": 32,
              "column": 51
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Polymer.Element",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "mixins": [
            "Polymer.ElementMixin"
          ]
        },
        {
          "description": "The `<dom-repeat>` element will automatically stamp and binds one instance\nof template content to each object in a user-provided array.\n`dom-repeat` accepts an `items` property, and one instance of the template\nis stamped for each item into the DOM at the location of the `dom-repeat`\nelement.  The `item` property will be set on each instance's binding\nscope, thus templates should bind to sub-properties of `item`.\n\nExample:\n\n```html\n<dom-module id=\"employee-list\">\n\n  <template>\n\n    <div> Employee list: </div>\n    <dom-repeat items=\"{{employees}}\">\n      <template>\n        <div>First name: <span>{{item.first}}</span></div>\n        <div>Last name: <span>{{item.last}}</span></div>\n      </template>\n    </dom-repeat>\n\n  </template>\n\n</dom-module>\n```\n\nWith the following custom element definition:\n\n```js\nclass EmployeeList extends Polymer.Element {\n  static get is() { return 'employee-list'; }\n  static get properties() {\n    return {\n      employees: {\n        value() {\n          return [\n            {first: 'Bob', last: 'Smith'},\n            {first: 'Sally', last: 'Johnson'},\n            ...\n          ];\n        }\n      }\n    };\n  }\n}\n```\n\nNotifications for changes to items sub-properties will be forwarded to template\ninstances, which will update via the normal structured data notification system.\n\nMutations to the `items` array itself should be made using the Array\nmutation API's on `Polymer.Base` (`push`, `pop`, `splice`, `shift`,\n`unshift`), and template instances will be kept in sync with the data in the\narray.\n\nEvents caught by event handlers within the `dom-repeat` template will be\ndecorated with a `model` property, which represents the binding scope for\neach template instance.  The model is an instance of Polymer.Base, and should\nbe used to manipulate data on the instance, for example\n`event.model.set('item.checked', true);`.\n\nAlternatively, the model for a template instance for an element stamped by\na `dom-repeat` can be obtained using the `modelForElement` API on the\n`dom-repeat` that stamped it, for example\n`this.$.domRepeat.modelForElement(event.target).set('item.checked', true);`.\nThis may be useful for manipulating instance data of event targets obtained\nby event handlers on parents of the `dom-repeat` (event delegation).\n\nA view-specific filter/sort may be applied to each `dom-repeat` by supplying a\n`filter` and/or `sort` property.  This may be a string that names a function on\nthe host, or a function may be assigned to the property directly.  The functions\nshould implemented following the standard `Array` filter/sort API.\n\nIn order to re-run the filter or sort functions based on changes to sub-fields\nof `items`, the `observe` property may be set as a space-separated list of\n`item` sub-fields that should cause a re-filter/sort when modified.  If\nthe filter or sort function depends on properties not contained in `items`,\nthe user should observe changes to those properties and call `render` to update\nthe view based on the dependency change.\n\nFor example, for an `dom-repeat` with a filter of the following:\n\n```js\nisEngineer(item) {\n  return item.type == 'engineer' || item.manager.type == 'engineer';\n}\n```\n\nThen the `observe` property should be configured as follows:\n\n```html\n<dom-repeat items=\"{{employees}}\" filter=\"isEngineer\" observe=\"type manager.type\">\n```",
          "summary": "Custom element for stamping instance of a template bound to\n  items in an array.",
          "path": "components\\polymer\\lib\\elements\\dom-repeat.html",
          "properties": [
            {
              "name": "mutableData",
              "type": "boolean",
              "description": "Instance-level flag for configuring the dirty-checking strategy\nfor this element.  When true, Objects and Arrays will skip dirty\nchecking, otherwise strict equality checking will be used.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\mutable-data.html",
                "start": {
                  "line": 169,
                  "column": 10
                },
                "end": {
                  "line": 169,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Polymer.OptionalMutableData"
            },
            {
              "name": "items",
              "type": "Array",
              "description": "An array containing items determining how many instances of the template\nto stamp and that that each template instance should bind to.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 156,
                  "column": 8
                },
                "end": {
                  "line": 158,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "as",
              "type": "string",
              "description": "The name of the variable to add to the binding scope for the array\nelement associated with a given template instance.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 164,
                  "column": 8
                },
                "end": {
                  "line": 167,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"item\""
            },
            {
              "name": "indexAs",
              "type": "string",
              "description": "The name of the variable to add to the binding scope with the index\nof the instance in the sorted and filtered list of rendered items.\nNote, for the index in the `this.items` array, use the value of the\n`itemsIndexAs` property.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 175,
                  "column": 8
                },
                "end": {
                  "line": 178,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"index\""
            },
            {
              "name": "itemsIndexAs",
              "type": "string",
              "description": "The name of the variable to add to the binding scope with the index\nof the instance in the `this.items` array. Note, for the index of\nthis instance in the sorted and filtered list of rendered items,\nuse the value of the `indexAs` property.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 186,
                  "column": 8
                },
                "end": {
                  "line": 189,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"itemsIndex\""
            },
            {
              "name": "sort",
              "type": "Function",
              "description": "A function that should determine the sort order of the items.  This\nproperty should either be provided as a string, indicating a method\nname on the element's host, or else be an actual function.  The\nfunction should match the sort function passed to `Array.sort`.\nUsing a sort function has no effect on the underlying `items` array.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 198,
                  "column": 8
                },
                "end": {
                  "line": 201,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__sortChanged\""
                }
              }
            },
            {
              "name": "filter",
              "type": "Function",
              "description": "A function that can be used to filter items out of the view.  This\nproperty should either be provided as a string, indicating a method\nname on the element's host, or else be an actual function.  The\nfunction should match the sort function passed to `Array.filter`.\nUsing a filter function has no effect on the underlying `items` array.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 210,
                  "column": 8
                },
                "end": {
                  "line": 213,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__filterChanged\""
                }
              }
            },
            {
              "name": "observe",
              "type": "string",
              "description": "When using a `filter` or `sort` function, the `observe` property\nshould be set to a space-separated list of the names of item\nsub-fields that should trigger a re-sort or re-filter when changed.\nThese should generally be fields of `item` that the sort or filter\nfunction depends on.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 222,
                  "column": 8
                },
                "end": {
                  "line": 225,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__observeChanged\""
                }
              }
            },
            {
              "name": "delay",
              "type": "number",
              "description": "When using a `filter` or `sort` function, the `delay` property\ndetermines a debounce time in ms after a change to observed item\nproperties that must pass before the filter or sort is re-run.\nThis is useful in rate-limiting shuffling of the view when\nitem changes may be frequent.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 234,
                  "column": 8
                },
                "end": {
                  "line": 234,
                  "column": 21
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "renderedItemCount",
              "type": "number",
              "description": "Count of currently rendered items after `filter` (if any) has been applied.\nIf \"chunking mode\" is enabled, `renderedItemCount` is updated each time a\nset of template instances is rendered.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 242,
                  "column": 8
                },
                "end": {
                  "line": 246,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "readOnly": true
                }
              }
            },
            {
              "name": "initialCount",
              "type": "number",
              "description": "Defines an initial count of template instances to render after setting\nthe `items` array, before the next paint, and puts the `dom-repeat`\ninto \"chunking mode\".  The remaining items will be created and rendered\nincrementally at each animation frame therof until all instances have\nbeen rendered.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 255,
                  "column": 8
                },
                "end": {
                  "line": 258,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__initializeChunking\""
                }
              }
            },
            {
              "name": "targetFramerate",
              "type": "number",
              "description": "When `initialCount` is used, this property defines a frame rate (in\nfps) to target by throttling the number of instances rendered each\nframe to not exceed the budget for the target frame rate.  The\nframerate is effectively the number of `requestAnimationFrame`s that\nit tries to allow to actually fire in a given second. It does this\nby measuring the time between `rAF`s and continuously adjusting the\nnumber of items created each `rAF` to maintain the target framerate.\nSetting this to a higher number allows lower latency and higher\nthroughput for event handlers and other tasks, but results in a\nlonger time for the remaining items to complete rendering.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 272,
                  "column": 8
                },
                "end": {
                  "line": 275,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "20"
            },
            {
              "name": "_targetFrameTime",
              "type": "number",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 277,
                  "column": 8
                },
                "end": {
                  "line": 280,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            }
          ],
          "methods": [
            {
              "name": "_shouldPropertyChange",
              "description": "Overrides `Polymer.PropertyEffects` to provide option for skipping\nstrict equality checking for Objects and Arrays.\n\nWhen `this.mutableData` is true on this instance, this method\npulls the value to dirty check against from the `__dataTemp` cache\n(rather than the normal `__data` cache) for Objects.  Since the temp\ncache is cleared at the end of a turn, this implementation allows\nside-effects of deep object changes to be processed by re-setting the\nsame object (using the temp cache as an in-turn backstop to prevent\ncycles due to 2-way notification).",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\mutable-data.html",
                "start": {
                  "line": 191,
                  "column": 6
                },
                "end": {
                  "line": 193,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change"
              },
              "inheritedFrom": "Polymer.OptionalMutableData"
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 310,
                  "column": 4
                },
                "end": {
                  "line": 316,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 321,
                  "column": 4
                },
                "end": {
                  "line": 332,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "__ensureTemplatized",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 334,
                  "column": 4
                },
                "end": {
                  "line": 392,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__getMethodHost",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 394,
                  "column": 4
                },
                "end": {
                  "line": 401,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__functionFromPropertyValue",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 403,
                  "column": 4
                },
                "end": {
                  "line": 411,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "functionOrMethodName"
                }
              ]
            },
            {
              "name": "__sortChanged",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 413,
                  "column": 4
                },
                "end": {
                  "line": 416,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "sort"
                }
              ]
            },
            {
              "name": "__filterChanged",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 418,
                  "column": 4
                },
                "end": {
                  "line": 421,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "filter"
                }
              ]
            },
            {
              "name": "__computeFrameTime",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 423,
                  "column": 4
                },
                "end": {
                  "line": 425,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "rate"
                }
              ]
            },
            {
              "name": "__initializeChunking",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 427,
                  "column": 4
                },
                "end": {
                  "line": 433,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__tryRenderChunk",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 435,
                  "column": 4
                },
                "end": {
                  "line": 441,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__requestRenderChunk",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 443,
                  "column": 4
                },
                "end": {
                  "line": 445,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__renderChunk",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 447,
                  "column": 4
                },
                "end": {
                  "line": 457,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__observeChanged",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 459,
                  "column": 4
                },
                "end": {
                  "line": 462,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__itemsChanged",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 464,
                  "column": 4
                },
                "end": {
                  "line": 476,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "change"
                }
              ]
            },
            {
              "name": "__handleObservedPaths",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 478,
                  "column": 4
                },
                "end": {
                  "line": 494,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path"
                }
              ]
            },
            {
              "name": "__debounceRender",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 500,
                  "column": 4
                },
                "end": {
                  "line": 506,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "fn",
                  "type": "function (this: DomRepeat)",
                  "description": "Function to debounce."
                },
                {
                  "name": "delay",
                  "type": "number=",
                  "defaultValue": "0",
                  "description": "Delay in ms to debounce by."
                }
              ]
            },
            {
              "name": "render",
              "description": "Forces the element to render its content. Normally rendering is\nasynchronous to a provoking change. This is done for efficiency so\nthat multiple changes trigger only a single render. The render method\nshould be called if, for example, template rendering is required to\nvalidate application state.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 516,
                  "column": 4
                },
                "end": {
                  "line": 520,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "__render",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 522,
                  "column": 4
                },
                "end": {
                  "line": 543,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__applyFullRefresh",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 545,
                  "column": 4
                },
                "end": {
                  "line": 583,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__detachInstance",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 585,
                  "column": 4
                },
                "end": {
                  "line": 592,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "idx"
                }
              ]
            },
            {
              "name": "__attachInstance",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 594,
                  "column": 4
                },
                "end": {
                  "line": 597,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "idx"
                },
                {
                  "name": "parent"
                }
              ]
            },
            {
              "name": "__detachAndRemoveInstance",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 599,
                  "column": 4
                },
                "end": {
                  "line": 605,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "idx"
                }
              ]
            },
            {
              "name": "__stampInstance",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 607,
                  "column": 4
                },
                "end": {
                  "line": 613,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "item"
                },
                {
                  "name": "instIdx"
                },
                {
                  "name": "itemIdx"
                }
              ]
            },
            {
              "name": "__insertInstance",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 615,
                  "column": 4
                },
                "end": {
                  "line": 632,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "item"
                },
                {
                  "name": "instIdx"
                },
                {
                  "name": "itemIdx"
                }
              ]
            },
            {
              "name": "_showHideChildren",
              "description": "Shows or hides the template instance top level child elements. For\ntext nodes, `textContent` is removed while \"hidden\" and replaced when\n\"shown.\"",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 644,
                  "column": 4
                },
                "end": {
                  "line": 648,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "hidden",
                  "type": "boolean",
                  "description": "Set to true to hide the children;\nset to false to show them."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "__handleItemPath",
              "description": "responsible for notifying item.<path> changes to inst for key",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 652,
                  "column": 4
                },
                "end": {
                  "line": 676,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "value"
                }
              ]
            },
            {
              "name": "itemForElement",
              "description": "Returns the item associated with a given element stamped by\nthis `dom-repeat`.\n\nNote, to modify sub-properties of the item,\n`modelForElement(el).set('item.<sub-prop>', value)`\nshould be used.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 689,
                  "column": 4
                },
                "end": {
                  "line": 692,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "el",
                  "type": "!HTMLElement",
                  "description": "Element for which to return the item."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item associated with the element."
              }
            },
            {
              "name": "indexForElement",
              "description": "Returns the inst index for a given element stamped by this `dom-repeat`.\nIf `sort` is provided, the index will reflect the sorted order (rather\nthan the original array order).",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 703,
                  "column": 4
                },
                "end": {
                  "line": 706,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "el",
                  "type": "!HTMLElement",
                  "description": "Element for which to return the index."
                }
              ],
              "return": {
                "type": "?number",
                "desc": "Row index associated with the element (note this may\n  not correspond to the array index if a user `sort` is applied)."
              }
            },
            {
              "name": "modelForElement",
              "description": "Returns the template \"model\" associated with a given element, which\nserves as the binding scope for the template instance the element is\ncontained in. A template model is an instance of `Polymer.Base`, and\nshould be used to manipulate data associated with this template instance.\n\nExample:\n\n  let model = modelForElement(el);\n  if (model.index < 10) {\n    model.set('item.checked', true);\n  }",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 725,
                  "column": 4
                },
                "end": {
                  "line": 727,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "el",
                  "type": "!HTMLElement",
                  "description": "Element for which to return a template model."
                }
              ],
              "return": {
                "type": "TemplateInstanceBase",
                "desc": "Model representing the binding scope for\n  the element."
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 133,
              "column": 2
            },
            "end": {
              "line": 729,
              "column": 3
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Polymer.DomRepeat",
          "attributes": [
            {
              "name": "mutable-data",
              "description": "Instance-level flag for configuring the dirty-checking strategy\nfor this element.  When true, Objects and Arrays will skip dirty\nchecking, otherwise strict equality checking will be used.",
              "sourceRange": {
                "file": "..\\mixins\\mutable-data.html",
                "start": {
                  "line": 169,
                  "column": 10
                },
                "end": {
                  "line": 169,
                  "column": 30
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Polymer.OptionalMutableData"
            },
            {
              "name": "items",
              "description": "An array containing items determining how many instances of the template\nto stamp and that that each template instance should bind to.",
              "sourceRange": {
                "start": {
                  "line": 156,
                  "column": 8
                },
                "end": {
                  "line": 158,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "Array"
            },
            {
              "name": "as",
              "description": "The name of the variable to add to the binding scope for the array\nelement associated with a given template instance.",
              "sourceRange": {
                "start": {
                  "line": 164,
                  "column": 8
                },
                "end": {
                  "line": 167,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "index-as",
              "description": "The name of the variable to add to the binding scope with the index\nof the instance in the sorted and filtered list of rendered items.\nNote, for the index in the `this.items` array, use the value of the\n`itemsIndexAs` property.",
              "sourceRange": {
                "start": {
                  "line": 175,
                  "column": 8
                },
                "end": {
                  "line": 178,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "items-index-as",
              "description": "The name of the variable to add to the binding scope with the index\nof the instance in the `this.items` array. Note, for the index of\nthis instance in the sorted and filtered list of rendered items,\nuse the value of the `indexAs` property.",
              "sourceRange": {
                "start": {
                  "line": 186,
                  "column": 8
                },
                "end": {
                  "line": 189,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "sort",
              "description": "A function that should determine the sort order of the items.  This\nproperty should either be provided as a string, indicating a method\nname on the element's host, or else be an actual function.  The\nfunction should match the sort function passed to `Array.sort`.\nUsing a sort function has no effect on the underlying `items` array.",
              "sourceRange": {
                "start": {
                  "line": 198,
                  "column": 8
                },
                "end": {
                  "line": 201,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "Function"
            },
            {
              "name": "filter",
              "description": "A function that can be used to filter items out of the view.  This\nproperty should either be provided as a string, indicating a method\nname on the element's host, or else be an actual function.  The\nfunction should match the sort function passed to `Array.filter`.\nUsing a filter function has no effect on the underlying `items` array.",
              "sourceRange": {
                "start": {
                  "line": 210,
                  "column": 8
                },
                "end": {
                  "line": 213,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "Function"
            },
            {
              "name": "observe",
              "description": "When using a `filter` or `sort` function, the `observe` property\nshould be set to a space-separated list of the names of item\nsub-fields that should trigger a re-sort or re-filter when changed.\nThese should generally be fields of `item` that the sort or filter\nfunction depends on.",
              "sourceRange": {
                "start": {
                  "line": 222,
                  "column": 8
                },
                "end": {
                  "line": 225,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "delay",
              "description": "When using a `filter` or `sort` function, the `delay` property\ndetermines a debounce time in ms after a change to observed item\nproperties that must pass before the filter or sort is re-run.\nThis is useful in rate-limiting shuffling of the view when\nitem changes may be frequent.",
              "sourceRange": {
                "start": {
                  "line": 234,
                  "column": 8
                },
                "end": {
                  "line": 234,
                  "column": 21
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "rendered-item-count",
              "description": "Count of currently rendered items after `filter` (if any) has been applied.\nIf \"chunking mode\" is enabled, `renderedItemCount` is updated each time a\nset of template instances is rendered.",
              "sourceRange": {
                "start": {
                  "line": 242,
                  "column": 8
                },
                "end": {
                  "line": 246,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "initial-count",
              "description": "Defines an initial count of template instances to render after setting\nthe `items` array, before the next paint, and puts the `dom-repeat`\ninto \"chunking mode\".  The remaining items will be created and rendered\nincrementally at each animation frame therof until all instances have\nbeen rendered.",
              "sourceRange": {
                "start": {
                  "line": 255,
                  "column": 8
                },
                "end": {
                  "line": 258,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "target-framerate",
              "description": "When `initialCount` is used, this property defines a frame rate (in\nfps) to target by throttling the number of instances rendered each\nframe to not exceed the budget for the target frame rate.  The\nframerate is effectively the number of `requestAnimationFrame`s that\nit tries to allow to actually fire in a given second. It does this\nby measuring the time between `rAF`s and continuously adjusting the\nnumber of items created each `rAF` to maintain the target framerate.\nSetting this to a higher number allows lower latency and higher\nthroughput for event handlers and other tasks, but results in a\nlonger time for the remaining items to complete rendering.",
              "sourceRange": {
                "start": {
                  "line": 272,
                  "column": 8
                },
                "end": {
                  "line": 275,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "number"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "dom-change",
              "description": "dom-change",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "rendered-item-count-changed",
              "description": "Fired when the `renderedItemCount` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "dom-repeat",
          "mixins": [
            "Polymer.OptionalMutableData"
          ]
        },
        {
          "description": "The `<dom-if>` element will stamp a light-dom `<template>` child when\nthe `if` property becomes truthy, and the template can use Polymer\ndata-binding and declarative event features when used in the context of\na Polymer element's template.\n\nWhen `if` becomes falsy, the stamped content is hidden but not\nremoved from dom. When `if` subsequently becomes truthy again, the content\nis simply re-shown. This approach is used due to its favorable performance\ncharacteristics: the expense of creating template content is paid only\nonce and lazily.\n\nSet the `restamp` property to true to force the stamped content to be\ncreated / destroyed when the `if` condition changes.",
          "summary": "Custom element that conditionally stamps and hides or removes\n  template content based on a boolean flag.",
          "path": "components\\polymer\\lib\\elements\\dom-if.html",
          "properties": [
            {
              "name": "__dataClientsReady",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1147,
                  "column": 8
                },
                "end": {
                  "line": 1147,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPendingClients",
              "type": "Array",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1149,
                  "column": 8
                },
                "end": {
                  "line": 1149,
                  "column": 34
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataToNotify",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1151,
                  "column": 8
                },
                "end": {
                  "line": 1151,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataLinkedPaths",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1153,
                  "column": 8
                },
                "end": {
                  "line": 1153,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHasPaths",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1155,
                  "column": 8
                },
                "end": {
                  "line": 1155,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataCompoundStorage",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1157,
                  "column": 8
                },
                "end": {
                  "line": 1157,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHost",
              "type": "Polymer_PropertyEffects",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1159,
                  "column": 8
                },
                "end": {
                  "line": 1159,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataTemp",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1161,
                  "column": 8
                },
                "end": {
                  "line": 1161,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataClientsInitialized",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1163,
                  "column": 8
                },
                "end": {
                  "line": 1163,
                  "column": 38
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__data",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1165,
                  "column": 8
                },
                "end": {
                  "line": 1165,
                  "column": 20
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPending",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1167,
                  "column": 8
                },
                "end": {
                  "line": 1167,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataOld",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1169,
                  "column": 8
                },
                "end": {
                  "line": 1169,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__computeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1171,
                  "column": 8
                },
                "end": {
                  "line": 1171,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__reflectEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1173,
                  "column": 8
                },
                "end": {
                  "line": 1173,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__notifyEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1175,
                  "column": 8
                },
                "end": {
                  "line": 1175,
                  "column": 29
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__propagateEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1177,
                  "column": 8
                },
                "end": {
                  "line": 1177,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__observeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1179,
                  "column": 8
                },
                "end": {
                  "line": 1179,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__readOnly",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1181,
                  "column": 8
                },
                "end": {
                  "line": 1181,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__templateInfo",
              "type": "!TemplateInfo",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1183,
                  "column": 8
                },
                "end": {
                  "line": 1183,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_template",
              "type": "HTMLTemplateElement",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 421,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_importPath",
              "type": "string",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 423,
                  "column": 8
                },
                "end": {
                  "line": 423,
                  "column": 25
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "rootPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 425,
                  "column": 8
                },
                "end": {
                  "line": 425,
                  "column": 22
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "importPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 427,
                  "column": 8
                },
                "end": {
                  "line": 427,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "root",
              "type": "(StampedTemplate | HTMLElement | ShadowRoot)",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 429,
                  "column": 8
                },
                "end": {
                  "line": 429,
                  "column": 18
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "$",
              "type": "!Object.<string, !Element>",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 431,
                  "column": 8
                },
                "end": {
                  "line": 431,
                  "column": 15
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "if",
              "type": "boolean",
              "description": "A boolean indicating whether this template should stamp.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 65,
                  "column": 8
                },
                "end": {
                  "line": 68,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__debounceRender\""
                }
              }
            },
            {
              "name": "restamp",
              "type": "boolean",
              "description": "When true, elements will be removed from DOM and discarded when `if`\nbecomes false and re-created and added back to the DOM when `if`\nbecomes true.  By default, stamped elements will be hidden but left\nin the DOM when `if` becomes false, which is generally results\nin better performance.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 80,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__debounceRender\""
                }
              }
            }
          ],
          "methods": [
            {
              "name": "_stampTemplate",
              "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2423,
                  "column": 6
                },
                "end": {
                  "line": 2448,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to stamp"
                }
              ],
              "return": {
                "type": "!StampedTemplate",
                "desc": "Cloned template content"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addMethodEventListenerToNode",
              "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 452,
                  "column": 6
                },
                "end": {
                  "line": 457,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add listener on"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Name of method"
                },
                {
                  "name": "context",
                  "type": "*=",
                  "description": "Context the method will be called on (defaults\n  to `node`)"
                }
              ],
              "return": {
                "type": "Function",
                "desc": "Generated handler function"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_addEventListenerToNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 467,
                  "column": 6
                },
                "end": {
                  "line": 469,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add event listener to"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to add"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_removeEventListenerFromNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 479,
                  "column": 6
                },
                "end": {
                  "line": 481,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to remove event listener from"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_createPropertyAccessor",
              "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 115,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_addPropertyToAttributeMap",
              "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 132,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                }
              ],
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_definePropertyAccessor",
              "description": "Defines a property accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 140,
                  "column": 9
                },
                "end": {
                  "line": 153,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "ready",
              "description": "Stamps the element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 540,
                  "column": 6
                },
                "end": {
                  "line": 546,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeProperties",
              "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 446,
                  "column": 6
                },
                "end": {
                  "line": 480,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeInstanceProperties",
              "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 222,
                  "column": 8
                },
                "end": {
                  "line": 224,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of property values that were overwritten\n  when creating property accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setProperty",
              "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 235,
                  "column": 8
                },
                "end": {
                  "line": 239,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_getProperty",
              "description": "Returns the value for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 247,
                  "column": 8
                },
                "end": {
                  "line": 249,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value for the given property"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setPendingProperty",
              "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 264,
                  "column": 8
                },
                "end": {
                  "line": 280,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "ext",
                  "type": "boolean=",
                  "description": "Not used here; affordance for closure"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property changed"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_invalidateProperties",
              "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 290,
                  "column": 8
                },
                "end": {
                  "line": 300,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_enableProperties",
              "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 313,
                  "column": 8
                },
                "end": {
                  "line": 322,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_flushProperties",
              "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 333,
                  "column": 8
                },
                "end": {
                  "line": 342,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertiesChange",
              "description": "Called in `_flushProperties` to determine if `_propertiesChanged`\nshould be called. The default implementation returns true if\nproperties are pending. Override to customize when\n`_propertiesChanged` is called.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 356,
                  "column": 8
                },
                "end": {
                  "line": 358,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "true if changedProps is truthy"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertiesChanged",
              "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 372,
                  "column": 8
                },
                "end": {
                  "line": 373,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertyChange",
              "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 393,
                  "column": 8
                },
                "end": {
                  "line": 400,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeChangedCallback",
              "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 412,
                  "column": 8
                },
                "end": {
                  "line": 419,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of attribute that changed"
                },
                {
                  "name": "old",
                  "type": "?string",
                  "description": "Old attribute value"
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "New attribute value"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_attributeToProperty",
              "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 433,
                  "column": 8
                },
                "end": {
                  "line": 440,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to deserialize."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "of the attribute."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertyToAttribute",
              "description": "Serializes a property to its associated attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 452,
                  "column": 8
                },
                "end": {
                  "line": 458,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name to reflect."
                },
                {
                  "name": "attribute",
                  "type": "string=",
                  "description": "Attribute name to reflect to."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Property value to refect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_valueToNodeAttribute",
              "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 473,
                  "column": 8
                },
                "end": {
                  "line": 480,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to set attribute to."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to serialize."
                },
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Attribute name to serialize to."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_serializeValue",
              "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 493,
                  "column": 8
                },
                "end": {
                  "line": 500,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Property value to serialize."
                }
              ],
              "return": {
                "type": "(string | undefined)",
                "desc": "String serialized from the provided\nproperty  value."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_deserializeValue",
              "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 514,
                  "column": 8
                },
                "end": {
                  "line": 523,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Value to deserialize."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "Type to deserialize the string to."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Typed value deserialized from the provided string."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_initializeProtoProperties",
              "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1217,
                  "column": 6
                },
                "end": {
                  "line": 1221,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Properties to initialize on the prototype"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_ensureAttribute",
              "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-accessors.html",
                "start": {
                  "line": 192,
                  "column": 6
                },
                "end": {
                  "line": 197,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to ensure is set."
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "of the attribute."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_hasAccessor",
              "description": "Returns true if this library created an accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-accessors.html",
                "start": {
                  "line": 299,
                  "column": 6
                },
                "end": {
                  "line": 301,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if an accessor was created"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_isPropertyPending",
              "description": "Returns true if the specified property has a pending change.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-accessors.html",
                "start": {
                  "line": 310,
                  "column": 6
                },
                "end": {
                  "line": 312,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if property has a pending change"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_addPropertyEffect",
              "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1255,
                  "column": 6
                },
                "end": {
                  "line": 1263,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removePropertyEffect",
              "description": "Removes the given property effect.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1273,
                  "column": 6
                },
                "end": {
                  "line": 1279,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property the effect was associated with"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasPropertyEffect",
              "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1290,
                  "column": 6
                },
                "end": {
                  "line": 1293,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "type",
                  "type": "string=",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReadOnlyEffect",
              "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1303,
                  "column": 6
                },
                "end": {
                  "line": 1305,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasNotifyEffect",
              "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1315,
                  "column": 6
                },
                "end": {
                  "line": 1317,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReflectEffect",
              "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1327,
                  "column": 6
                },
                "end": {
                  "line": 1329,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasComputedEffect",
              "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1339,
                  "column": 6
                },
                "end": {
                  "line": 1341,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setPendingPropertyOrPath",
              "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1373,
                  "column": 6
                },
                "end": {
                  "line": 1405,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(number | string)>)",
                  "description": "Path to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "shouldNotify",
                  "type": "boolean=",
                  "description": "Set to true if this change should\n cause a property notification event dispatch"
                },
                {
                  "name": "isPathNotification",
                  "type": "boolean=",
                  "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setUnmanagedPropertyToNode",
              "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1428,
                  "column": 6
                },
                "end": {
                  "line": 1436,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "The node to set a property on"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "The property to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "The value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_enqueueClient",
              "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1543,
                  "column": 6
                },
                "end": {
                  "line": 1548,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "client",
                  "type": "Object",
                  "description": "PropertyEffects client to enqueue"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_flushClients",
              "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1569,
                  "column": 6
                },
                "end": {
                  "line": 1580,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__enableOrFlushClients",
              "description": "(c) the stamped dom enables.",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1594,
                  "column": 6
                },
                "end": {
                  "line": 1607,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_readyClients",
              "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 558,
                  "column": 6
                },
                "end": {
                  "line": 567,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "setProperties",
              "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1636,
                  "column": 6
                },
                "end": {
                  "line": 1647,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
                },
                {
                  "name": "setReadOnly",
                  "type": "boolean=",
                  "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_propagatePropertyChanges",
              "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1734,
                  "column": 6
                },
                "end": {
                  "line": 1744,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "changedProps",
                  "type": "Object",
                  "description": "Bag of changed properties"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "linkPaths",
              "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1755,
                  "column": 6
                },
                "end": {
                  "line": 1760,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "to",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Target path to link."
                },
                {
                  "name": "from",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Source path to link."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unlinkPaths",
              "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1772,
                  "column": 6
                },
                "end": {
                  "line": 1777,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Target path to unlink."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifySplices",
              "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1809,
                  "column": 6
                },
                "end": {
                  "line": 1813,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "splices",
                  "type": "Array",
                  "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "get",
              "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1834,
                  "column": 6
                },
                "end": {
                  "line": 1836,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "set",
              "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1859,
                  "column": 6
                },
                "end": {
                  "line": 1869,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set at the specified path."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "push",
              "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1885,
                  "column": 6
                },
                "end": {
                  "line": 1894,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to push onto array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "pop",
              "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1909,
                  "column": 6
                },
                "end": {
                  "line": 1918,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "splice",
              "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1937,
                  "column": 6
                },
                "end": {
                  "line": 1974,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "start",
                  "type": "number",
                  "description": "Index from which to start removing/inserting."
                },
                {
                  "name": "deleteCount",
                  "type": "number",
                  "description": "Number of items to remove."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert into array."
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Array of removed items."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "shift",
              "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1989,
                  "column": 6
                },
                "end": {
                  "line": 1998,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unshift",
              "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2014,
                  "column": 6
                },
                "end": {
                  "line": 2022,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert info array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifyPath",
              "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2037,
                  "column": 6
                },
                "end": {
                  "line": 2054,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Value at the path (optional)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReadOnlyProperty",
              "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2067,
                  "column": 6
                },
                "end": {
                  "line": 2074,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createPropertyObserver",
              "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2088,
                  "column": 6
                },
                "end": {
                  "line": 2098,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string | function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createMethodObserver",
              "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2111,
                  "column": 6
                },
                "end": {
                  "line": 2117,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createNotifyingProperty",
              "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2128,
                  "column": 6
                },
                "end": {
                  "line": 2136,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReflectedProperty",
              "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2147,
                  "column": 6
                },
                "end": {
                  "line": 2160,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createComputedProperty",
              "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2174,
                  "column": 6
                },
                "end": {
                  "line": 2180,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_bindTemplate",
              "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2357,
                  "column": 6
                },
                "end": {
                  "line": 2380,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                },
                {
                  "name": "instanceBinding",
                  "type": "boolean=",
                  "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removeBoundDom",
              "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2459,
                  "column": 6
                },
                "end": {
                  "line": 2480,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "!StampedTemplate",
                  "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 134,
                  "column": 4
                },
                "end": {
                  "line": 140,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 122,
                  "column": 4
                },
                "end": {
                  "line": 129,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_attachDom",
              "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 581,
                  "column": 6
                },
                "end": {
                  "line": 597,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "StampedTemplate",
                  "description": "to attach to the element."
                }
              ],
              "return": {
                "type": "ShadowRoot",
                "desc": "node to which the dom has been attached."
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "updateStyles",
              "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.\n\nNote: This function does not support updating CSS mixins.\nYou can not dynamically change the value of an `@apply`.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 620,
                  "column": 6
                },
                "end": {
                  "line": 624,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "properties",
                  "type": "Object=",
                  "description": "Bag of custom property key/values to\n  apply to this element."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "resolveUrl",
              "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 641,
                  "column": 6
                },
                "end": {
                  "line": 646,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "url",
                  "type": "string",
                  "description": "URL to resolve."
                },
                {
                  "name": "base",
                  "type": "string=",
                  "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Rewritten URL relative to base"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "__debounceRender",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 95,
                  "column": 4
                },
                "end": {
                  "line": 117,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "render",
              "description": "Forces the element to render its content. Normally rendering is\nasynchronous to a provoking change. This is done for efficiency so\nthat multiple changes trigger only a single render. The render method\nshould be called if, for example, template rendering is required to\nvalidate application state.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 150,
                  "column": 4
                },
                "end": {
                  "line": 152,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "__render",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 154,
                  "column": 4
                },
                "end": {
                  "line": 174,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__ensureInstance",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 176,
                  "column": 4
                },
                "end": {
                  "line": 238,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__syncHostProperties",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 240,
                  "column": 4
                },
                "end": {
                  "line": 249,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__teardownInstance",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 251,
                  "column": 4
                },
                "end": {
                  "line": 264,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_showHideChildren",
              "description": "Shows or hides the template instance top level child elements. For\ntext nodes, `textContent` is removed while \"hidden\" and replaced when\n\"shown.\"",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 273,
                  "column": 4
                },
                "end": {
                  "line": 278,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [
            {
              "name": "_parseTemplate",
              "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 197,
                  "column": 6
                },
                "end": {
                  "line": 208,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to parse"
                },
                {
                  "name": "outerTemplateInfo",
                  "type": "TemplateInfo=",
                  "description": "Template metadata from the outer\n  template, for parsing nested templates"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Parsed template metadata"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateContent",
              "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 657,
                  "column": 6
                },
                "end": {
                  "line": 660,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "templateInfo"
                },
                {
                  "name": "nodeInfo"
                }
              ],
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_parseTemplateNode",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2499,
                  "column": 6
                },
                "end": {
                  "line": 2513,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateChildNodes",
              "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 258,
                  "column": 6
                },
                "end": {
                  "line": 295,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "root",
                  "type": "Node",
                  "description": "Root node whose `childNodes` will be parsed"
                },
                {
                  "name": "templateInfo",
                  "type": "!TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "!NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNestedTemplate",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2591,
                  "column": 6
                },
                "end": {
                  "line": 2601,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateNodeAttributes",
              "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 333,
                  "column": 6
                },
                "end": {
                  "line": 342,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNodeAttribute",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2534,
                  "column": 6
                },
                "end": {
                  "line": 2575,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Attribute name"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Attribute value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_contentForTemplate",
              "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 388,
                  "column": 6
                },
                "end": {
                  "line": 391,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "HTMLTemplateElement",
                  "description": "Template to retrieve `content` for"
                }
              ],
              "return": {
                "type": "DocumentFragment",
                "desc": "Content fragment"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "createProperties",
              "description": "Override of PropertiesChanged createProperties to create accessors\nand property effects for all of the properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 325,
                  "column": 7
                },
                "end": {
                  "line": 329,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "attributeNameForProperty",
              "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property to convert"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Attribute name corresponding to the given property."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "typeForProperty",
              "description": "Overrides `PropertiesChanged` method to return type specified in the\nstatic `properties` object for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-mixin.html",
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 183,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Type to which to deserialize attribute"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "createPropertiesForAttributes",
              "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-accessors.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 133,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "addPropertyEffect",
              "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2220,
                  "column": 6
                },
                "end": {
                  "line": 2222,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createPropertyObserver",
              "description": "Creates a single-property observer for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2234,
                  "column": 6
                },
                "end": {
                  "line": 2236,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string | function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createMethodObserver",
              "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2251,
                  "column": 6
                },
                "end": {
                  "line": 2253,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating"
                }
              ],
              "return": {
                "type": "void",
                "desc": "whether method names should be included as a dependency to the effect."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createNotifyingProperty",
              "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2263,
                  "column": 6
                },
                "end": {
                  "line": 2265,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReadOnlyProperty",
              "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2283,
                  "column": 6
                },
                "end": {
                  "line": 2285,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReflectedProperty",
              "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2295,
                  "column": 6
                },
                "end": {
                  "line": 2297,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createComputedProperty",
              "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2313,
                  "column": 6
                },
                "end": {
                  "line": 2315,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "bindTemplate",
              "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2329,
                  "column": 6
                },
                "end": {
                  "line": 2331,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addTemplatePropertyEffect",
              "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2395,
                  "column": 6
                },
                "end": {
                  "line": 2401,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Template metadata to add effect to"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseBindings",
              "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2636,
                  "column": 6
                },
                "end": {
                  "line": 2701,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "text",
                  "type": "string",
                  "description": "Text to parse from attribute or textContent"
                },
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Current template metadata"
                }
              ],
              "return": {
                "type": "Array.<!BindingPart>",
                "desc": "Array of binding part metadata"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_evaluateBinding",
              "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2717,
                  "column": 6
                },
                "end": {
                  "line": 2734,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "inst",
                  "type": "this",
                  "description": "Element that should be used as scope for\n  binding dependencies"
                },
                {
                  "name": "part",
                  "type": "BindingPart",
                  "description": "Binding part metadata"
                },
                {
                  "name": "path",
                  "type": "string",
                  "description": "Property/path that triggered this effect"
                },
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of current property changes"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value the binding part evaluated to"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "finalize",
              "description": "Finalizes an element definition, including ensuring any super classes\nare also finalized. This includes ensuring property\naccessors exist on the element prototype. This method calls\n`_finalizeClass` to finalize each constructor in the prototype chain.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\properties-mixin.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 137,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_finalizeClass",
              "description": "Override of PropertiesMixin _finalizeClass to create observers and\nfind the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 293,
                  "column": 5
                },
                "end": {
                  "line": 316,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "createObservers",
              "description": "Creates observers for the given `observers` array.\nLeverages `PropertyEffects` to create observers.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 342,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "observers",
                  "type": "Object",
                  "description": "Array of observer descriptors for\n  this class"
                },
                {
                  "name": "dynamicFns",
                  "type": "Object",
                  "description": "Object containing keys for any properties\n  that are functions and should trigger the effect when the function\n  reference is changed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_processStyleText",
              "description": "Gather style text for a style element in the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 490,
                  "column": 6
                },
                "end": {
                  "line": 492,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "cssText",
                  "type": "string",
                  "description": "Text containing styling to process"
                },
                {
                  "name": "baseURI",
                  "type": "string",
                  "description": "Base URI to rebase CSS paths against"
                }
              ],
              "return": {
                "type": "string",
                "desc": "The processed CSS text"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_finalizeTemplate",
              "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 503,
                  "column": 6
                },
                "end": {
                  "line": 514,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "is",
                  "type": "string",
                  "description": "Tag name (or type extension name) for this element"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 2
            },
            "end": {
              "line": 280,
              "column": 3
            }
          },
          "privacy": "public",
          "superclass": "Polymer.Element",
          "name": "Polymer.DomIf",
          "attributes": [
            {
              "name": "if",
              "description": "A boolean indicating whether this template should stamp.",
              "sourceRange": {
                "start": {
                  "line": 65,
                  "column": 8
                },
                "end": {
                  "line": 68,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "restamp",
              "description": "When true, elements will be removed from DOM and discarded when `if`\nbecomes false and re-created and added back to the DOM when `if`\nbecomes true.  By default, stamped elements will be hidden but left\nin the DOM when `if` becomes false, which is generally results\nin better performance.",
              "sourceRange": {
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 80,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "dom-change",
              "description": "dom-change",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "dom-if"
        },
        {
          "description": "Element implementing the `Polymer.ArraySelector` mixin, which records\ndynamic associations between item paths in a master `items` array and a\n`selected` array such that path changes to the master array (at the host)\nelement or elsewhere via data-binding) are correctly propagated to items\nin the selected array and vice-versa.\n\nThe `items` property accepts an array of user data, and via the\n`select(item)` and `deselect(item)` API, updates the `selected` property\nwhich may be bound to other parts of the application, and any changes to\nsub-fields of `selected` item(s) will be kept in sync with items in the\n`items` array.  When `multi` is false, `selected` is a property\nrepresenting the last selected item.  When `multi` is true, `selected`\nis an array of multiply selected items.\n\nExample:\n\n```html\n<dom-module id=\"employee-list\">\n\n  <template>\n\n    <div> Employee list: </div>\n    <dom-repeat id=\"employeeList\" items=\"{{employees}}\">\n      <template>\n        <div>First name: <span>{{item.first}}</span></div>\n          <div>Last name: <span>{{item.last}}</span></div>\n          <button on-click=\"toggleSelection\">Select</button>\n      </template>\n    </dom-repeat>\n\n    <array-selector id=\"selector\" items=\"{{employees}}\" selected=\"{{selected}}\" multi toggle></array-selector>\n\n    <div> Selected employees: </div>\n    <dom-repeat items=\"{{selected}}\">\n      <template>\n        <div>First name: <span>{{item.first}}</span></div>\n        <div>Last name: <span>{{item.last}}</span></div>\n      </template>\n    </dom-repeat>\n\n  </template>\n\n</dom-module>\n```\n\n```js\nclass EmployeeList extends Polymer.Element {\n static get is() { return 'employee-list'; }\n static get properties() {\n   return {\n     employees: {\n       value() {\n         return [\n           {first: 'Bob', last: 'Smith'},\n           {first: 'Sally', last: 'Johnson'},\n           ...\n         ];\n       }\n     }\n   };\n }\n toggleSelection(e) {\n   let item = this.$.employeeList.itemForElement(e.target);\n   this.$.selector.select(item);\n }\n}\n```",
          "summary": "Custom element that links paths between an input `items` array and\n  an output `selected` item or array based on calls to its selection API.",
          "path": "components\\polymer\\lib\\elements\\array-selector.html",
          "properties": [
            {
              "name": "__dataClientsReady",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1147,
                  "column": 8
                },
                "end": {
                  "line": 1147,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPendingClients",
              "type": "Array",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1149,
                  "column": 8
                },
                "end": {
                  "line": 1149,
                  "column": 34
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataToNotify",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1151,
                  "column": 8
                },
                "end": {
                  "line": 1151,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataLinkedPaths",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1153,
                  "column": 8
                },
                "end": {
                  "line": 1153,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHasPaths",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1155,
                  "column": 8
                },
                "end": {
                  "line": 1155,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataCompoundStorage",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1157,
                  "column": 8
                },
                "end": {
                  "line": 1157,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHost",
              "type": "Polymer_PropertyEffects",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1159,
                  "column": 8
                },
                "end": {
                  "line": 1159,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataTemp",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1161,
                  "column": 8
                },
                "end": {
                  "line": 1161,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataClientsInitialized",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1163,
                  "column": 8
                },
                "end": {
                  "line": 1163,
                  "column": 38
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__data",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1165,
                  "column": 8
                },
                "end": {
                  "line": 1165,
                  "column": 20
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPending",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1167,
                  "column": 8
                },
                "end": {
                  "line": 1167,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataOld",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1169,
                  "column": 8
                },
                "end": {
                  "line": 1169,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__computeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1171,
                  "column": 8
                },
                "end": {
                  "line": 1171,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__reflectEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1173,
                  "column": 8
                },
                "end": {
                  "line": 1173,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__notifyEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1175,
                  "column": 8
                },
                "end": {
                  "line": 1175,
                  "column": 29
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__propagateEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1177,
                  "column": 8
                },
                "end": {
                  "line": 1177,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__observeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1179,
                  "column": 8
                },
                "end": {
                  "line": 1179,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__readOnly",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1181,
                  "column": 8
                },
                "end": {
                  "line": 1181,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__templateInfo",
              "type": "!TemplateInfo",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1183,
                  "column": 8
                },
                "end": {
                  "line": 1183,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_template",
              "type": "HTMLTemplateElement",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 421,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_importPath",
              "type": "string",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 423,
                  "column": 8
                },
                "end": {
                  "line": 423,
                  "column": 25
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "rootPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 425,
                  "column": 8
                },
                "end": {
                  "line": 425,
                  "column": 22
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "importPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 427,
                  "column": 8
                },
                "end": {
                  "line": 427,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "root",
              "type": "(StampedTemplate | HTMLElement | ShadowRoot)",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 429,
                  "column": 8
                },
                "end": {
                  "line": 429,
                  "column": 18
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "$",
              "type": "!Object.<string, !Element>",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 431,
                  "column": 8
                },
                "end": {
                  "line": 431,
                  "column": 15
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "items",
              "type": "Array",
              "description": "An array containing items from which selection will be made.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 63,
                  "column": 10
                },
                "end": {
                  "line": 65,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Polymer.ArraySelectorMixin"
            },
            {
              "name": "multi",
              "type": "boolean",
              "description": "When `true`, multiple items may be selected at once (in this case,\n`selected` is an array of currently selected items).  When `false`,\nonly one item may be selected at a time.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 72,
                  "column": 10
                },
                "end": {
                  "line": 75,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "Polymer.ArraySelectorMixin"
            },
            {
              "name": "selected",
              "type": "?(Object | Array.<!Object>)",
              "description": "When `multi` is true, this is an array that contains any selected.\nWhen `multi` is false, this is the currently selected item, or `null`\nif no item is selected.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 83,
                  "column": 10
                },
                "end": {
                  "line": 86,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "Polymer.ArraySelectorMixin"
            },
            {
              "name": "selectedItem",
              "type": "?Object",
              "description": "When `multi` is false, this is the currently selected item, or `null`\nif no item is selected.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 93,
                  "column": 10
                },
                "end": {
                  "line": 96,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "Polymer.ArraySelectorMixin"
            },
            {
              "name": "toggle",
              "type": "boolean",
              "description": "When `true`, calling `select` on an item that is already selected\nwill deselect the item.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 102,
                  "column": 10
                },
                "end": {
                  "line": 105,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "Polymer.ArraySelectorMixin"
            }
          ],
          "methods": [
            {
              "name": "_stampTemplate",
              "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2423,
                  "column": 6
                },
                "end": {
                  "line": 2448,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to stamp"
                }
              ],
              "return": {
                "type": "!StampedTemplate",
                "desc": "Cloned template content"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addMethodEventListenerToNode",
              "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 452,
                  "column": 6
                },
                "end": {
                  "line": 457,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add listener on"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Name of method"
                },
                {
                  "name": "context",
                  "type": "*=",
                  "description": "Context the method will be called on (defaults\n  to `node`)"
                }
              ],
              "return": {
                "type": "Function",
                "desc": "Generated handler function"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_addEventListenerToNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 467,
                  "column": 6
                },
                "end": {
                  "line": 469,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add event listener to"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to add"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_removeEventListenerFromNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 479,
                  "column": 6
                },
                "end": {
                  "line": 481,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to remove event listener from"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_createPropertyAccessor",
              "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 115,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_addPropertyToAttributeMap",
              "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 132,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                }
              ],
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_definePropertyAccessor",
              "description": "Defines a property accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 140,
                  "column": 9
                },
                "end": {
                  "line": 153,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "ready",
              "description": "Stamps the element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 540,
                  "column": 6
                },
                "end": {
                  "line": 546,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeProperties",
              "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 446,
                  "column": 6
                },
                "end": {
                  "line": 480,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeInstanceProperties",
              "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 222,
                  "column": 8
                },
                "end": {
                  "line": 224,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of property values that were overwritten\n  when creating property accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setProperty",
              "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 235,
                  "column": 8
                },
                "end": {
                  "line": 239,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_getProperty",
              "description": "Returns the value for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 247,
                  "column": 8
                },
                "end": {
                  "line": 249,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value for the given property"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setPendingProperty",
              "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 264,
                  "column": 8
                },
                "end": {
                  "line": 280,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "ext",
                  "type": "boolean=",
                  "description": "Not used here; affordance for closure"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property changed"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_invalidateProperties",
              "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 290,
                  "column": 8
                },
                "end": {
                  "line": 300,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_enableProperties",
              "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 313,
                  "column": 8
                },
                "end": {
                  "line": 322,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_flushProperties",
              "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 333,
                  "column": 8
                },
                "end": {
                  "line": 342,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertiesChange",
              "description": "Called in `_flushProperties` to determine if `_propertiesChanged`\nshould be called. The default implementation returns true if\nproperties are pending. Override to customize when\n`_propertiesChanged` is called.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 356,
                  "column": 8
                },
                "end": {
                  "line": 358,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "true if changedProps is truthy"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertiesChanged",
              "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 372,
                  "column": 8
                },
                "end": {
                  "line": 373,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertyChange",
              "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 393,
                  "column": 8
                },
                "end": {
                  "line": 400,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeChangedCallback",
              "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 412,
                  "column": 8
                },
                "end": {
                  "line": 419,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of attribute that changed"
                },
                {
                  "name": "old",
                  "type": "?string",
                  "description": "Old attribute value"
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "New attribute value"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_attributeToProperty",
              "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 433,
                  "column": 8
                },
                "end": {
                  "line": 440,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to deserialize."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "of the attribute."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertyToAttribute",
              "description": "Serializes a property to its associated attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 452,
                  "column": 8
                },
                "end": {
                  "line": 458,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name to reflect."
                },
                {
                  "name": "attribute",
                  "type": "string=",
                  "description": "Attribute name to reflect to."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Property value to refect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_valueToNodeAttribute",
              "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 473,
                  "column": 8
                },
                "end": {
                  "line": 480,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to set attribute to."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to serialize."
                },
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Attribute name to serialize to."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_serializeValue",
              "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 493,
                  "column": 8
                },
                "end": {
                  "line": 500,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Property value to serialize."
                }
              ],
              "return": {
                "type": "(string | undefined)",
                "desc": "String serialized from the provided\nproperty  value."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_deserializeValue",
              "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 514,
                  "column": 8
                },
                "end": {
                  "line": 523,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Value to deserialize."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "Type to deserialize the string to."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Typed value deserialized from the provided string."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_initializeProtoProperties",
              "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1217,
                  "column": 6
                },
                "end": {
                  "line": 1221,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Properties to initialize on the prototype"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_ensureAttribute",
              "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-accessors.html",
                "start": {
                  "line": 192,
                  "column": 6
                },
                "end": {
                  "line": 197,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to ensure is set."
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "of the attribute."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_hasAccessor",
              "description": "Returns true if this library created an accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-accessors.html",
                "start": {
                  "line": 299,
                  "column": 6
                },
                "end": {
                  "line": 301,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if an accessor was created"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_isPropertyPending",
              "description": "Returns true if the specified property has a pending change.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-accessors.html",
                "start": {
                  "line": 310,
                  "column": 6
                },
                "end": {
                  "line": 312,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if property has a pending change"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_addPropertyEffect",
              "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1255,
                  "column": 6
                },
                "end": {
                  "line": 1263,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removePropertyEffect",
              "description": "Removes the given property effect.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1273,
                  "column": 6
                },
                "end": {
                  "line": 1279,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property the effect was associated with"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasPropertyEffect",
              "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1290,
                  "column": 6
                },
                "end": {
                  "line": 1293,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "type",
                  "type": "string=",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReadOnlyEffect",
              "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1303,
                  "column": 6
                },
                "end": {
                  "line": 1305,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasNotifyEffect",
              "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1315,
                  "column": 6
                },
                "end": {
                  "line": 1317,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReflectEffect",
              "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1327,
                  "column": 6
                },
                "end": {
                  "line": 1329,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasComputedEffect",
              "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1339,
                  "column": 6
                },
                "end": {
                  "line": 1341,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setPendingPropertyOrPath",
              "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1373,
                  "column": 6
                },
                "end": {
                  "line": 1405,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(number | string)>)",
                  "description": "Path to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "shouldNotify",
                  "type": "boolean=",
                  "description": "Set to true if this change should\n cause a property notification event dispatch"
                },
                {
                  "name": "isPathNotification",
                  "type": "boolean=",
                  "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setUnmanagedPropertyToNode",
              "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1428,
                  "column": 6
                },
                "end": {
                  "line": 1436,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "The node to set a property on"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "The property to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "The value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_enqueueClient",
              "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1543,
                  "column": 6
                },
                "end": {
                  "line": 1548,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "client",
                  "type": "Object",
                  "description": "PropertyEffects client to enqueue"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_flushClients",
              "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1569,
                  "column": 6
                },
                "end": {
                  "line": 1580,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__enableOrFlushClients",
              "description": "(c) the stamped dom enables.",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1594,
                  "column": 6
                },
                "end": {
                  "line": 1607,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_readyClients",
              "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 558,
                  "column": 6
                },
                "end": {
                  "line": 567,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "setProperties",
              "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1636,
                  "column": 6
                },
                "end": {
                  "line": 1647,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
                },
                {
                  "name": "setReadOnly",
                  "type": "boolean=",
                  "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_propagatePropertyChanges",
              "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1734,
                  "column": 6
                },
                "end": {
                  "line": 1744,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "changedProps",
                  "type": "Object",
                  "description": "Bag of changed properties"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "linkPaths",
              "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1755,
                  "column": 6
                },
                "end": {
                  "line": 1760,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "to",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Target path to link."
                },
                {
                  "name": "from",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Source path to link."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unlinkPaths",
              "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1772,
                  "column": 6
                },
                "end": {
                  "line": 1777,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Target path to unlink."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifySplices",
              "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1809,
                  "column": 6
                },
                "end": {
                  "line": 1813,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "splices",
                  "type": "Array",
                  "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "get",
              "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1834,
                  "column": 6
                },
                "end": {
                  "line": 1836,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "set",
              "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1859,
                  "column": 6
                },
                "end": {
                  "line": 1869,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set at the specified path."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "push",
              "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1885,
                  "column": 6
                },
                "end": {
                  "line": 1894,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to push onto array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "pop",
              "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1909,
                  "column": 6
                },
                "end": {
                  "line": 1918,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "splice",
              "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1937,
                  "column": 6
                },
                "end": {
                  "line": 1974,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "start",
                  "type": "number",
                  "description": "Index from which to start removing/inserting."
                },
                {
                  "name": "deleteCount",
                  "type": "number",
                  "description": "Number of items to remove."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert into array."
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Array of removed items."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "shift",
              "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1989,
                  "column": 6
                },
                "end": {
                  "line": 1998,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unshift",
              "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2014,
                  "column": 6
                },
                "end": {
                  "line": 2022,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert info array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifyPath",
              "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2037,
                  "column": 6
                },
                "end": {
                  "line": 2054,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Value at the path (optional)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReadOnlyProperty",
              "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2067,
                  "column": 6
                },
                "end": {
                  "line": 2074,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createPropertyObserver",
              "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2088,
                  "column": 6
                },
                "end": {
                  "line": 2098,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string | function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createMethodObserver",
              "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2111,
                  "column": 6
                },
                "end": {
                  "line": 2117,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createNotifyingProperty",
              "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2128,
                  "column": 6
                },
                "end": {
                  "line": 2136,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReflectedProperty",
              "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2147,
                  "column": 6
                },
                "end": {
                  "line": 2160,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createComputedProperty",
              "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2174,
                  "column": 6
                },
                "end": {
                  "line": 2180,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_bindTemplate",
              "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2357,
                  "column": 6
                },
                "end": {
                  "line": 2380,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                },
                {
                  "name": "instanceBinding",
                  "type": "boolean=",
                  "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removeBoundDom",
              "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2459,
                  "column": 6
                },
                "end": {
                  "line": 2480,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "!StampedTemplate",
                  "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "connectedCallback",
              "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 527,
                  "column": 6
                },
                "end": {
                  "line": 532,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "disconnectedCallback",
              "description": "Called when the element is removed from a document",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\properties-mixin.html",
                "start": {
                  "line": 215,
                  "column": 6
                },
                "end": {
                  "line": 219,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_attachDom",
              "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 581,
                  "column": 6
                },
                "end": {
                  "line": 597,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "StampedTemplate",
                  "description": "to attach to the element."
                }
              ],
              "return": {
                "type": "ShadowRoot",
                "desc": "node to which the dom has been attached."
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "updateStyles",
              "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.\n\nNote: This function does not support updating CSS mixins.\nYou can not dynamically change the value of an `@apply`.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 620,
                  "column": 6
                },
                "end": {
                  "line": 624,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "properties",
                  "type": "Object=",
                  "description": "Bag of custom property key/values to\n  apply to this element."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "resolveUrl",
              "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 641,
                  "column": 6
                },
                "end": {
                  "line": 646,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "url",
                  "type": "string",
                  "description": "URL to resolve."
                },
                {
                  "name": "base",
                  "type": "string=",
                  "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Rewritten URL relative to base"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "__updateSelection",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 121,
                  "column": 6
                },
                "end": {
                  "line": 151,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "multi"
                },
                {
                  "name": "itemsInfo"
                }
              ],
              "inheritedFrom": "Polymer.ArraySelectorMixin"
            },
            {
              "name": "__applySplices",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 153,
                  "column": 6
                },
                "end": {
                  "line": 192,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "splices"
                }
              ],
              "inheritedFrom": "Polymer.ArraySelectorMixin"
            },
            {
              "name": "__updateLinks",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 194,
                  "column": 6
                },
                "end": {
                  "line": 209,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.ArraySelectorMixin"
            },
            {
              "name": "clearSelection",
              "description": "Clears the selection state.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 215,
                  "column": 6
                },
                "end": {
                  "line": 226,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ArraySelectorMixin"
            },
            {
              "name": "isSelected",
              "description": "Returns whether the item is currently selected.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 234,
                  "column": 6
                },
                "end": {
                  "line": 236,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "item",
                  "type": "*",
                  "description": "Item from `items` array to test"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the item is selected"
              },
              "inheritedFrom": "Polymer.ArraySelectorMixin"
            },
            {
              "name": "isIndexSelected",
              "description": "Returns whether the item is currently selected.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 244,
                  "column": 6
                },
                "end": {
                  "line": 246,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "idx",
                  "type": "number",
                  "description": "Index from `items` array to test"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the item is selected"
              },
              "inheritedFrom": "Polymer.ArraySelectorMixin"
            },
            {
              "name": "__deselectChangedIdx",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 248,
                  "column": 6
                },
                "end": {
                  "line": 258,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "idx"
                }
              ],
              "inheritedFrom": "Polymer.ArraySelectorMixin"
            },
            {
              "name": "__selectedIndexForItemIndex",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 260,
                  "column": 6
                },
                "end": {
                  "line": 265,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "idx"
                }
              ],
              "inheritedFrom": "Polymer.ArraySelectorMixin"
            },
            {
              "name": "deselect",
              "description": "Deselects the given item if it is already selected.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 273,
                  "column": 6
                },
                "end": {
                  "line": 288,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "item",
                  "type": "*",
                  "description": "Item from `items` array to deselect"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ArraySelectorMixin"
            },
            {
              "name": "deselectIndex",
              "description": "Deselects the given index if it is already selected.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 296,
                  "column": 6
                },
                "end": {
                  "line": 298,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "idx",
                  "type": "number",
                  "description": "Index from `items` array to deselect"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ArraySelectorMixin"
            },
            {
              "name": "select",
              "description": "Selects the given item.  When `toggle` is true, this will automatically\ndeselect the item if already selected.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 307,
                  "column": 6
                },
                "end": {
                  "line": 309,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "item",
                  "type": "*",
                  "description": "Item from `items` array to select"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ArraySelectorMixin"
            },
            {
              "name": "selectIndex",
              "description": "Selects the given index.  When `toggle` is true, this will automatically\ndeselect the item if already selected.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 318,
                  "column": 6
                },
                "end": {
                  "line": 334,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "idx",
                  "type": "number",
                  "description": "Index from `items` array to select"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ArraySelectorMixin"
            }
          ],
          "staticMethods": [
            {
              "name": "_parseTemplate",
              "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 197,
                  "column": 6
                },
                "end": {
                  "line": 208,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to parse"
                },
                {
                  "name": "outerTemplateInfo",
                  "type": "TemplateInfo=",
                  "description": "Template metadata from the outer\n  template, for parsing nested templates"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Parsed template metadata"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateContent",
              "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 657,
                  "column": 6
                },
                "end": {
                  "line": 660,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "templateInfo"
                },
                {
                  "name": "nodeInfo"
                }
              ],
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_parseTemplateNode",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2499,
                  "column": 6
                },
                "end": {
                  "line": 2513,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateChildNodes",
              "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 258,
                  "column": 6
                },
                "end": {
                  "line": 295,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "root",
                  "type": "Node",
                  "description": "Root node whose `childNodes` will be parsed"
                },
                {
                  "name": "templateInfo",
                  "type": "!TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "!NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNestedTemplate",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2591,
                  "column": 6
                },
                "end": {
                  "line": 2601,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateNodeAttributes",
              "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 333,
                  "column": 6
                },
                "end": {
                  "line": 342,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNodeAttribute",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2534,
                  "column": 6
                },
                "end": {
                  "line": 2575,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Attribute name"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Attribute value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_contentForTemplate",
              "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 388,
                  "column": 6
                },
                "end": {
                  "line": 391,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "HTMLTemplateElement",
                  "description": "Template to retrieve `content` for"
                }
              ],
              "return": {
                "type": "DocumentFragment",
                "desc": "Content fragment"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "createProperties",
              "description": "Override of PropertiesChanged createProperties to create accessors\nand property effects for all of the properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 325,
                  "column": 7
                },
                "end": {
                  "line": 329,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "attributeNameForProperty",
              "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property to convert"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Attribute name corresponding to the given property."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "typeForProperty",
              "description": "Overrides `PropertiesChanged` method to return type specified in the\nstatic `properties` object for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-mixin.html",
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 183,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Type to which to deserialize attribute"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "createPropertiesForAttributes",
              "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-accessors.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 133,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "addPropertyEffect",
              "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2220,
                  "column": 6
                },
                "end": {
                  "line": 2222,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createPropertyObserver",
              "description": "Creates a single-property observer for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2234,
                  "column": 6
                },
                "end": {
                  "line": 2236,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string | function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createMethodObserver",
              "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2251,
                  "column": 6
                },
                "end": {
                  "line": 2253,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating"
                }
              ],
              "return": {
                "type": "void",
                "desc": "whether method names should be included as a dependency to the effect."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createNotifyingProperty",
              "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2263,
                  "column": 6
                },
                "end": {
                  "line": 2265,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReadOnlyProperty",
              "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2283,
                  "column": 6
                },
                "end": {
                  "line": 2285,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReflectedProperty",
              "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2295,
                  "column": 6
                },
                "end": {
                  "line": 2297,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createComputedProperty",
              "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2313,
                  "column": 6
                },
                "end": {
                  "line": 2315,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "bindTemplate",
              "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2329,
                  "column": 6
                },
                "end": {
                  "line": 2331,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addTemplatePropertyEffect",
              "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2395,
                  "column": 6
                },
                "end": {
                  "line": 2401,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Template metadata to add effect to"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseBindings",
              "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2636,
                  "column": 6
                },
                "end": {
                  "line": 2701,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "text",
                  "type": "string",
                  "description": "Text to parse from attribute or textContent"
                },
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Current template metadata"
                }
              ],
              "return": {
                "type": "Array.<!BindingPart>",
                "desc": "Array of binding part metadata"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_evaluateBinding",
              "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2717,
                  "column": 6
                },
                "end": {
                  "line": 2734,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "inst",
                  "type": "this",
                  "description": "Element that should be used as scope for\n  binding dependencies"
                },
                {
                  "name": "part",
                  "type": "BindingPart",
                  "description": "Binding part metadata"
                },
                {
                  "name": "path",
                  "type": "string",
                  "description": "Property/path that triggered this effect"
                },
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of current property changes"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value the binding part evaluated to"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "finalize",
              "description": "Finalizes an element definition, including ensuring any super classes\nare also finalized. This includes ensuring property\naccessors exist on the element prototype. This method calls\n`_finalizeClass` to finalize each constructor in the prototype chain.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\properties-mixin.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 137,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_finalizeClass",
              "description": "Override of PropertiesMixin _finalizeClass to create observers and\nfind the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 293,
                  "column": 5
                },
                "end": {
                  "line": 316,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "createObservers",
              "description": "Creates observers for the given `observers` array.\nLeverages `PropertyEffects` to create observers.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 342,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "observers",
                  "type": "Object",
                  "description": "Array of observer descriptors for\n  this class"
                },
                {
                  "name": "dynamicFns",
                  "type": "Object",
                  "description": "Object containing keys for any properties\n  that are functions and should trigger the effect when the function\n  reference is changed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_processStyleText",
              "description": "Gather style text for a style element in the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 490,
                  "column": 6
                },
                "end": {
                  "line": 492,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "cssText",
                  "type": "string",
                  "description": "Text containing styling to process"
                },
                {
                  "name": "baseURI",
                  "type": "string",
                  "description": "Base URI to rebase CSS paths against"
                }
              ],
              "return": {
                "type": "string",
                "desc": "The processed CSS text"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_finalizeTemplate",
              "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 503,
                  "column": 6
                },
                "end": {
                  "line": 514,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "is",
                  "type": "string",
                  "description": "Tag name (or type extension name) for this element"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 429,
              "column": 2
            },
            "end": {
              "line": 433,
              "column": 3
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Polymer.ArraySelector",
          "attributes": [
            {
              "name": "items",
              "description": "An array containing items from which selection will be made.",
              "sourceRange": {
                "start": {
                  "line": 63,
                  "column": 10
                },
                "end": {
                  "line": 65,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "Polymer.ArraySelectorMixin"
            },
            {
              "name": "multi",
              "description": "When `true`, multiple items may be selected at once (in this case,\n`selected` is an array of currently selected items).  When `false`,\nonly one item may be selected at a time.",
              "sourceRange": {
                "start": {
                  "line": 72,
                  "column": 10
                },
                "end": {
                  "line": 75,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Polymer.ArraySelectorMixin"
            },
            {
              "name": "selected",
              "description": "When `multi` is true, this is an array that contains any selected.\nWhen `multi` is false, this is the currently selected item, or `null`\nif no item is selected.",
              "sourceRange": {
                "start": {
                  "line": 83,
                  "column": 10
                },
                "end": {
                  "line": 86,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "?(Object | Array.<!Object>)",
              "inheritedFrom": "Polymer.ArraySelectorMixin"
            },
            {
              "name": "selected-item",
              "description": "When `multi` is false, this is the currently selected item, or `null`\nif no item is selected.",
              "sourceRange": {
                "start": {
                  "line": 93,
                  "column": 10
                },
                "end": {
                  "line": 96,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "?Object",
              "inheritedFrom": "Polymer.ArraySelectorMixin"
            },
            {
              "name": "toggle",
              "description": "When `true`, calling `select` on an item that is already selected\nwill deselect the item.",
              "sourceRange": {
                "start": {
                  "line": 102,
                  "column": 10
                },
                "end": {
                  "line": 105,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Polymer.ArraySelectorMixin"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "array-selector",
          "mixins": [
            "Polymer.ArraySelectorMixin"
          ]
        },
        {
          "description": "Custom element for defining styles in the main document that can take\nadvantage of [shady DOM](https://github.com/webcomponents/shadycss) shims\nfor style encapsulation, custom properties, and custom mixins.\n\n- Document styles defined in a `<custom-style>` are shimmed to ensure they\n  do not leak into local DOM when running on browsers without native\n  Shadow DOM.\n- Custom properties can be defined in a `<custom-style>`. Use the `html` selector\n  to define custom properties that apply to all custom elements.\n- Custom mixins can be defined in a `<custom-style>`, if you import the optional\n  [apply shim](https://github.com/webcomponents/shadycss#about-applyshim)\n  (`shadycss/apply-shim.html`).\n\nTo use:\n\n- Import `custom-style.html`.\n- Place a `<custom-style>` element in the main document, wrapping an inline `<style>` tag that\n  contains the CSS rules you want to shim.\n\nFor example:\n\n```html\n<!-- import apply shim--only required if using mixins -->\n<link rel=\"import\" href=\"bower_components/shadycss/apply-shim.html\">\n<!-- import custom-style element -->\n<link rel=\"import\" href=\"bower_components/polymer/lib/elements/custom-style.html\">\n\n<custom-style>\n  <style>\n    html {\n      --custom-color: blue;\n      --custom-mixin: {\n        font-weight: bold;\n        color: red;\n      };\n    }\n  </style>\n</custom-style>\n```",
          "summary": "Custom element for defining styles in the main document that can\n  take advantage of Polymer's style scoping and custom properties shims.",
          "path": "components\\polymer\\lib\\elements\\custom-style.html",
          "properties": [],
          "methods": [
            {
              "name": "getStyle",
              "description": "Returns the light-DOM `<style>` child this element wraps.  Upon first\ncall any style modules referenced via the `include` attribute will be\nconcatenated to this element's `<style>`.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 79,
                  "column": 4
                },
                "end": {
                  "line": 107,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "HTMLStyleElement",
                "desc": "This element's light-DOM `<style>`"
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 2
            },
            "end": {
              "line": 108,
              "column": 3
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Polymer.CustomStyle",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "custom-style"
        },
        {
          "description": "`iron-a11y-announcer` is a singleton element that is intended to add a11y\nto features that require on-demand announcement from screen readers. In\norder to make use of the announcer, it is best to request its availability\nin the announcing element.\n\nExample:\n\n    Polymer({\n\n      is: 'x-chatty',\n\n      attached: function() {\n        // This will create the singleton element if it has not\n        // been created yet:\n        Polymer.IronA11yAnnouncer.requestAvailability();\n      }\n    });\n\nAfter the `iron-a11y-announcer` has been made available, elements can\nmake announces by firing bubbling `iron-announce` events.\n\nExample:\n\n    this.fire('iron-announce', {\n      text: 'This is an announcement!'\n    }, { bubbles: true });\n\nNote: announcements are only audible if you have a screen reader enabled.",
          "summary": "",
          "path": "components\\iron-a11y-announcer\\iron-a11y-announcer.html",
          "properties": [
            {
              "name": "mode",
              "type": "string",
              "description": "The value of mode is used to set the `aria-live` attribute\nfor the element that will be announced. Valid values are: `off`,\n`polite` and `assertive`.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 73,
                  "column": 10
                },
                "end": {
                  "line": 76,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"polite\""
            },
            {
              "name": "_text",
              "type": "string",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 78,
                  "column": 10
                },
                "end": {
                  "line": 81,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"\""
            }
          ],
          "methods": [
            {
              "name": "created",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 84,
                  "column": 8
                },
                "end": {
                  "line": 90,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "announce",
              "description": "Cause a text string to be announced by screen readers.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 97,
                  "column": 8
                },
                "end": {
                  "line": 102,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "text",
                  "type": "string",
                  "description": "The text that should be announced."
                }
              ]
            },
            {
              "name": "_onIronAnnounce",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 104,
                  "column": 8
                },
                "end": {
                  "line": 108,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "event"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [
            {
              "url": "demo/index.html",
              "description": ""
            }
          ],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 42
            },
            "end": {
              "line": 109,
              "column": 7
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Polymer.IronA11yAnnouncer",
          "attributes": [
            {
              "name": "mode",
              "description": "The value of mode is used to set the `aria-live` attribute\nfor the element that will be announced. Valid values are: `off`,\n`polite` and `assertive`.",
              "sourceRange": {
                "start": {
                  "line": 73,
                  "column": 10
                },
                "end": {
                  "line": 76,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "iron-a11y-announcer"
        }
      ],
      "mixins": [
        {
          "description": "Element class mixin that provides basic meta-programming for creating one\nor more property accessors (getter/setter pair) that enqueue an async\n(batched) `_propertiesChanged` callback.\n\nFor basic usage of this mixin, call `MyClass.createProperties(props)`\nonce at class definition time to create property accessors for properties\nnamed in props, implement `_propertiesChanged` to react as desired to\nproperty changes, and implement `static get observedAttributes()` and\ninclude lowercase versions of any property names that should be set from\nattributes. Last, call `this._enableProperties()` in the element's\n`connectedCallback` to enable the accessors.",
          "summary": "Element class mixin for reacting to property changes from\n  generated property accessors.",
          "path": "components\\polymer\\lib\\mixins\\properties-changed.html",
          "properties": [],
          "methods": [
            {
              "name": "_createPropertyAccessor",
              "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 115,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_addPropertyToAttributeMap",
              "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 132,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                }
              ]
            },
            {
              "name": "_definePropertyAccessor",
              "description": "Defines a property accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 140,
                  "column": 9
                },
                "end": {
                  "line": 153,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "ready",
              "description": "Lifecycle callback called when properties are enabled via\n`_enableProperties`.\n\nUsers may override this function to implement behavior that is\ndependent on the element having its property data initialized, e.g.\nfrom defaults (initialized from `constructor`, `_initializeProperties`),\n`attributeChangedCallback`, or values propagated from host e.g. via\nbindings.  `super.ready()` must be called to ensure the data system\nbecomes enabled.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 182,
                  "column": 8
                },
                "end": {
                  "line": 185,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_initializeProperties",
              "description": "Initializes the local storage for property accessors.\n\nProvided as an override point for performing any setup work prior\nto initializing the property accessor system.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 196,
                  "column": 8
                },
                "end": {
                  "line": 207,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_initializeInstanceProperties",
              "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 222,
                  "column": 8
                },
                "end": {
                  "line": 224,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of property values that were overwritten\n  when creating property accessors."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_setProperty",
              "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 235,
                  "column": 8
                },
                "end": {
                  "line": 239,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_getProperty",
              "description": "Returns the value for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 247,
                  "column": 8
                },
                "end": {
                  "line": 249,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value for the given property"
              }
            },
            {
              "name": "_setPendingProperty",
              "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 264,
                  "column": 8
                },
                "end": {
                  "line": 280,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "ext",
                  "type": "boolean=",
                  "description": "Not used here; affordance for closure"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property changed"
              }
            },
            {
              "name": "_invalidateProperties",
              "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 290,
                  "column": 8
                },
                "end": {
                  "line": 300,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_enableProperties",
              "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 313,
                  "column": 8
                },
                "end": {
                  "line": 322,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_flushProperties",
              "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 333,
                  "column": 8
                },
                "end": {
                  "line": 342,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_shouldPropertiesChange",
              "description": "Called in `_flushProperties` to determine if `_propertiesChanged`\nshould be called. The default implementation returns true if\nproperties are pending. Override to customize when\n`_propertiesChanged` is called.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 356,
                  "column": 8
                },
                "end": {
                  "line": 358,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "true if changedProps is truthy"
              }
            },
            {
              "name": "_propertiesChanged",
              "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 372,
                  "column": 8
                },
                "end": {
                  "line": 373,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_shouldPropertyChange",
              "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 393,
                  "column": 8
                },
                "end": {
                  "line": 400,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
              }
            },
            {
              "name": "attributeChangedCallback",
              "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 412,
                  "column": 8
                },
                "end": {
                  "line": 419,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of attribute that changed"
                },
                {
                  "name": "old",
                  "type": "?string",
                  "description": "Old attribute value"
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "New attribute value"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_attributeToProperty",
              "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 433,
                  "column": 8
                },
                "end": {
                  "line": 440,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to deserialize."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "of the attribute."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_propertyToAttribute",
              "description": "Serializes a property to its associated attribute.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 452,
                  "column": 8
                },
                "end": {
                  "line": 458,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name to reflect."
                },
                {
                  "name": "attribute",
                  "type": "string=",
                  "description": "Attribute name to reflect to."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Property value to refect."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_valueToNodeAttribute",
              "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 473,
                  "column": 8
                },
                "end": {
                  "line": 480,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to set attribute to."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to serialize."
                },
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Attribute name to serialize to."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_serializeValue",
              "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 493,
                  "column": 8
                },
                "end": {
                  "line": 500,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Property value to serialize."
                }
              ],
              "return": {
                "type": "(string | undefined)",
                "desc": "String serialized from the provided\nproperty  value."
              }
            },
            {
              "name": "_deserializeValue",
              "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 514,
                  "column": 8
                },
                "end": {
                  "line": 523,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Value to deserialize."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "Type to deserialize the string to."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Typed value deserialized from the provided string."
              }
            }
          ],
          "staticMethods": [
            {
              "name": "createProperties",
              "description": "Creates property accessors for the given property names.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 58,
                  "column": 8
                },
                "end": {
                  "line": 66,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "!Object",
                  "description": "Object whose keys are names of accessors."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "attributeNameForProperty",
              "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property to convert"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Attribute name corresponding to the given property."
              }
            },
            {
              "name": "typeForProperty",
              "description": "Override point to provide a type to which to deserialize a value to\na given property.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 88,
                  "column": 8
                },
                "end": {
                  "line": 88,
                  "column": 40
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of property"
                }
              ]
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 4
            },
            "end": {
              "line": 528,
              "column": 6
            }
          },
          "privacy": "public",
          "name": "Polymer.PropertiesChanged",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "Element class mixin that provides basic meta-programming for creating one\nor more property accessors (getter/setter pair) that enqueue an async\n(batched) `_propertiesChanged` callback.\n\nFor basic usage of this mixin:\n\n-   Declare attributes to observe via the standard `static get observedAttributes()`. Use\n    `dash-case` attribute names to represent `camelCase` property names. \n-   Implement the `_propertiesChanged` callback on the class.\n-   Call `MyClass.createPropertiesForAttributes()` **once** on the class to generate \n    property accessors for each observed attribute. This must be called before the first \n    instance is created, for example, by calling it before calling `customElements.define`.\n    It can also be called lazily from the element's `constructor`, as long as it's guarded so\n    that the call is only made once, when the first instance is created.\n-   Call `this._enableProperties()` in the element's `connectedCallback` to enable \n    the accessors.\n\nAny `observedAttributes` will automatically be\ndeserialized via `attributeChangedCallback` and set to the associated\nproperty using `dash-case`-to-`camelCase` convention.",
          "summary": "Element class mixin for reacting to property changes from\n  generated property accessors.",
          "path": "components\\polymer\\lib\\mixins\\property-accessors.html",
          "properties": [],
          "methods": [
            {
              "name": "_createPropertyAccessor",
              "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 115,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_addPropertyToAttributeMap",
              "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 132,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                }
              ],
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_definePropertyAccessor",
              "description": "Overrides PropertiesChanged implementation to save existing prototype\nproperty value so that it can be reset.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 288,
                  "column": 6
                },
                "end": {
                  "line": 291,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created\n\nWhen calling on a prototype, any overwritten values are saved in\n`__dataProto`, and it is up to the subclasser to decide how/when\nto set those properties back into the accessor.  When calling on an\ninstance, the overwritten value is set via `_setPendingProperty`,\nand the user should call `_invalidateProperties` or `_flushProperties`\nfor the values to take effect."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "ready",
              "description": "Lifecycle callback called when properties are enabled via\n`_enableProperties`.\n\nUsers may override this function to implement behavior that is\ndependent on the element having its property data initialized, e.g.\nfrom defaults (initialized from `constructor`, `_initializeProperties`),\n`attributeChangedCallback`, or values propagated from host e.g. via\nbindings.  `super.ready()` must be called to ensure the data system\nbecomes enabled.",
              "privacy": "public",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 182,
                  "column": 8
                },
                "end": {
                  "line": 185,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_initializeProperties",
              "description": "Overrides PropertiesChanged implementation to initialize values for\naccessors created for values that already existed on the element\nprototype.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 155,
                  "column": 6
                },
                "end": {
                  "line": 161,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_initializeInstanceProperties",
              "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 222,
                  "column": 8
                },
                "end": {
                  "line": 224,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of property values that were overwritten\n  when creating property accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setProperty",
              "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 235,
                  "column": 8
                },
                "end": {
                  "line": 239,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_getProperty",
              "description": "Returns the value for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 247,
                  "column": 8
                },
                "end": {
                  "line": 249,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value for the given property"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setPendingProperty",
              "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 264,
                  "column": 8
                },
                "end": {
                  "line": 280,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "ext",
                  "type": "boolean=",
                  "description": "Not used here; affordance for closure"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property changed"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_invalidateProperties",
              "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 290,
                  "column": 8
                },
                "end": {
                  "line": 300,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_enableProperties",
              "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 313,
                  "column": 8
                },
                "end": {
                  "line": 322,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_flushProperties",
              "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 333,
                  "column": 8
                },
                "end": {
                  "line": 342,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertiesChange",
              "description": "Called in `_flushProperties` to determine if `_propertiesChanged`\nshould be called. The default implementation returns true if\nproperties are pending. Override to customize when\n`_propertiesChanged` is called.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 356,
                  "column": 8
                },
                "end": {
                  "line": 358,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "true if changedProps is truthy"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertiesChanged",
              "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 372,
                  "column": 8
                },
                "end": {
                  "line": 373,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertyChange",
              "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 393,
                  "column": 8
                },
                "end": {
                  "line": 400,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeChangedCallback",
              "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
              "privacy": "public",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 412,
                  "column": 8
                },
                "end": {
                  "line": 419,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of attribute that changed"
                },
                {
                  "name": "old",
                  "type": "?string",
                  "description": "Old attribute value"
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "New attribute value"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_attributeToProperty",
              "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 433,
                  "column": 8
                },
                "end": {
                  "line": 440,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to deserialize."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "of the attribute."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertyToAttribute",
              "description": "Serializes a property to its associated attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 452,
                  "column": 8
                },
                "end": {
                  "line": 458,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name to reflect."
                },
                {
                  "name": "attribute",
                  "type": "string=",
                  "description": "Attribute name to reflect to."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Property value to refect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_valueToNodeAttribute",
              "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 473,
                  "column": 8
                },
                "end": {
                  "line": 480,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to set attribute to."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to serialize."
                },
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Attribute name to serialize to."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_serializeValue",
              "description": "Overrides PropertiesChanged implemention to serialize objects as JSON.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 205,
                  "column": 6
                },
                "end": {
                  "line": 222,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Property value to serialize."
                }
              ],
              "return": {
                "type": "(string | undefined)",
                "desc": "String serialized from the provided property value."
              }
            },
            {
              "name": "_deserializeValue",
              "description": "Converts a string to a typed JavaScript value.\n\nThis method is called by Polymer when reading HTML attribute values to\nJS properties.  Users may override this method on Polymer element\nprototypes to provide deserialization for custom `type`s.  Note,\nthe `type` argument is the value of the `type` field provided in the\n`properties` configuration object for a given property, and is\nby convention the constructor for the type to deserialize.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 239,
                  "column": 6
                },
                "end": {
                  "line": 270,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Attribute value to deserialize."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "Type to deserialize the string to."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Typed value deserialized from the provided string."
              }
            },
            {
              "name": "_initializeProtoProperties",
              "description": "Called at instance time with bag of properties that were overwritten\nby accessors on the prototype when accessors were created.\n\nThe default implementation sets these properties back into the\nsetter at instance time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 176,
                  "column": 6
                },
                "end": {
                  "line": 180,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of property values that were overwritten\n  when creating property accessors."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_ensureAttribute",
              "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 192,
                  "column": 6
                },
                "end": {
                  "line": 197,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to ensure is set."
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "of the attribute."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_hasAccessor",
              "description": "Returns true if this library created an accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 299,
                  "column": 6
                },
                "end": {
                  "line": 301,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if an accessor was created"
              }
            },
            {
              "name": "_isPropertyPending",
              "description": "Returns true if the specified property has a pending change.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 310,
                  "column": 6
                },
                "end": {
                  "line": 312,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if property has a pending change"
              }
            }
          ],
          "staticMethods": [
            {
              "name": "createProperties",
              "description": "Creates property accessors for the given property names.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 58,
                  "column": 8
                },
                "end": {
                  "line": 66,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "!Object",
                  "description": "Object whose keys are names of accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeNameForProperty",
              "description": "Returns an attribute name that corresponds to the given property.\nBy default, converts camel to dash case, e.g. `fooBar` to `foo-bar`.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 143,
                  "column": 6
                },
                "end": {
                  "line": 145,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property to convert"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Attribute name corresponding to the given property."
              }
            },
            {
              "name": "typeForProperty",
              "description": "Override point to provide a type to which to deserialize a value to\na given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 88,
                  "column": 8
                },
                "end": {
                  "line": 88,
                  "column": 40
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "createPropertiesForAttributes",
              "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 133,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 100,
              "column": 2
            },
            "end": {
              "line": 318,
              "column": 4
            }
          },
          "privacy": "public",
          "name": "Polymer.PropertyAccessors",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "mixins": [
            "Polymer.PropertiesChanged"
          ]
        },
        {
          "description": "Element mixin that provides basic template parsing and stamping, including\nthe following template-related features for stamped templates:\n\n- Declarative event listeners (`on-eventname=\"listener\"`)\n- Map of node id's to stamped node instances (`this.$.id`)\n- Nested template content caching/removal and re-installation (performance\n  optimization)",
          "summary": "Element class mixin that provides basic template parsing and stamping",
          "path": "components\\polymer\\lib\\mixins\\template-stamp.html",
          "properties": [],
          "methods": [
            {
              "name": "_stampTemplate",
              "description": "Clones the provided template content and returns a document fragment\ncontaining the cloned dom.\n\nThe template is parsed (once and memoized) using this library's\ntemplate parsing features, and provides the following value-added\nfeatures:\n* Adds declarative event listeners for `on-event=\"handler\"` attributes\n* Generates an \"id map\" for all nodes with id's under `$` on returned\n  document fragment\n* Passes template info including `content` back to templates as\n  `_templateInfo` (a performance optimization to avoid deep template\n  cloning)\n\nNote that the memoized template parsing process is destructive to the\ntemplate: attributes for bindings and declarative event listeners are\nremoved after being noted in notes, and any nested `<template>.content`\nis removed and stored in notes as well.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 415,
                  "column": 6
                },
                "end": {
                  "line": 437,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to stamp"
                }
              ],
              "return": {
                "type": "!StampedTemplate",
                "desc": "Cloned template content"
              }
            },
            {
              "name": "_addMethodEventListenerToNode",
              "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 452,
                  "column": 6
                },
                "end": {
                  "line": 457,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add listener on"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Name of method"
                },
                {
                  "name": "context",
                  "type": "*=",
                  "description": "Context the method will be called on (defaults\n  to `node`)"
                }
              ],
              "return": {
                "type": "Function",
                "desc": "Generated handler function"
              }
            },
            {
              "name": "_addEventListenerToNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 467,
                  "column": 6
                },
                "end": {
                  "line": 469,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add event listener to"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to add"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_removeEventListenerFromNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 479,
                  "column": 6
                },
                "end": {
                  "line": 481,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to remove event listener from"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to remove"
                }
              ],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [
            {
              "name": "_parseTemplate",
              "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 197,
                  "column": 6
                },
                "end": {
                  "line": 208,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to parse"
                },
                {
                  "name": "outerTemplateInfo",
                  "type": "TemplateInfo=",
                  "description": "Template metadata from the outer\n  template, for parsing nested templates"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Parsed template metadata"
              }
            },
            {
              "name": "_parseTemplateContent",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 210,
                  "column": 6
                },
                "end": {
                  "line": 212,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "templateInfo"
                },
                {
                  "name": "nodeInfo"
                }
              ]
            },
            {
              "name": "_parseTemplateNode",
              "description": "Parses template node and adds template and node metadata based on\nthe current node, and its `childNodes` and `attributes`.\n\nThis method may be overridden to add custom node or template specific\nmetadata based on this node.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 227,
                  "column": 6
                },
                "end": {
                  "line": 243,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "!TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "!NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              }
            },
            {
              "name": "_parseTemplateChildNodes",
              "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 258,
                  "column": 6
                },
                "end": {
                  "line": 295,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "root",
                  "type": "Node",
                  "description": "Root node whose `childNodes` will be parsed"
                },
                {
                  "name": "templateInfo",
                  "type": "!TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "!NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_parseTemplateNestedTemplate",
              "description": "Parses template content for the given nested `<template>`.\n\nNested template info is stored as `templateInfo` in the current node's\n`nodeInfo`. `template.content` is removed and stored in `templateInfo`.\nIt will then be the responsibility of the host to set it back to the\ntemplate and for users stamping nested templates to use the\n`_contentForTemplate` method to retrieve the content for this template\n(an optimization to avoid the cost of cloning nested template content).",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 314,
                  "column": 6
                },
                "end": {
                  "line": 321,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "HTMLTemplateElement",
                  "description": "Node to parse (a <template>)"
                },
                {
                  "name": "outerTemplateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template\n  that includes the template `node`"
                },
                {
                  "name": "nodeInfo",
                  "type": "!NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              }
            },
            {
              "name": "_parseTemplateNodeAttributes",
              "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 333,
                  "column": 6
                },
                "end": {
                  "line": 342,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              }
            },
            {
              "name": "_parseTemplateNodeAttribute",
              "description": "Parses a single template node attribute and adds node metadata to\n`nodeInfo` for attributes of interest.\n\nThis implementation adds metadata for `on-event=\"handler\"` attributes\nand `id` attributes.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 359,
                  "column": 6
                },
                "end": {
                  "line": 376,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "!TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "!NodeInfo",
                  "description": "Node metadata for current template."
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Attribute name"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Attribute value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              }
            },
            {
              "name": "_contentForTemplate",
              "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 388,
                  "column": 6
                },
                "end": {
                  "line": 391,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "HTMLTemplateElement",
                  "description": "Template to retrieve `content` for"
                }
              ],
              "return": {
                "type": "DocumentFragment",
                "desc": "Content fragment"
              }
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 2
            },
            "end": {
              "line": 487,
              "column": 4
            }
          },
          "privacy": "public",
          "name": "Polymer.TemplateStamp",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "Element class mixin that provides meta-programming for Polymer's template\nbinding and data observation (collectively, \"property effects\") system.\n\nThis mixin uses provides the following key static methods for adding\nproperty effects to an element class:\n- `addPropertyEffect`\n- `createPropertyObserver`\n- `createMethodObserver`\n- `createNotifyingProperty`\n- `createReadOnlyProperty`\n- `createReflectedProperty`\n- `createComputedProperty`\n- `bindTemplate`\n\nEach method creates one or more property accessors, along with metadata\nused by this mixin's implementation of `_propertiesChanged` to perform\nthe property effects.\n\nUnderscored versions of the above methods also exist on the element\nprototype for adding property effects on instances at runtime.\n\nNote that this mixin overrides several `PropertyAccessors` methods, in\nmany cases to maintain guarantees provided by the Polymer 1.x features;\nnotably it changes property accessors to be synchronous by default\nwhereas the default when using `PropertyAccessors` standalone is to be\nasync by default.",
          "summary": "Element class mixin that provides meta-programming for Polymer's\ntemplate binding and data observation system.",
          "path": "components\\polymer\\lib\\mixins\\property-effects.html",
          "properties": [
            {
              "name": "__dataClientsReady",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1147,
                  "column": 8
                },
                "end": {
                  "line": 1147,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            },
            {
              "name": "__dataPendingClients",
              "type": "Array",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1149,
                  "column": 8
                },
                "end": {
                  "line": 1149,
                  "column": 34
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            },
            {
              "name": "__dataToNotify",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1151,
                  "column": 8
                },
                "end": {
                  "line": 1151,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            },
            {
              "name": "__dataLinkedPaths",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1153,
                  "column": 8
                },
                "end": {
                  "line": 1153,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            },
            {
              "name": "__dataHasPaths",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1155,
                  "column": 8
                },
                "end": {
                  "line": 1155,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            },
            {
              "name": "__dataCompoundStorage",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1157,
                  "column": 8
                },
                "end": {
                  "line": 1157,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            },
            {
              "name": "__dataHost",
              "type": "Polymer_PropertyEffects",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1159,
                  "column": 8
                },
                "end": {
                  "line": 1159,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            },
            {
              "name": "__dataTemp",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1161,
                  "column": 8
                },
                "end": {
                  "line": 1161,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            },
            {
              "name": "__dataClientsInitialized",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1163,
                  "column": 8
                },
                "end": {
                  "line": 1163,
                  "column": 38
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            },
            {
              "name": "__data",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1165,
                  "column": 8
                },
                "end": {
                  "line": 1165,
                  "column": 20
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            },
            {
              "name": "__dataPending",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1167,
                  "column": 8
                },
                "end": {
                  "line": 1167,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            },
            {
              "name": "__dataOld",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1169,
                  "column": 8
                },
                "end": {
                  "line": 1169,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            },
            {
              "name": "__computeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1171,
                  "column": 8
                },
                "end": {
                  "line": 1171,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            },
            {
              "name": "__reflectEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1173,
                  "column": 8
                },
                "end": {
                  "line": 1173,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            },
            {
              "name": "__notifyEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1175,
                  "column": 8
                },
                "end": {
                  "line": 1175,
                  "column": 29
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            },
            {
              "name": "__propagateEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1177,
                  "column": 8
                },
                "end": {
                  "line": 1177,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            },
            {
              "name": "__observeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1179,
                  "column": 8
                },
                "end": {
                  "line": 1179,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            },
            {
              "name": "__readOnly",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1181,
                  "column": 8
                },
                "end": {
                  "line": 1181,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            },
            {
              "name": "__templateInfo",
              "type": "!TemplateInfo",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1183,
                  "column": 8
                },
                "end": {
                  "line": 1183,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            }
          ],
          "methods": [
            {
              "name": "_stampTemplate",
              "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2423,
                  "column": 6
                },
                "end": {
                  "line": 2448,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to stamp"
                }
              ],
              "return": {
                "type": "!StampedTemplate",
                "desc": "Cloned template content"
              }
            },
            {
              "name": "_addMethodEventListenerToNode",
              "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
              "privacy": "protected",
              "sourceRange": {
                "file": "template-stamp.html",
                "start": {
                  "line": 452,
                  "column": 6
                },
                "end": {
                  "line": 457,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add listener on"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Name of method"
                },
                {
                  "name": "context",
                  "type": "*=",
                  "description": "Context the method will be called on (defaults\n  to `node`)"
                }
              ],
              "return": {
                "type": "Function",
                "desc": "Generated handler function"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_addEventListenerToNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "template-stamp.html",
                "start": {
                  "line": 467,
                  "column": 6
                },
                "end": {
                  "line": 469,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add event listener to"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to add"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_removeEventListenerFromNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "template-stamp.html",
                "start": {
                  "line": 479,
                  "column": 6
                },
                "end": {
                  "line": 481,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to remove event listener from"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_createPropertyAccessor",
              "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 115,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_addPropertyToAttributeMap",
              "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 132,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                }
              ],
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_definePropertyAccessor",
              "description": "Overrides PropertiesChanged implementation to save existing prototype\nproperty value so that it can be reset.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-accessors.html",
                "start": {
                  "line": 288,
                  "column": 6
                },
                "end": {
                  "line": 291,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created\n\nWhen calling on a prototype, any overwritten values are saved in\n`__dataProto`, and it is up to the subclasser to decide how/when\nto set those properties back into the accessor.  When calling on an\ninstance, the overwritten value is set via `_setPendingProperty`,\nand the user should call `_invalidateProperties` or `_flushProperties`\nfor the values to take effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "ready",
              "description": "Overrides `PropertyAccessors` so that property accessor\nside effects are not enabled until after client dom is fully ready.\nAlso calls `_flushClients` callback to ensure client dom is enabled\nthat was not enabled as a result of flushing properties.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1658,
                  "column": 6
                },
                "end": {
                  "line": 1674,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_initializeProperties",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1193,
                  "column": 6
                },
                "end": {
                  "line": 1206,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_initializeInstanceProperties",
              "description": "Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n`_setProperty`'s `shouldNotify: true`.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1231,
                  "column": 6
                },
                "end": {
                  "line": 1240,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Properties to initialize on the instance"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_setProperty",
              "description": "Overrides base implementation to ensure all accessors set `shouldNotify`\nto true, for per-property notification tracking.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1513,
                  "column": 6
                },
                "end": {
                  "line": 1517,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_getProperty",
              "description": "Returns the value for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 247,
                  "column": 8
                },
                "end": {
                  "line": 249,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value for the given property"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setPendingProperty",
              "description": "Overrides the `PropertiesChanged` implementation to introduce special\ndirty check logic depending on the property & value being set:\n\n1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n   Stored in `__dataTemp`, dirty checked against `__dataTemp`\n2. Object set to simple property (e.g. 'prop': {...})\n   Stored in `__dataTemp` and `__data`, dirty checked against\n   `__dataTemp` by default implementation of `_shouldPropertyChange`\n3. Primitive value set to simple property (e.g. 'prop': 42)\n   Stored in `__data`, dirty checked against `__data`\n\nThe dirty-check is important to prevent cycles due to two-way\nnotification, but paths and objects are only dirty checked against any\nprevious value set during this turn via a \"temporary cache\" that is\ncleared when the last `_propertiesChanged` exits. This is so:\na. any cached array paths (e.g. 'array.3.prop') may be invalidated\n   due to array mutations like shift/unshift/splice; this is fine\n   since path changes are dirty-checked at user entry points like `set`\nb. dirty-checking for objects only lasts one turn to allow the user\n   to mutate the object in-place and re-set it with the same identity\n   and have all sub-properties re-propagated in a subsequent turn.\n\nThe temp cache is not necessarily sufficient to prevent invalid array\npaths, since a splice can happen during the same turn (with pathological\nuser code); we could introduce a \"fixup\" for temporarily cached array\npaths if needed: https://github.com/Polymer/polymer/issues/4227",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1473,
                  "column": 6
                },
                "end": {
                  "line": 1502,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "shouldNotify",
                  "type": "boolean=",
                  "description": "True if property should fire notification\n  event (applies only for `notify: true` properties)"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property changed"
              }
            },
            {
              "name": "_invalidateProperties",
              "description": "Overrides `PropertyAccessor`'s default async queuing of\n`_propertiesChanged`: if `__dataReady` is false (has not yet been\nmanually flushed), the function no-ops; otherwise flushes\n`_propertiesChanged` synchronously.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1528,
                  "column": 6
                },
                "end": {
                  "line": 1532,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_enableProperties",
              "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 313,
                  "column": 8
                },
                "end": {
                  "line": 322,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_flushProperties",
              "description": "Overrides superclass implementation.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1556,
                  "column": 6
                },
                "end": {
                  "line": 1560,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_shouldPropertiesChange",
              "description": "Called in `_flushProperties` to determine if `_propertiesChanged`\nshould be called. The default implementation returns true if\nproperties are pending. Override to customize when\n`_propertiesChanged` is called.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 356,
                  "column": 8
                },
                "end": {
                  "line": 358,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "true if changedProps is truthy"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertiesChanged",
              "description": "Implements `PropertyAccessors`'s properties changed callback.\n\nRuns each class of effects for the batch of changed properties in\na specific order (compute, propagate, reflect, observe, notify).",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1689,
                  "column": 6
                },
                "end": {
                  "line": 1722,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_shouldPropertyChange",
              "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 393,
                  "column": 8
                },
                "end": {
                  "line": 400,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeChangedCallback",
              "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
              "privacy": "public",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 412,
                  "column": 8
                },
                "end": {
                  "line": 419,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of attribute that changed"
                },
                {
                  "name": "old",
                  "type": "?string",
                  "description": "Old attribute value"
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "New attribute value"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_attributeToProperty",
              "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 433,
                  "column": 8
                },
                "end": {
                  "line": 440,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to deserialize."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "of the attribute."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertyToAttribute",
              "description": "Serializes a property to its associated attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 452,
                  "column": 8
                },
                "end": {
                  "line": 458,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name to reflect."
                },
                {
                  "name": "attribute",
                  "type": "string=",
                  "description": "Attribute name to reflect to."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Property value to refect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_valueToNodeAttribute",
              "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 473,
                  "column": 8
                },
                "end": {
                  "line": 480,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to set attribute to."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to serialize."
                },
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Attribute name to serialize to."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_serializeValue",
              "description": "Overrides PropertiesChanged implemention to serialize objects as JSON.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-accessors.html",
                "start": {
                  "line": 205,
                  "column": 6
                },
                "end": {
                  "line": 222,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Property value to serialize."
                }
              ],
              "return": {
                "type": "(string | undefined)",
                "desc": "String serialized from the provided property value."
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_deserializeValue",
              "description": "Converts a string to a typed JavaScript value.\n\nThis method is called by Polymer when reading HTML attribute values to\nJS properties.  Users may override this method on Polymer element\nprototypes to provide deserialization for custom `type`s.  Note,\nthe `type` argument is the value of the `type` field provided in the\n`properties` configuration object for a given property, and is\nby convention the constructor for the type to deserialize.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-accessors.html",
                "start": {
                  "line": 239,
                  "column": 6
                },
                "end": {
                  "line": 270,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Attribute value to deserialize."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "Type to deserialize the string to."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Typed value deserialized from the provided string."
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_initializeProtoProperties",
              "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1217,
                  "column": 6
                },
                "end": {
                  "line": 1221,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Properties to initialize on the prototype"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_ensureAttribute",
              "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-accessors.html",
                "start": {
                  "line": 192,
                  "column": 6
                },
                "end": {
                  "line": 197,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to ensure is set."
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "of the attribute."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_hasAccessor",
              "description": "Returns true if this library created an accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-accessors.html",
                "start": {
                  "line": 299,
                  "column": 6
                },
                "end": {
                  "line": 301,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if an accessor was created"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_isPropertyPending",
              "description": "Returns true if the specified property has a pending change.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-accessors.html",
                "start": {
                  "line": 310,
                  "column": 6
                },
                "end": {
                  "line": 312,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if property has a pending change"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_addPropertyEffect",
              "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1255,
                  "column": 6
                },
                "end": {
                  "line": 1263,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_removePropertyEffect",
              "description": "Removes the given property effect.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1273,
                  "column": 6
                },
                "end": {
                  "line": 1279,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property the effect was associated with"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object to remove"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_hasPropertyEffect",
              "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1290,
                  "column": 6
                },
                "end": {
                  "line": 1293,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "type",
                  "type": "string=",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              }
            },
            {
              "name": "_hasReadOnlyEffect",
              "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1303,
                  "column": 6
                },
                "end": {
                  "line": 1305,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              }
            },
            {
              "name": "_hasNotifyEffect",
              "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1315,
                  "column": 6
                },
                "end": {
                  "line": 1317,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              }
            },
            {
              "name": "_hasReflectEffect",
              "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1327,
                  "column": 6
                },
                "end": {
                  "line": 1329,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              }
            },
            {
              "name": "_hasComputedEffect",
              "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1339,
                  "column": 6
                },
                "end": {
                  "line": 1341,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              }
            },
            {
              "name": "_setPendingPropertyOrPath",
              "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1373,
                  "column": 6
                },
                "end": {
                  "line": 1405,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(number | string)>)",
                  "description": "Path to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "shouldNotify",
                  "type": "boolean=",
                  "description": "Set to true if this change should\n cause a property notification event dispatch"
                },
                {
                  "name": "isPathNotification",
                  "type": "boolean=",
                  "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
              }
            },
            {
              "name": "_setUnmanagedPropertyToNode",
              "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1428,
                  "column": 6
                },
                "end": {
                  "line": 1436,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "The node to set a property on"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "The property to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "The value to set"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_enqueueClient",
              "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1543,
                  "column": 6
                },
                "end": {
                  "line": 1548,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "client",
                  "type": "Object",
                  "description": "PropertyEffects client to enqueue"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_flushClients",
              "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1569,
                  "column": 6
                },
                "end": {
                  "line": 1580,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "__enableOrFlushClients",
              "description": "(c) the stamped dom enables.",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1594,
                  "column": 6
                },
                "end": {
                  "line": 1607,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_readyClients",
              "description": "Perform any initial setup on client dom. Called before the first\n`_flushProperties` call on client dom and before any element\nobservers are called.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1617,
                  "column": 6
                },
                "end": {
                  "line": 1619,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "setProperties",
              "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1636,
                  "column": 6
                },
                "end": {
                  "line": 1647,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
                },
                {
                  "name": "setReadOnly",
                  "type": "boolean=",
                  "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_propagatePropertyChanges",
              "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1734,
                  "column": 6
                },
                "end": {
                  "line": 1744,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "changedProps",
                  "type": "Object",
                  "description": "Bag of changed properties"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "linkPaths",
              "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1755,
                  "column": 6
                },
                "end": {
                  "line": 1760,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "to",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Target path to link."
                },
                {
                  "name": "from",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Source path to link."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "unlinkPaths",
              "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1772,
                  "column": 6
                },
                "end": {
                  "line": 1777,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Target path to unlink."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "notifySplices",
              "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1809,
                  "column": 6
                },
                "end": {
                  "line": 1813,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "splices",
                  "type": "Array",
                  "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "get",
              "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1834,
                  "column": 6
                },
                "end": {
                  "line": 1836,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
              }
            },
            {
              "name": "set",
              "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1859,
                  "column": 6
                },
                "end": {
                  "line": 1869,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set at the specified path."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "push",
              "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1885,
                  "column": 6
                },
                "end": {
                  "line": 1894,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to push onto array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              }
            },
            {
              "name": "pop",
              "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1909,
                  "column": 6
                },
                "end": {
                  "line": 1918,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              }
            },
            {
              "name": "splice",
              "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1937,
                  "column": 6
                },
                "end": {
                  "line": 1974,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "start",
                  "type": "number",
                  "description": "Index from which to start removing/inserting."
                },
                {
                  "name": "deleteCount",
                  "type": "number",
                  "description": "Number of items to remove."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert into array."
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Array of removed items."
              }
            },
            {
              "name": "shift",
              "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1989,
                  "column": 6
                },
                "end": {
                  "line": 1998,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              }
            },
            {
              "name": "unshift",
              "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2014,
                  "column": 6
                },
                "end": {
                  "line": 2022,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert info array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              }
            },
            {
              "name": "notifyPath",
              "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2037,
                  "column": 6
                },
                "end": {
                  "line": 2054,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Value at the path (optional)."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_createReadOnlyProperty",
              "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2067,
                  "column": 6
                },
                "end": {
                  "line": 2074,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_createPropertyObserver",
              "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2088,
                  "column": 6
                },
                "end": {
                  "line": 2098,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string | function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_createMethodObserver",
              "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2111,
                  "column": 6
                },
                "end": {
                  "line": 2117,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_createNotifyingProperty",
              "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2128,
                  "column": 6
                },
                "end": {
                  "line": 2136,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_createReflectedProperty",
              "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2147,
                  "column": 6
                },
                "end": {
                  "line": 2160,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_createComputedProperty",
              "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2174,
                  "column": 6
                },
                "end": {
                  "line": 2180,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_bindTemplate",
              "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2357,
                  "column": 6
                },
                "end": {
                  "line": 2380,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                },
                {
                  "name": "instanceBinding",
                  "type": "boolean=",
                  "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
              }
            },
            {
              "name": "_removeBoundDom",
              "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2459,
                  "column": 6
                },
                "end": {
                  "line": 2480,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "!StampedTemplate",
                  "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
                }
              ],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [
            {
              "name": "_parseTemplate",
              "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "template-stamp.html",
                "start": {
                  "line": 197,
                  "column": 6
                },
                "end": {
                  "line": 208,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to parse"
                },
                {
                  "name": "outerTemplateInfo",
                  "type": "TemplateInfo=",
                  "description": "Template metadata from the outer\n  template, for parsing nested templates"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Parsed template metadata"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateContent",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "template-stamp.html",
                "start": {
                  "line": 210,
                  "column": 6
                },
                "end": {
                  "line": 212,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "templateInfo"
                },
                {
                  "name": "nodeInfo"
                }
              ],
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNode",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2499,
                  "column": 6
                },
                "end": {
                  "line": 2513,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              }
            },
            {
              "name": "_parseTemplateChildNodes",
              "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
              "privacy": "protected",
              "sourceRange": {
                "file": "template-stamp.html",
                "start": {
                  "line": 258,
                  "column": 6
                },
                "end": {
                  "line": 295,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "root",
                  "type": "Node",
                  "description": "Root node whose `childNodes` will be parsed"
                },
                {
                  "name": "templateInfo",
                  "type": "!TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "!NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNestedTemplate",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2591,
                  "column": 6
                },
                "end": {
                  "line": 2601,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              }
            },
            {
              "name": "_parseTemplateNodeAttributes",
              "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
              "privacy": "protected",
              "sourceRange": {
                "file": "template-stamp.html",
                "start": {
                  "line": 333,
                  "column": 6
                },
                "end": {
                  "line": 342,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNodeAttribute",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2534,
                  "column": 6
                },
                "end": {
                  "line": 2575,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Attribute name"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Attribute value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              }
            },
            {
              "name": "_contentForTemplate",
              "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "template-stamp.html",
                "start": {
                  "line": 388,
                  "column": 6
                },
                "end": {
                  "line": 391,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "HTMLTemplateElement",
                  "description": "Template to retrieve `content` for"
                }
              ],
              "return": {
                "type": "DocumentFragment",
                "desc": "Content fragment"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "createProperties",
              "description": "Creates property accessors for the given property names.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 58,
                  "column": 8
                },
                "end": {
                  "line": 66,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "!Object",
                  "description": "Object whose keys are names of accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeNameForProperty",
              "description": "Returns an attribute name that corresponds to the given property.\nBy default, converts camel to dash case, e.g. `fooBar` to `foo-bar`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-accessors.html",
                "start": {
                  "line": 143,
                  "column": 6
                },
                "end": {
                  "line": 145,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property to convert"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Attribute name corresponding to the given property."
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "typeForProperty",
              "description": "Override point to provide a type to which to deserialize a value to\na given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 88,
                  "column": 8
                },
                "end": {
                  "line": 88,
                  "column": 40
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "createPropertiesForAttributes",
              "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
              "privacy": "public",
              "sourceRange": {
                "file": "property-accessors.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 133,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "addPropertyEffect",
              "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2220,
                  "column": 6
                },
                "end": {
                  "line": 2222,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "createPropertyObserver",
              "description": "Creates a single-property observer for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2234,
                  "column": 6
                },
                "end": {
                  "line": 2236,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string | function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "createMethodObserver",
              "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2251,
                  "column": 6
                },
                "end": {
                  "line": 2253,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating"
                }
              ],
              "return": {
                "type": "void",
                "desc": "whether method names should be included as a dependency to the effect."
              }
            },
            {
              "name": "createNotifyingProperty",
              "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2263,
                  "column": 6
                },
                "end": {
                  "line": 2265,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "createReadOnlyProperty",
              "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2283,
                  "column": 6
                },
                "end": {
                  "line": 2285,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "createReflectedProperty",
              "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2295,
                  "column": 6
                },
                "end": {
                  "line": 2297,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "createComputedProperty",
              "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2313,
                  "column": 6
                },
                "end": {
                  "line": 2315,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "bindTemplate",
              "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2329,
                  "column": 6
                },
                "end": {
                  "line": 2331,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object"
              }
            },
            {
              "name": "_addTemplatePropertyEffect",
              "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2395,
                  "column": 6
                },
                "end": {
                  "line": 2401,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Template metadata to add effect to"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_parseBindings",
              "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2636,
                  "column": 6
                },
                "end": {
                  "line": 2701,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "text",
                  "type": "string",
                  "description": "Text to parse from attribute or textContent"
                },
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Current template metadata"
                }
              ],
              "return": {
                "type": "Array.<!BindingPart>",
                "desc": "Array of binding part metadata"
              }
            },
            {
              "name": "_evaluateBinding",
              "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2717,
                  "column": 6
                },
                "end": {
                  "line": 2734,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "inst",
                  "type": "this",
                  "description": "Element that should be used as scope for\n  binding dependencies"
                },
                {
                  "name": "part",
                  "type": "BindingPart",
                  "description": "Binding part metadata"
                },
                {
                  "name": "path",
                  "type": "string",
                  "description": "Property/path that triggered this effect"
                },
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of current property changes"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value the binding part evaluated to"
              }
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1116,
              "column": 2
            },
            "end": {
              "line": 2742,
              "column": 4
            }
          },
          "privacy": "public",
          "name": "Polymer.PropertyEffects",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "mixins": [
            "Polymer.TemplateStamp",
            "Polymer.PropertyAccessors"
          ]
        },
        {
          "description": "Mixin that provides a minimal starting point to using the PropertiesChanged\nmixin by providing a mechanism to declare properties in a static\ngetter (e.g. static get properties() { return { foo: String } }). Changes\nare reported via the `_propertiesChanged` method.\n\nThis mixin provides no specific support for rendering. Users are expected\nto create a ShadowRoot and put content into it and update it in whatever\nway makes sense. This can be done in reaction to properties changing by\nimplementing `_propertiesChanged`.",
          "summary": "Mixin that provides a minimal starting point for using\nthe PropertiesChanged mixin by providing a declarative `properties` object.",
          "path": "components\\polymer\\lib\\mixins\\properties-mixin.html",
          "properties": [],
          "methods": [
            {
              "name": "_createPropertyAccessor",
              "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 115,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_addPropertyToAttributeMap",
              "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 132,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                }
              ],
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_definePropertyAccessor",
              "description": "Defines a property accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 140,
                  "column": 9
                },
                "end": {
                  "line": 153,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "ready",
              "description": "Lifecycle callback called when properties are enabled via\n`_enableProperties`.\n\nUsers may override this function to implement behavior that is\ndependent on the element having its property data initialized, e.g.\nfrom defaults (initialized from `constructor`, `_initializeProperties`),\n`attributeChangedCallback`, or values propagated from host e.g. via\nbindings.  `super.ready()` must be called to ensure the data system\nbecomes enabled.",
              "privacy": "public",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 182,
                  "column": 8
                },
                "end": {
                  "line": 185,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_initializeProperties",
              "description": "Overrides `PropertiesChanged` method and adds a call to\n`finalize` which lazily configures the element's property accessors.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 191,
                  "column": 6
                },
                "end": {
                  "line": 194,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_initializeInstanceProperties",
              "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 222,
                  "column": 8
                },
                "end": {
                  "line": 224,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of property values that were overwritten\n  when creating property accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setProperty",
              "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 235,
                  "column": 8
                },
                "end": {
                  "line": 239,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_getProperty",
              "description": "Returns the value for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 247,
                  "column": 8
                },
                "end": {
                  "line": 249,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value for the given property"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setPendingProperty",
              "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 264,
                  "column": 8
                },
                "end": {
                  "line": 280,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "ext",
                  "type": "boolean=",
                  "description": "Not used here; affordance for closure"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property changed"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_invalidateProperties",
              "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 290,
                  "column": 8
                },
                "end": {
                  "line": 300,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_enableProperties",
              "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 313,
                  "column": 8
                },
                "end": {
                  "line": 322,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_flushProperties",
              "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 333,
                  "column": 8
                },
                "end": {
                  "line": 342,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertiesChange",
              "description": "Called in `_flushProperties` to determine if `_propertiesChanged`\nshould be called. The default implementation returns true if\nproperties are pending. Override to customize when\n`_propertiesChanged` is called.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 356,
                  "column": 8
                },
                "end": {
                  "line": 358,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "true if changedProps is truthy"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertiesChanged",
              "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 372,
                  "column": 8
                },
                "end": {
                  "line": 373,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertyChange",
              "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 393,
                  "column": 8
                },
                "end": {
                  "line": 400,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeChangedCallback",
              "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
              "privacy": "public",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 412,
                  "column": 8
                },
                "end": {
                  "line": 419,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of attribute that changed"
                },
                {
                  "name": "old",
                  "type": "?string",
                  "description": "Old attribute value"
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "New attribute value"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_attributeToProperty",
              "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 433,
                  "column": 8
                },
                "end": {
                  "line": 440,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to deserialize."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "of the attribute."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertyToAttribute",
              "description": "Serializes a property to its associated attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 452,
                  "column": 8
                },
                "end": {
                  "line": 458,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name to reflect."
                },
                {
                  "name": "attribute",
                  "type": "string=",
                  "description": "Attribute name to reflect to."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Property value to refect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_valueToNodeAttribute",
              "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 473,
                  "column": 8
                },
                "end": {
                  "line": 480,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to set attribute to."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to serialize."
                },
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Attribute name to serialize to."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_serializeValue",
              "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 493,
                  "column": 8
                },
                "end": {
                  "line": 500,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Property value to serialize."
                }
              ],
              "return": {
                "type": "(string | undefined)",
                "desc": "String serialized from the provided\nproperty  value."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_deserializeValue",
              "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 514,
                  "column": 8
                },
                "end": {
                  "line": 523,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Value to deserialize."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "Type to deserialize the string to."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Typed value deserialized from the provided string."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "connectedCallback",
              "description": "Called when the element is added to a document.\nCalls `_enableProperties` to turn on property system from\n`PropertiesChanged`.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 203,
                  "column": 6
                },
                "end": {
                  "line": 208,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "disconnectedCallback",
              "description": "Called when the element is removed from a document",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 215,
                  "column": 6
                },
                "end": {
                  "line": 219,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [
            {
              "name": "createProperties",
              "description": "Creates property accessors for the given property names.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 58,
                  "column": 8
                },
                "end": {
                  "line": 66,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "!Object",
                  "description": "Object whose keys are names of accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeNameForProperty",
              "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property to convert"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Attribute name corresponding to the given property."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "typeForProperty",
              "description": "Overrides `PropertiesChanged` method to return type specified in the\nstatic `properties` object for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 183,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Type to which to deserialize attribute"
              }
            },
            {
              "name": "finalize",
              "description": "Finalizes an element definition, including ensuring any super classes\nare also finalized. This includes ensuring property\naccessors exist on the element prototype. This method calls\n`_finalizeClass` to finalize each constructor in the prototype chain.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 137,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_finalizeClass",
              "description": "Finalize an element class. This includes ensuring property\naccessors exist on the element prototype. This method is called by\n`finalize` and finalizes the class constructor.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 146,
                  "column": 6
                },
                "end": {
                  "line": 151,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 3
            },
            "end": {
              "line": 225,
              "column": 4
            }
          },
          "privacy": "public",
          "name": "Polymer.PropertiesMixin",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "mixins": [
            "Polymer.PropertiesChanged"
          ]
        },
        {
          "description": "Element class mixin that provides the core API for Polymer's meta-programming\nfeatures including template stamping, data-binding, attribute deserialization,\nand property change observation.\n\nSubclassers may provide the following static getters to return metadata\nused to configure Polymer's features for the class:\n\n- `static get is()`: When the template is provided via a `dom-module`,\n  users should return the `dom-module` id from a static `is` getter.  If\n  no template is needed or the template is provided directly via the\n  `template` getter, there is no need to define `is` for the element.\n\n- `static get template()`: Users may provide the template directly (as\n  opposed to via `dom-module`) by implementing a static `template` getter.\n  The getter may return an `HTMLTemplateElement` or a string, which will\n  automatically be parsed into a template.\n\n- `static get properties()`: Should return an object describing\n  property-related metadata used by Polymer features (key: property name\n  value: object containing property metadata). Valid keys in per-property\n  metadata include:\n  - `type` (String|Number|Object|Array|...): Used by\n    `attributeChangedCallback` to determine how string-based attributes\n    are deserialized to JavaScript property values.\n  - `notify` (boolean): Causes a change in the property to fire a\n    non-bubbling event called `<property>-changed`. Elements that have\n    enabled two-way binding to the property use this event to observe changes.\n  - `readOnly` (boolean): Creates a getter for the property, but no setter.\n    To set a read-only property, use the private setter method\n    `_setProperty(property, value)`.\n  - `observer` (string): Observer method name that will be called when\n    the property changes. The arguments of the method are\n    `(value, previousValue)`.\n  - `computed` (string): String describing method and dependent properties\n    for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).\n    Computed properties are read-only by default and can only be changed\n    via the return value of the computing method.\n\n- `static get observers()`: Array of strings describing multi-property\n  observer methods and their dependent properties (e.g.\n  `'observeABC(a, b, c)'`).\n\nThe base class provides default implementations for the following standard\ncustom element lifecycle callbacks; users may override these, but should\ncall the super method to ensure\n- `constructor`: Run when the element is created or upgraded\n- `connectedCallback`: Run each time the element is connected to the\n  document\n- `disconnectedCallback`: Run each time the element is disconnected from\n  the document\n- `attributeChangedCallback`: Run each time an attribute in\n  `observedAttributes` is set or removed (note: this element's default\n  `observedAttributes` implementation will automatically return an array\n  of dash-cased attributes based on `properties`)",
          "summary": "",
          "path": "components\\polymer\\lib\\mixins\\element-mixin.html",
          "properties": [
            {
              "name": "__dataClientsReady",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1147,
                  "column": 8
                },
                "end": {
                  "line": 1147,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPendingClients",
              "type": "Array",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1149,
                  "column": 8
                },
                "end": {
                  "line": 1149,
                  "column": 34
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataToNotify",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1151,
                  "column": 8
                },
                "end": {
                  "line": 1151,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataLinkedPaths",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1153,
                  "column": 8
                },
                "end": {
                  "line": 1153,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHasPaths",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1155,
                  "column": 8
                },
                "end": {
                  "line": 1155,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataCompoundStorage",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1157,
                  "column": 8
                },
                "end": {
                  "line": 1157,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHost",
              "type": "Polymer_PropertyEffects",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1159,
                  "column": 8
                },
                "end": {
                  "line": 1159,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataTemp",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1161,
                  "column": 8
                },
                "end": {
                  "line": 1161,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataClientsInitialized",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1163,
                  "column": 8
                },
                "end": {
                  "line": 1163,
                  "column": 38
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__data",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1165,
                  "column": 8
                },
                "end": {
                  "line": 1165,
                  "column": 20
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPending",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1167,
                  "column": 8
                },
                "end": {
                  "line": 1167,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataOld",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1169,
                  "column": 8
                },
                "end": {
                  "line": 1169,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__computeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1171,
                  "column": 8
                },
                "end": {
                  "line": 1171,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__reflectEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1173,
                  "column": 8
                },
                "end": {
                  "line": 1173,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__notifyEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1175,
                  "column": 8
                },
                "end": {
                  "line": 1175,
                  "column": 29
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__propagateEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1177,
                  "column": 8
                },
                "end": {
                  "line": 1177,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__observeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1179,
                  "column": 8
                },
                "end": {
                  "line": 1179,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__readOnly",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1181,
                  "column": 8
                },
                "end": {
                  "line": 1181,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__templateInfo",
              "type": "!TemplateInfo",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1183,
                  "column": 8
                },
                "end": {
                  "line": 1183,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_template",
              "type": "HTMLTemplateElement",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 421,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            },
            {
              "name": "_importPath",
              "type": "string",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 423,
                  "column": 8
                },
                "end": {
                  "line": 423,
                  "column": 25
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            },
            {
              "name": "rootPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 425,
                  "column": 8
                },
                "end": {
                  "line": 425,
                  "column": 22
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            },
            {
              "name": "importPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 427,
                  "column": 8
                },
                "end": {
                  "line": 427,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            },
            {
              "name": "root",
              "type": "(StampedTemplate | HTMLElement | ShadowRoot)",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 429,
                  "column": 8
                },
                "end": {
                  "line": 429,
                  "column": 18
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            },
            {
              "name": "$",
              "type": "!Object.<string, !Element>",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 431,
                  "column": 8
                },
                "end": {
                  "line": 431,
                  "column": 15
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            }
          ],
          "methods": [
            {
              "name": "_stampTemplate",
              "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2423,
                  "column": 6
                },
                "end": {
                  "line": 2448,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to stamp"
                }
              ],
              "return": {
                "type": "!StampedTemplate",
                "desc": "Cloned template content"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addMethodEventListenerToNode",
              "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
              "privacy": "protected",
              "sourceRange": {
                "file": "template-stamp.html",
                "start": {
                  "line": 452,
                  "column": 6
                },
                "end": {
                  "line": 457,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add listener on"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Name of method"
                },
                {
                  "name": "context",
                  "type": "*=",
                  "description": "Context the method will be called on (defaults\n  to `node`)"
                }
              ],
              "return": {
                "type": "Function",
                "desc": "Generated handler function"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_addEventListenerToNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "template-stamp.html",
                "start": {
                  "line": 467,
                  "column": 6
                },
                "end": {
                  "line": 469,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add event listener to"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to add"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_removeEventListenerFromNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "template-stamp.html",
                "start": {
                  "line": 479,
                  "column": 6
                },
                "end": {
                  "line": 481,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to remove event listener from"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_createPropertyAccessor",
              "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 115,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_addPropertyToAttributeMap",
              "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 132,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                }
              ],
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_definePropertyAccessor",
              "description": "Defines a property accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 140,
                  "column": 9
                },
                "end": {
                  "line": 153,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "ready",
              "description": "Stamps the element template.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 540,
                  "column": 6
                },
                "end": {
                  "line": 546,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_initializeProperties",
              "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 446,
                  "column": 6
                },
                "end": {
                  "line": 480,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_initializeInstanceProperties",
              "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 222,
                  "column": 8
                },
                "end": {
                  "line": 224,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of property values that were overwritten\n  when creating property accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setProperty",
              "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 235,
                  "column": 8
                },
                "end": {
                  "line": 239,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_getProperty",
              "description": "Returns the value for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 247,
                  "column": 8
                },
                "end": {
                  "line": 249,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value for the given property"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setPendingProperty",
              "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 264,
                  "column": 8
                },
                "end": {
                  "line": 280,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "ext",
                  "type": "boolean=",
                  "description": "Not used here; affordance for closure"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property changed"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_invalidateProperties",
              "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 290,
                  "column": 8
                },
                "end": {
                  "line": 300,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_enableProperties",
              "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 313,
                  "column": 8
                },
                "end": {
                  "line": 322,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_flushProperties",
              "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 333,
                  "column": 8
                },
                "end": {
                  "line": 342,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertiesChange",
              "description": "Called in `_flushProperties` to determine if `_propertiesChanged`\nshould be called. The default implementation returns true if\nproperties are pending. Override to customize when\n`_propertiesChanged` is called.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 356,
                  "column": 8
                },
                "end": {
                  "line": 358,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "true if changedProps is truthy"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertiesChanged",
              "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 372,
                  "column": 8
                },
                "end": {
                  "line": 373,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertyChange",
              "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 393,
                  "column": 8
                },
                "end": {
                  "line": 400,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeChangedCallback",
              "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
              "privacy": "public",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 412,
                  "column": 8
                },
                "end": {
                  "line": 419,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of attribute that changed"
                },
                {
                  "name": "old",
                  "type": "?string",
                  "description": "Old attribute value"
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "New attribute value"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_attributeToProperty",
              "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 433,
                  "column": 8
                },
                "end": {
                  "line": 440,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to deserialize."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "of the attribute."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertyToAttribute",
              "description": "Serializes a property to its associated attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 452,
                  "column": 8
                },
                "end": {
                  "line": 458,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name to reflect."
                },
                {
                  "name": "attribute",
                  "type": "string=",
                  "description": "Attribute name to reflect to."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Property value to refect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_valueToNodeAttribute",
              "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 473,
                  "column": 8
                },
                "end": {
                  "line": 480,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to set attribute to."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to serialize."
                },
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Attribute name to serialize to."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_serializeValue",
              "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 493,
                  "column": 8
                },
                "end": {
                  "line": 500,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Property value to serialize."
                }
              ],
              "return": {
                "type": "(string | undefined)",
                "desc": "String serialized from the provided\nproperty  value."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_deserializeValue",
              "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 514,
                  "column": 8
                },
                "end": {
                  "line": 523,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Value to deserialize."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "Type to deserialize the string to."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Typed value deserialized from the provided string."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_initializeProtoProperties",
              "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1217,
                  "column": 6
                },
                "end": {
                  "line": 1221,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Properties to initialize on the prototype"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_ensureAttribute",
              "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-accessors.html",
                "start": {
                  "line": 192,
                  "column": 6
                },
                "end": {
                  "line": 197,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to ensure is set."
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "of the attribute."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_hasAccessor",
              "description": "Returns true if this library created an accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-accessors.html",
                "start": {
                  "line": 299,
                  "column": 6
                },
                "end": {
                  "line": 301,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if an accessor was created"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_isPropertyPending",
              "description": "Returns true if the specified property has a pending change.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-accessors.html",
                "start": {
                  "line": 310,
                  "column": 6
                },
                "end": {
                  "line": 312,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if property has a pending change"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_addPropertyEffect",
              "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1255,
                  "column": 6
                },
                "end": {
                  "line": 1263,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removePropertyEffect",
              "description": "Removes the given property effect.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1273,
                  "column": 6
                },
                "end": {
                  "line": 1279,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property the effect was associated with"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasPropertyEffect",
              "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1290,
                  "column": 6
                },
                "end": {
                  "line": 1293,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "type",
                  "type": "string=",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReadOnlyEffect",
              "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1303,
                  "column": 6
                },
                "end": {
                  "line": 1305,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasNotifyEffect",
              "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1315,
                  "column": 6
                },
                "end": {
                  "line": 1317,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReflectEffect",
              "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1327,
                  "column": 6
                },
                "end": {
                  "line": 1329,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasComputedEffect",
              "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1339,
                  "column": 6
                },
                "end": {
                  "line": 1341,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setPendingPropertyOrPath",
              "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1373,
                  "column": 6
                },
                "end": {
                  "line": 1405,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(number | string)>)",
                  "description": "Path to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "shouldNotify",
                  "type": "boolean=",
                  "description": "Set to true if this change should\n cause a property notification event dispatch"
                },
                {
                  "name": "isPathNotification",
                  "type": "boolean=",
                  "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setUnmanagedPropertyToNode",
              "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1428,
                  "column": 6
                },
                "end": {
                  "line": 1436,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "The node to set a property on"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "The property to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "The value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_enqueueClient",
              "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1543,
                  "column": 6
                },
                "end": {
                  "line": 1548,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "client",
                  "type": "Object",
                  "description": "PropertyEffects client to enqueue"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_flushClients",
              "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1569,
                  "column": 6
                },
                "end": {
                  "line": 1580,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__enableOrFlushClients",
              "description": "(c) the stamped dom enables.",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1594,
                  "column": 6
                },
                "end": {
                  "line": 1607,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_readyClients",
              "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 558,
                  "column": 6
                },
                "end": {
                  "line": 567,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "setProperties",
              "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
              "privacy": "public",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1636,
                  "column": 6
                },
                "end": {
                  "line": 1647,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
                },
                {
                  "name": "setReadOnly",
                  "type": "boolean=",
                  "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_propagatePropertyChanges",
              "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1734,
                  "column": 6
                },
                "end": {
                  "line": 1744,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "changedProps",
                  "type": "Object",
                  "description": "Bag of changed properties"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "linkPaths",
              "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
              "privacy": "public",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1755,
                  "column": 6
                },
                "end": {
                  "line": 1760,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "to",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Target path to link."
                },
                {
                  "name": "from",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Source path to link."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unlinkPaths",
              "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
              "privacy": "public",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1772,
                  "column": 6
                },
                "end": {
                  "line": 1777,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Target path to unlink."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifySplices",
              "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
              "privacy": "public",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1809,
                  "column": 6
                },
                "end": {
                  "line": 1813,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "splices",
                  "type": "Array",
                  "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "get",
              "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
              "privacy": "public",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1834,
                  "column": 6
                },
                "end": {
                  "line": 1836,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "set",
              "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
              "privacy": "public",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1859,
                  "column": 6
                },
                "end": {
                  "line": 1869,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set at the specified path."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "push",
              "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1885,
                  "column": 6
                },
                "end": {
                  "line": 1894,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to push onto array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "pop",
              "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1909,
                  "column": 6
                },
                "end": {
                  "line": 1918,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "splice",
              "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1937,
                  "column": 6
                },
                "end": {
                  "line": 1974,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "start",
                  "type": "number",
                  "description": "Index from which to start removing/inserting."
                },
                {
                  "name": "deleteCount",
                  "type": "number",
                  "description": "Number of items to remove."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert into array."
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Array of removed items."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "shift",
              "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1989,
                  "column": 6
                },
                "end": {
                  "line": 1998,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unshift",
              "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2014,
                  "column": 6
                },
                "end": {
                  "line": 2022,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert info array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifyPath",
              "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
              "privacy": "public",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2037,
                  "column": 6
                },
                "end": {
                  "line": 2054,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Value at the path (optional)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReadOnlyProperty",
              "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2067,
                  "column": 6
                },
                "end": {
                  "line": 2074,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createPropertyObserver",
              "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2088,
                  "column": 6
                },
                "end": {
                  "line": 2098,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string | function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createMethodObserver",
              "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2111,
                  "column": 6
                },
                "end": {
                  "line": 2117,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createNotifyingProperty",
              "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2128,
                  "column": 6
                },
                "end": {
                  "line": 2136,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReflectedProperty",
              "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2147,
                  "column": 6
                },
                "end": {
                  "line": 2160,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createComputedProperty",
              "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2174,
                  "column": 6
                },
                "end": {
                  "line": 2180,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_bindTemplate",
              "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2357,
                  "column": 6
                },
                "end": {
                  "line": 2380,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                },
                {
                  "name": "instanceBinding",
                  "type": "boolean=",
                  "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removeBoundDom",
              "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2459,
                  "column": 6
                },
                "end": {
                  "line": 2480,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "!StampedTemplate",
                  "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "connectedCallback",
              "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 527,
                  "column": 6
                },
                "end": {
                  "line": 532,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "disconnectedCallback",
              "description": "Called when the element is removed from a document",
              "privacy": "public",
              "sourceRange": {
                "file": "properties-mixin.html",
                "start": {
                  "line": 215,
                  "column": 6
                },
                "end": {
                  "line": 219,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_attachDom",
              "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 581,
                  "column": 6
                },
                "end": {
                  "line": 597,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "StampedTemplate",
                  "description": "to attach to the element."
                }
              ],
              "return": {
                "type": "ShadowRoot",
                "desc": "node to which the dom has been attached."
              }
            },
            {
              "name": "updateStyles",
              "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.\n\nNote: This function does not support updating CSS mixins.\nYou can not dynamically change the value of an `@apply`.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 620,
                  "column": 6
                },
                "end": {
                  "line": 624,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "properties",
                  "type": "Object=",
                  "description": "Bag of custom property key/values to\n  apply to this element."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "resolveUrl",
              "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 641,
                  "column": 6
                },
                "end": {
                  "line": 646,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "url",
                  "type": "string",
                  "description": "URL to resolve."
                },
                {
                  "name": "base",
                  "type": "string=",
                  "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Rewritten URL relative to base"
              }
            }
          ],
          "staticMethods": [
            {
              "name": "_parseTemplate",
              "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "template-stamp.html",
                "start": {
                  "line": 197,
                  "column": 6
                },
                "end": {
                  "line": 208,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to parse"
                },
                {
                  "name": "outerTemplateInfo",
                  "type": "TemplateInfo=",
                  "description": "Template metadata from the outer\n  template, for parsing nested templates"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Parsed template metadata"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateContent",
              "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 657,
                  "column": 6
                },
                "end": {
                  "line": 660,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "templateInfo"
                },
                {
                  "name": "nodeInfo"
                }
              ]
            },
            {
              "name": "_parseTemplateNode",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2499,
                  "column": 6
                },
                "end": {
                  "line": 2513,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateChildNodes",
              "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
              "privacy": "protected",
              "sourceRange": {
                "file": "template-stamp.html",
                "start": {
                  "line": 258,
                  "column": 6
                },
                "end": {
                  "line": 295,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "root",
                  "type": "Node",
                  "description": "Root node whose `childNodes` will be parsed"
                },
                {
                  "name": "templateInfo",
                  "type": "!TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "!NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNestedTemplate",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2591,
                  "column": 6
                },
                "end": {
                  "line": 2601,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateNodeAttributes",
              "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
              "privacy": "protected",
              "sourceRange": {
                "file": "template-stamp.html",
                "start": {
                  "line": 333,
                  "column": 6
                },
                "end": {
                  "line": 342,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNodeAttribute",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2534,
                  "column": 6
                },
                "end": {
                  "line": 2575,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Attribute name"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Attribute value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_contentForTemplate",
              "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "template-stamp.html",
                "start": {
                  "line": 388,
                  "column": 6
                },
                "end": {
                  "line": 391,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "HTMLTemplateElement",
                  "description": "Template to retrieve `content` for"
                }
              ],
              "return": {
                "type": "DocumentFragment",
                "desc": "Content fragment"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "createProperties",
              "description": "Override of PropertiesChanged createProperties to create accessors\nand property effects for all of the properties.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 325,
                  "column": 7
                },
                "end": {
                  "line": 329,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "attributeNameForProperty",
              "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property to convert"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Attribute name corresponding to the given property."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "typeForProperty",
              "description": "Overrides `PropertiesChanged` method to return type specified in the\nstatic `properties` object for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-mixin.html",
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 183,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Type to which to deserialize attribute"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "createPropertiesForAttributes",
              "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
              "privacy": "public",
              "sourceRange": {
                "file": "property-accessors.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 133,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "addPropertyEffect",
              "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2220,
                  "column": 6
                },
                "end": {
                  "line": 2222,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createPropertyObserver",
              "description": "Creates a single-property observer for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2234,
                  "column": 6
                },
                "end": {
                  "line": 2236,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string | function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createMethodObserver",
              "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2251,
                  "column": 6
                },
                "end": {
                  "line": 2253,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating"
                }
              ],
              "return": {
                "type": "void",
                "desc": "whether method names should be included as a dependency to the effect."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createNotifyingProperty",
              "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2263,
                  "column": 6
                },
                "end": {
                  "line": 2265,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReadOnlyProperty",
              "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2283,
                  "column": 6
                },
                "end": {
                  "line": 2285,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReflectedProperty",
              "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2295,
                  "column": 6
                },
                "end": {
                  "line": 2297,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createComputedProperty",
              "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2313,
                  "column": 6
                },
                "end": {
                  "line": 2315,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "bindTemplate",
              "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2329,
                  "column": 6
                },
                "end": {
                  "line": 2331,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addTemplatePropertyEffect",
              "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2395,
                  "column": 6
                },
                "end": {
                  "line": 2401,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Template metadata to add effect to"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseBindings",
              "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2636,
                  "column": 6
                },
                "end": {
                  "line": 2701,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "text",
                  "type": "string",
                  "description": "Text to parse from attribute or textContent"
                },
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Current template metadata"
                }
              ],
              "return": {
                "type": "Array.<!BindingPart>",
                "desc": "Array of binding part metadata"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_evaluateBinding",
              "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2717,
                  "column": 6
                },
                "end": {
                  "line": 2734,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "inst",
                  "type": "this",
                  "description": "Element that should be used as scope for\n  binding dependencies"
                },
                {
                  "name": "part",
                  "type": "BindingPart",
                  "description": "Binding part metadata"
                },
                {
                  "name": "path",
                  "type": "string",
                  "description": "Property/path that triggered this effect"
                },
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of current property changes"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value the binding part evaluated to"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "finalize",
              "description": "Finalizes an element definition, including ensuring any super classes\nare also finalized. This includes ensuring property\naccessors exist on the element prototype. This method calls\n`_finalizeClass` to finalize each constructor in the prototype chain.",
              "privacy": "public",
              "sourceRange": {
                "file": "properties-mixin.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 137,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_finalizeClass",
              "description": "Override of PropertiesMixin _finalizeClass to create observers and\nfind the template.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 293,
                  "column": 5
                },
                "end": {
                  "line": 316,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "createObservers",
              "description": "Creates observers for the given `observers` array.\nLeverages `PropertyEffects` to create observers.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 342,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "observers",
                  "type": "Object",
                  "description": "Array of observer descriptors for\n  this class"
                },
                {
                  "name": "dynamicFns",
                  "type": "Object",
                  "description": "Object containing keys for any properties\n  that are functions and should trigger the effect when the function\n  reference is changed"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_processStyleText",
              "description": "Gather style text for a style element in the template.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 490,
                  "column": 6
                },
                "end": {
                  "line": 492,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "cssText",
                  "type": "string",
                  "description": "Text containing styling to process"
                },
                {
                  "name": "baseURI",
                  "type": "string",
                  "description": "Base URI to rebase CSS paths against"
                }
              ],
              "return": {
                "type": "string",
                "desc": "The processed CSS text"
              }
            },
            {
              "name": "_finalizeTemplate",
              "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 503,
                  "column": 6
                },
                "end": {
                  "line": 514,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "is",
                  "type": "string",
                  "description": "Tag name (or type extension name) for this element"
                }
              ],
              "return": {
                "type": "void"
              }
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 93,
              "column": 2
            },
            "end": {
              "line": 665,
              "column": 4
            }
          },
          "privacy": "public",
          "name": "Polymer.ElementMixin",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "mixins": [
            "Polymer.PropertyEffects",
            "Polymer.PropertiesMixin"
          ]
        },
        {
          "description": "Element class mixin that provides API for adding Polymer's cross-platform\ngesture events to nodes.\n\nThe API is designed to be compatible with override points implemented\nin `Polymer.TemplateStamp` such that declarative event listeners in\ntemplates will support gesture events when this mixin is applied along with\n`Polymer.TemplateStamp`.",
          "summary": "Element class mixin that provides API for adding Polymer's cross-platform\ngesture events to nodes",
          "path": "components\\polymer\\lib\\mixins\\gesture-event-listeners.html",
          "properties": [],
          "methods": [
            {
              "name": "_addEventListenerToNode",
              "description": "Add the event listener to the node if it is a gestures event.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 55,
                  "column": 6
                },
                "end": {
                  "line": 59,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add event listener to"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to add"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_removeEventListenerFromNode",
              "description": "Remove the event listener to the node if it is a gestures event.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 69,
                  "column": 6
                },
                "end": {
                  "line": 73,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to remove event listener from"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to remove"
                }
              ],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 79,
              "column": 4
            }
          },
          "privacy": "public",
          "name": "Polymer.GestureEventListeners",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "Element class mixin that allows elements to use the `:dir` CSS Selector to have\ntext direction specific styling.\n\nWith this mixin, any stylesheet provided in the template will transform `:dir` into\n`:host([dir])` and sync direction with the page via the element's `dir` attribute.\n\nElements can opt out of the global page text direction by setting the `dir` attribute\ndirectly in `ready()` or in HTML.\n\nCaveats:\n- Applications must set `<html dir=\"ltr\">` or `<html dir=\"rtl\">` to sync direction\n- Automatic left-to-right or right-to-left styling is sync'd with the `<html>` element only.\n- Changing `dir` at runtime is supported.\n- Opting out of the global direction styling is permanent",
          "summary": "",
          "path": "components\\polymer\\lib\\mixins\\dir-mixin.html",
          "properties": [
            {
              "name": "__autoDirOptOut",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 131,
                  "column": 10
                },
                "end": {
                  "line": 131,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "defaultValue": "false"
            }
          ],
          "methods": [
            {
              "name": "_createPropertyAccessor",
              "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 115,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_addPropertyToAttributeMap",
              "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 132,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                }
              ],
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_definePropertyAccessor",
              "description": "Overrides PropertiesChanged implementation to save existing prototype\nproperty value so that it can be reset.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-accessors.html",
                "start": {
                  "line": 288,
                  "column": 6
                },
                "end": {
                  "line": 291,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created\n\nWhen calling on a prototype, any overwritten values are saved in\n`__dataProto`, and it is up to the subclasser to decide how/when\nto set those properties back into the accessor.  When calling on an\ninstance, the overwritten value is set via `_setPendingProperty`,\nand the user should call `_invalidateProperties` or `_flushProperties`\nfor the values to take effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 138,
                  "column": 8
                },
                "end": {
                  "line": 141,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_initializeProperties",
              "description": "Overrides PropertiesChanged implementation to initialize values for\naccessors created for values that already existed on the element\nprototype.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-accessors.html",
                "start": {
                  "line": 155,
                  "column": 6
                },
                "end": {
                  "line": 161,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_initializeInstanceProperties",
              "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 222,
                  "column": 8
                },
                "end": {
                  "line": 224,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of property values that were overwritten\n  when creating property accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setProperty",
              "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 235,
                  "column": 8
                },
                "end": {
                  "line": 239,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_getProperty",
              "description": "Returns the value for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 247,
                  "column": 8
                },
                "end": {
                  "line": 249,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value for the given property"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setPendingProperty",
              "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 264,
                  "column": 8
                },
                "end": {
                  "line": 280,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "ext",
                  "type": "boolean=",
                  "description": "Not used here; affordance for closure"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property changed"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_invalidateProperties",
              "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 290,
                  "column": 8
                },
                "end": {
                  "line": 300,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_enableProperties",
              "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 313,
                  "column": 8
                },
                "end": {
                  "line": 322,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_flushProperties",
              "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 333,
                  "column": 8
                },
                "end": {
                  "line": 342,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertiesChange",
              "description": "Called in `_flushProperties` to determine if `_propertiesChanged`\nshould be called. The default implementation returns true if\nproperties are pending. Override to customize when\n`_propertiesChanged` is called.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 356,
                  "column": 8
                },
                "end": {
                  "line": 358,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "true if changedProps is truthy"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertiesChanged",
              "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 372,
                  "column": 8
                },
                "end": {
                  "line": 373,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertyChange",
              "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 393,
                  "column": 8
                },
                "end": {
                  "line": 400,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeChangedCallback",
              "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
              "privacy": "public",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 412,
                  "column": 8
                },
                "end": {
                  "line": 419,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of attribute that changed"
                },
                {
                  "name": "old",
                  "type": "?string",
                  "description": "Old attribute value"
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "New attribute value"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_attributeToProperty",
              "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 433,
                  "column": 8
                },
                "end": {
                  "line": 440,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to deserialize."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "of the attribute."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertyToAttribute",
              "description": "Serializes a property to its associated attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 452,
                  "column": 8
                },
                "end": {
                  "line": 458,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name to reflect."
                },
                {
                  "name": "attribute",
                  "type": "string=",
                  "description": "Attribute name to reflect to."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Property value to refect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_valueToNodeAttribute",
              "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 473,
                  "column": 8
                },
                "end": {
                  "line": 480,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to set attribute to."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to serialize."
                },
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Attribute name to serialize to."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_serializeValue",
              "description": "Overrides PropertiesChanged implemention to serialize objects as JSON.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-accessors.html",
                "start": {
                  "line": 205,
                  "column": 6
                },
                "end": {
                  "line": 222,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Property value to serialize."
                }
              ],
              "return": {
                "type": "(string | undefined)",
                "desc": "String serialized from the provided property value."
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_deserializeValue",
              "description": "Converts a string to a typed JavaScript value.\n\nThis method is called by Polymer when reading HTML attribute values to\nJS properties.  Users may override this method on Polymer element\nprototypes to provide deserialization for custom `type`s.  Note,\nthe `type` argument is the value of the `type` field provided in the\n`properties` configuration object for a given property, and is\nby convention the constructor for the type to deserialize.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-accessors.html",
                "start": {
                  "line": 239,
                  "column": 6
                },
                "end": {
                  "line": 270,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Attribute value to deserialize."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "Type to deserialize the string to."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Typed value deserialized from the provided string."
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_initializeProtoProperties",
              "description": "Called at instance time with bag of properties that were overwritten\nby accessors on the prototype when accessors were created.\n\nThe default implementation sets these properties back into the\nsetter at instance time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-accessors.html",
                "start": {
                  "line": 176,
                  "column": 6
                },
                "end": {
                  "line": 180,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of property values that were overwritten\n  when creating property accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_ensureAttribute",
              "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-accessors.html",
                "start": {
                  "line": 192,
                  "column": 6
                },
                "end": {
                  "line": 197,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to ensure is set."
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "of the attribute."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_hasAccessor",
              "description": "Returns true if this library created an accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-accessors.html",
                "start": {
                  "line": 299,
                  "column": 6
                },
                "end": {
                  "line": 301,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if an accessor was created"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_isPropertyPending",
              "description": "Returns true if the specified property has a pending change.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-accessors.html",
                "start": {
                  "line": 310,
                  "column": 6
                },
                "end": {
                  "line": 312,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if property has a pending change"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 147,
                  "column": 8
                },
                "end": {
                  "line": 156,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 162,
                  "column": 8
                },
                "end": {
                  "line": 172,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [
            {
              "name": "createProperties",
              "description": "Creates property accessors for the given property names.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 58,
                  "column": 8
                },
                "end": {
                  "line": 66,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "!Object",
                  "description": "Object whose keys are names of accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeNameForProperty",
              "description": "Returns an attribute name that corresponds to the given property.\nBy default, converts camel to dash case, e.g. `fooBar` to `foo-bar`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-accessors.html",
                "start": {
                  "line": 143,
                  "column": 6
                },
                "end": {
                  "line": 145,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property to convert"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Attribute name corresponding to the given property."
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "typeForProperty",
              "description": "Override point to provide a type to which to deserialize a value to\na given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 88,
                  "column": 8
                },
                "end": {
                  "line": 88,
                  "column": 40
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "createPropertiesForAttributes",
              "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
              "privacy": "public",
              "sourceRange": {
                "file": "property-accessors.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 133,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_processStyleText",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 110,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "cssText"
                },
                {
                  "name": "baseURI"
                }
              ]
            },
            {
              "name": "_replaceDirInCssText",
              "description": "Replace `:dir` in the given CSS text",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 118,
                  "column": 8
                },
                "end": {
                  "line": 126,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "text",
                  "type": "string",
                  "description": "CSS text to replace DIR"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Modified CSS"
              }
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 178,
              "column": 6
            }
          },
          "privacy": "public",
          "name": "Polymer.DirMixin",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "mixins": [
            "Polymer.PropertyAccessors"
          ]
        },
        {
          "description": "Element class mixin that provides Polymer's \"legacy\" API intended to be\nbackward-compatible to the greatest extent possible with the API\nfound on the Polymer 1.x `Polymer.Base` prototype applied to all elements\ndefined using the `Polymer({...})` function.",
          "summary": "",
          "path": "components\\polymer\\lib\\legacy\\legacy-element-mixin.html",
          "properties": [
            {
              "name": "__dataClientsReady",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1147,
                  "column": 8
                },
                "end": {
                  "line": 1147,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPendingClients",
              "type": "Array",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1149,
                  "column": 8
                },
                "end": {
                  "line": 1149,
                  "column": 34
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataToNotify",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1151,
                  "column": 8
                },
                "end": {
                  "line": 1151,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataLinkedPaths",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1153,
                  "column": 8
                },
                "end": {
                  "line": 1153,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHasPaths",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1155,
                  "column": 8
                },
                "end": {
                  "line": 1155,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataCompoundStorage",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1157,
                  "column": 8
                },
                "end": {
                  "line": 1157,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHost",
              "type": "Polymer_PropertyEffects",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1159,
                  "column": 8
                },
                "end": {
                  "line": 1159,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataTemp",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1161,
                  "column": 8
                },
                "end": {
                  "line": 1161,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataClientsInitialized",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1163,
                  "column": 8
                },
                "end": {
                  "line": 1163,
                  "column": 38
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__data",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1165,
                  "column": 8
                },
                "end": {
                  "line": 1165,
                  "column": 20
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPending",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1167,
                  "column": 8
                },
                "end": {
                  "line": 1167,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataOld",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1169,
                  "column": 8
                },
                "end": {
                  "line": 1169,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__computeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1171,
                  "column": 8
                },
                "end": {
                  "line": 1171,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__reflectEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1173,
                  "column": 8
                },
                "end": {
                  "line": 1173,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__notifyEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1175,
                  "column": 8
                },
                "end": {
                  "line": 1175,
                  "column": 29
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__propagateEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1177,
                  "column": 8
                },
                "end": {
                  "line": 1177,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__observeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1179,
                  "column": 8
                },
                "end": {
                  "line": 1179,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__readOnly",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1181,
                  "column": 8
                },
                "end": {
                  "line": 1181,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__templateInfo",
              "type": "!TemplateInfo",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1183,
                  "column": 8
                },
                "end": {
                  "line": 1183,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_template",
              "type": "HTMLTemplateElement",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 421,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_importPath",
              "type": "string",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 423,
                  "column": 8
                },
                "end": {
                  "line": 423,
                  "column": 25
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "rootPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 425,
                  "column": 8
                },
                "end": {
                  "line": 425,
                  "column": 22
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "importPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 427,
                  "column": 8
                },
                "end": {
                  "line": 427,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "root",
              "type": "(StampedTemplate | HTMLElement | ShadowRoot)",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 429,
                  "column": 8
                },
                "end": {
                  "line": 429,
                  "column": 18
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "$",
              "type": "!Object.<string, !Element>",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 431,
                  "column": 8
                },
                "end": {
                  "line": 431,
                  "column": 15
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "isAttached",
              "type": "boolean",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 76,
                  "column": 8
                },
                "end": {
                  "line": 76,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            },
            {
              "name": "__boundListeners",
              "type": "WeakMap.<!Element, !Object.<string, !Function>>",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 78,
                  "column": 8
                },
                "end": {
                  "line": 78,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            },
            {
              "name": "_debouncers",
              "type": "Object.<string, Function>",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 80,
                  "column": 8
                },
                "end": {
                  "line": 80,
                  "column": 25
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              }
            }
          ],
          "methods": [
            {
              "name": "_stampTemplate",
              "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2423,
                  "column": 6
                },
                "end": {
                  "line": 2448,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to stamp"
                }
              ],
              "return": {
                "type": "!StampedTemplate",
                "desc": "Cloned template content"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addMethodEventListenerToNode",
              "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 452,
                  "column": 6
                },
                "end": {
                  "line": 457,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add listener on"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Name of method"
                },
                {
                  "name": "context",
                  "type": "*=",
                  "description": "Context the method will be called on (defaults\n  to `node`)"
                }
              ],
              "return": {
                "type": "Function",
                "desc": "Generated handler function"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_addEventListenerToNode",
              "description": "Add the event listener to the node if it is a gestures event.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\gesture-event-listeners.html",
                "start": {
                  "line": 55,
                  "column": 6
                },
                "end": {
                  "line": 59,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add event listener to"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to add"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.GestureEventListeners"
            },
            {
              "name": "_removeEventListenerFromNode",
              "description": "Remove the event listener to the node if it is a gestures event.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\gesture-event-listeners.html",
                "start": {
                  "line": 69,
                  "column": 6
                },
                "end": {
                  "line": 73,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to remove event listener from"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.GestureEventListeners"
            },
            {
              "name": "_createPropertyAccessor",
              "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 115,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_addPropertyToAttributeMap",
              "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 132,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                }
              ],
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_definePropertyAccessor",
              "description": "Defines a property accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 140,
                  "column": 9
                },
                "end": {
                  "line": 153,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "ready",
              "description": "Overrides the default `Polymer.PropertyEffects` implementation to\nadd support for installing `hostAttributes` and `listeners`.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 196,
                  "column": 6
                },
                "end": {
                  "line": 199,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_initializeProperties",
              "description": "Overrides the default `Polymer.PropertyEffects` implementation to\nadd support for class initialization via the `_registered` callback.\nThis is called only when the first instance of the element is created.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 168,
                  "column": 6
                },
                "end": {
                  "line": 177,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_initializeInstanceProperties",
              "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 222,
                  "column": 8
                },
                "end": {
                  "line": 224,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of property values that were overwritten\n  when creating property accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setProperty",
              "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 235,
                  "column": 8
                },
                "end": {
                  "line": 239,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_getProperty",
              "description": "Returns the value for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 247,
                  "column": 8
                },
                "end": {
                  "line": 249,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value for the given property"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setPendingProperty",
              "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 264,
                  "column": 8
                },
                "end": {
                  "line": 280,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "ext",
                  "type": "boolean=",
                  "description": "Not used here; affordance for closure"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property changed"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_invalidateProperties",
              "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 290,
                  "column": 8
                },
                "end": {
                  "line": 300,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_enableProperties",
              "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 313,
                  "column": 8
                },
                "end": {
                  "line": 322,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_flushProperties",
              "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 333,
                  "column": 8
                },
                "end": {
                  "line": 342,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertiesChange",
              "description": "Called in `_flushProperties` to determine if `_propertiesChanged`\nshould be called. The default implementation returns true if\nproperties are pending. Override to customize when\n`_propertiesChanged` is called.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 356,
                  "column": 8
                },
                "end": {
                  "line": 358,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "true if changedProps is truthy"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertiesChanged",
              "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 372,
                  "column": 8
                },
                "end": {
                  "line": 373,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertyChange",
              "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 393,
                  "column": 8
                },
                "end": {
                  "line": 400,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeChangedCallback",
              "description": "Provides an override implementation of `attributeChangedCallback`\nwhich adds the Polymer legacy API's `attributeChanged` method.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 142,
                  "column": 6
                },
                "end": {
                  "line": 147,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of attribute."
                },
                {
                  "name": "old",
                  "type": "?string",
                  "description": "Old value of attribute."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Current value of attribute."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_attributeToProperty",
              "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 433,
                  "column": 8
                },
                "end": {
                  "line": 440,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to deserialize."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "of the attribute."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertyToAttribute",
              "description": "Serializes a property to its associated attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 452,
                  "column": 8
                },
                "end": {
                  "line": 458,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name to reflect."
                },
                {
                  "name": "attribute",
                  "type": "string=",
                  "description": "Attribute name to reflect to."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Property value to refect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_valueToNodeAttribute",
              "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 473,
                  "column": 8
                },
                "end": {
                  "line": 480,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to set attribute to."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to serialize."
                },
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Attribute name to serialize to."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_serializeValue",
              "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 493,
                  "column": 8
                },
                "end": {
                  "line": 500,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Property value to serialize."
                }
              ],
              "return": {
                "type": "(string | undefined)",
                "desc": "String serialized from the provided\nproperty  value."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_deserializeValue",
              "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 514,
                  "column": 8
                },
                "end": {
                  "line": 523,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Value to deserialize."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "Type to deserialize the string to."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Typed value deserialized from the provided string."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_initializeProtoProperties",
              "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1217,
                  "column": 6
                },
                "end": {
                  "line": 1221,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Properties to initialize on the prototype"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_ensureAttribute",
              "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-accessors.html",
                "start": {
                  "line": 192,
                  "column": 6
                },
                "end": {
                  "line": 197,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to ensure is set."
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "of the attribute."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_hasAccessor",
              "description": "Returns true if this library created an accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-accessors.html",
                "start": {
                  "line": 299,
                  "column": 6
                },
                "end": {
                  "line": 301,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if an accessor was created"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_isPropertyPending",
              "description": "Returns true if the specified property has a pending change.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-accessors.html",
                "start": {
                  "line": 310,
                  "column": 6
                },
                "end": {
                  "line": 312,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if property has a pending change"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_addPropertyEffect",
              "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1255,
                  "column": 6
                },
                "end": {
                  "line": 1263,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removePropertyEffect",
              "description": "Removes the given property effect.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1273,
                  "column": 6
                },
                "end": {
                  "line": 1279,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property the effect was associated with"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasPropertyEffect",
              "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1290,
                  "column": 6
                },
                "end": {
                  "line": 1293,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "type",
                  "type": "string=",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReadOnlyEffect",
              "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1303,
                  "column": 6
                },
                "end": {
                  "line": 1305,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasNotifyEffect",
              "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1315,
                  "column": 6
                },
                "end": {
                  "line": 1317,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReflectEffect",
              "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1327,
                  "column": 6
                },
                "end": {
                  "line": 1329,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasComputedEffect",
              "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1339,
                  "column": 6
                },
                "end": {
                  "line": 1341,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setPendingPropertyOrPath",
              "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1373,
                  "column": 6
                },
                "end": {
                  "line": 1405,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(number | string)>)",
                  "description": "Path to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "shouldNotify",
                  "type": "boolean=",
                  "description": "Set to true if this change should\n cause a property notification event dispatch"
                },
                {
                  "name": "isPathNotification",
                  "type": "boolean=",
                  "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setUnmanagedPropertyToNode",
              "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1428,
                  "column": 6
                },
                "end": {
                  "line": 1436,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "The node to set a property on"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "The property to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "The value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_enqueueClient",
              "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1543,
                  "column": 6
                },
                "end": {
                  "line": 1548,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "client",
                  "type": "Object",
                  "description": "PropertyEffects client to enqueue"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_flushClients",
              "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1569,
                  "column": 6
                },
                "end": {
                  "line": 1580,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__enableOrFlushClients",
              "description": "(c) the stamped dom enables.",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1594,
                  "column": 6
                },
                "end": {
                  "line": 1607,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_readyClients",
              "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 558,
                  "column": 6
                },
                "end": {
                  "line": 567,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "setProperties",
              "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1636,
                  "column": 6
                },
                "end": {
                  "line": 1647,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
                },
                {
                  "name": "setReadOnly",
                  "type": "boolean=",
                  "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_propagatePropertyChanges",
              "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1734,
                  "column": 6
                },
                "end": {
                  "line": 1744,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "changedProps",
                  "type": "Object",
                  "description": "Bag of changed properties"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "linkPaths",
              "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1755,
                  "column": 6
                },
                "end": {
                  "line": 1760,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "to",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Target path to link."
                },
                {
                  "name": "from",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Source path to link."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unlinkPaths",
              "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1772,
                  "column": 6
                },
                "end": {
                  "line": 1777,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Target path to unlink."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifySplices",
              "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1809,
                  "column": 6
                },
                "end": {
                  "line": 1813,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "splices",
                  "type": "Array",
                  "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "get",
              "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1834,
                  "column": 6
                },
                "end": {
                  "line": 1836,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "set",
              "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1859,
                  "column": 6
                },
                "end": {
                  "line": 1869,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set at the specified path."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "push",
              "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1885,
                  "column": 6
                },
                "end": {
                  "line": 1894,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to push onto array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "pop",
              "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1909,
                  "column": 6
                },
                "end": {
                  "line": 1918,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "splice",
              "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1937,
                  "column": 6
                },
                "end": {
                  "line": 1974,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "start",
                  "type": "number",
                  "description": "Index from which to start removing/inserting."
                },
                {
                  "name": "deleteCount",
                  "type": "number",
                  "description": "Number of items to remove."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert into array."
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Array of removed items."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "shift",
              "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1989,
                  "column": 6
                },
                "end": {
                  "line": 1998,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unshift",
              "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2014,
                  "column": 6
                },
                "end": {
                  "line": 2022,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert info array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifyPath",
              "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2037,
                  "column": 6
                },
                "end": {
                  "line": 2054,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Value at the path (optional)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReadOnlyProperty",
              "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2067,
                  "column": 6
                },
                "end": {
                  "line": 2074,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createPropertyObserver",
              "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2088,
                  "column": 6
                },
                "end": {
                  "line": 2098,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string | function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createMethodObserver",
              "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2111,
                  "column": 6
                },
                "end": {
                  "line": 2117,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createNotifyingProperty",
              "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2128,
                  "column": 6
                },
                "end": {
                  "line": 2136,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReflectedProperty",
              "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2147,
                  "column": 6
                },
                "end": {
                  "line": 2160,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createComputedProperty",
              "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2174,
                  "column": 6
                },
                "end": {
                  "line": 2180,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_bindTemplate",
              "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2357,
                  "column": 6
                },
                "end": {
                  "line": 2380,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                },
                {
                  "name": "instanceBinding",
                  "type": "boolean=",
                  "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removeBoundDom",
              "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2459,
                  "column": 6
                },
                "end": {
                  "line": 2480,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "!StampedTemplate",
                  "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "connectedCallback",
              "description": "Provides an implementation of `connectedCallback`\nwhich adds Polymer legacy API's `attached` method.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 101,
                  "column": 6
                },
                "end": {
                  "line": 105,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "disconnectedCallback",
              "description": "Provides an implementation of `disconnectedCallback`\nwhich adds Polymer legacy API's `detached` method.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 120,
                  "column": 6
                },
                "end": {
                  "line": 124,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_attachDom",
              "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 581,
                  "column": 6
                },
                "end": {
                  "line": 597,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "StampedTemplate",
                  "description": "to attach to the element."
                }
              ],
              "return": {
                "type": "ShadowRoot",
                "desc": "node to which the dom has been attached."
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "updateStyles",
              "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.\n\nNote: This function does not support updating CSS mixins.\nYou can not dynamically change the value of an `@apply`.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 620,
                  "column": 6
                },
                "end": {
                  "line": 624,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "properties",
                  "type": "Object=",
                  "description": "Bag of custom property key/values to\n  apply to this element."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "resolveUrl",
              "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 641,
                  "column": 6
                },
                "end": {
                  "line": 646,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "url",
                  "type": "string",
                  "description": "URL to resolve."
                },
                {
                  "name": "base",
                  "type": "string=",
                  "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Rewritten URL relative to base"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "created",
              "description": "Legacy callback called during the `constructor`, for overriding\nby the user.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 93,
                  "column": 6
                },
                "end": {
                  "line": 93,
                  "column": 18
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "attached",
              "description": "Legacy callback called during `connectedCallback`, for overriding\nby the user.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 112,
                  "column": 6
                },
                "end": {
                  "line": 112,
                  "column": 19
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "detached",
              "description": "Legacy callback called during `disconnectedCallback`, for overriding\nby the user.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 131,
                  "column": 6
                },
                "end": {
                  "line": 131,
                  "column": 19
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "attributeChanged",
              "description": "Legacy callback called during `attributeChangedChallback`, for overriding\nby the user.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 157,
                  "column": 6
                },
                "end": {
                  "line": 157,
                  "column": 43
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of attribute."
                },
                {
                  "name": "old",
                  "type": "?string",
                  "description": "Old value of attribute."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Current value of attribute."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_registered",
              "description": "Called automatically when an element is initializing.\nUsers may override this method to perform class registration time\nwork. The implementation should ensure the work is performed\nonly once for the class.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 187,
                  "column": 6
                },
                "end": {
                  "line": 187,
                  "column": 22
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_ensureAttributes",
              "description": "Ensures an element has required attributes. Called when the element\nis being readied via `ready`. Users should override to set the\nelement's required attributes. The implementation should be sure\nto check and not override existing attributes added by\nthe user of the element. Typically, setting attributes should be left\nto the element user and not done here; reasonable exceptions include\nsetting aria roles and focusability.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 212,
                  "column": 6
                },
                "end": {
                  "line": 212,
                  "column": 28
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_applyListeners",
              "description": "Adds element event listeners. Called when the element\nis being readied via `ready`. Users should override to\nadd any required element event listeners.\nIn performance critical elements, the work done here should be kept\nto a minimum since it is done before the element is rendered. In\nthese elements, consider adding listeners asynchronously so as not to\nblock render.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 225,
                  "column": 6
                },
                "end": {
                  "line": 225,
                  "column": 26
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "serialize",
              "description": "Converts a typed JavaScript value to a string.\n\nNote this method is provided as backward-compatible legacy API\nonly.  It is not directly called by any Polymer features. To customize\nhow properties are serialized to attributes for attribute bindings and\n`reflectToAttribute: true` properties as well as this method, override\nthe `_serializeValue` method provided by `Polymer.PropertyAccessors`.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 239,
                  "column": 6
                },
                "end": {
                  "line": 241,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to deserialize"
                }
              ],
              "return": {
                "type": "(string | undefined)",
                "desc": "Serialized value"
              }
            },
            {
              "name": "deserialize",
              "description": "Converts a string to a typed JavaScript value.\n\nNote this method is provided as backward-compatible legacy API\nonly.  It is not directly called by any Polymer features.  To customize\nhow attributes are deserialized to properties for in\n`attributeChangedCallback`, override `_deserializeValue` method\nprovided by `Polymer.PropertyAccessors`.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 256,
                  "column": 6
                },
                "end": {
                  "line": 258,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "string",
                  "description": "String to deserialize"
                },
                {
                  "name": "type",
                  "type": "*",
                  "description": "Type to deserialize the string to"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Returns the deserialized value in the `type` given."
              }
            },
            {
              "name": "reflectPropertyToAttribute",
              "description": "Serializes a property to its associated attribute.\n\nNote this method is provided as backward-compatible legacy API\nonly.  It is not directly called by any Polymer features.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 271,
                  "column": 6
                },
                "end": {
                  "line": 273,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name to reflect."
                },
                {
                  "name": "attribute",
                  "type": "string=",
                  "description": "Attribute name to reflect."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Property value to reflect."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "serializeValueToAttribute",
              "description": "Sets a typed value to an HTML attribute on a node.\n\nNote this method is provided as backward-compatible legacy API\nonly.  It is not directly called by any Polymer features.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 286,
                  "column": 6
                },
                "end": {
                  "line": 288,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to serialize."
                },
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Attribute name to serialize to."
                },
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to set attribute to."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "extend",
              "description": "Copies own properties (including accessor descriptors) from a source\nobject to a target object.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 298,
                  "column": 6
                },
                "end": {
                  "line": 310,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "prototype",
                  "type": "Object",
                  "description": "Target object to copy properties to."
                },
                {
                  "name": "api",
                  "type": "Object",
                  "description": "Source object to copy properties from."
                }
              ],
              "return": {
                "type": "Object",
                "desc": "prototype object that was passed as first argument."
              }
            },
            {
              "name": "mixin",
              "description": "Copies props from a source object to a target object.\n\nNote, this method uses a simple `for...in` strategy for enumerating\nproperties.  To ensure only `ownProperties` are copied from source\nto target and that accessor implementations are copied, use `extend`.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 323,
                  "column": 6
                },
                "end": {
                  "line": 328,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "target",
                  "type": "!Object",
                  "description": "Target object to copy properties to."
                },
                {
                  "name": "source",
                  "type": "!Object",
                  "description": "Source object to copy properties from."
                }
              ],
              "return": {
                "type": "!Object",
                "desc": "Target object that was passed as first argument."
              }
            },
            {
              "name": "chainObject",
              "description": "Sets the prototype of an object.\n\nNote this method is provided as backward-compatible legacy API\nonly.  It is not directly called by any Polymer features.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 341,
                  "column": 6
                },
                "end": {
                  "line": 346,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "object",
                  "type": "Object",
                  "description": "The object on which to set the prototype."
                },
                {
                  "name": "prototype",
                  "type": "Object",
                  "description": "The prototype that will be set on the given\n`object`."
                }
              ],
              "return": {
                "type": "Object",
                "desc": "Returns the given `object` with its prototype set\nto the given `prototype` object."
              }
            },
            {
              "name": "instanceTemplate",
              "description": "Calls `importNode` on the `content` of the `template` specified and\nreturns a document fragment containing the imported content.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 358,
                  "column": 6
                },
                "end": {
                  "line": 363,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "HTMLTemplateElement",
                  "description": "HTML template element to instance."
                }
              ],
              "return": {
                "type": "!DocumentFragment",
                "desc": "Document fragment containing the imported\n  template content."
              }
            },
            {
              "name": "fire",
              "description": "Dispatches a custom event with an optional detail value.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 382,
                  "column": 6
                },
                "end": {
                  "line": 394,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "type",
                  "type": "string",
                  "description": "Name of event type."
                },
                {
                  "name": "detail",
                  "type": "*=",
                  "description": "Detail value containing event-specific\n  payload."
                },
                {
                  "name": "options",
                  "type": "{bubbles: (boolean | undefined), cancelable: (boolean | undefined), composed: (boolean | undefined)}=",
                  "description": "Object specifying options.  These may include:\n `bubbles` (boolean, defaults to `true`),\n `cancelable` (boolean, defaults to false), and\n `node` on which to fire the event (HTMLElement, defaults to `this`)."
                }
              ],
              "return": {
                "type": "!Event",
                "desc": "The new event that was fired."
              }
            },
            {
              "name": "listen",
              "description": "Convenience method to add an event listener on a given element,\nlate bound to a named method on this element.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 405,
                  "column": 6
                },
                "end": {
                  "line": 419,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to add event listener to."
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event to listen for."
                },
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Name of handler method on `this` to call."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "unlisten",
              "description": "Convenience method to remove an event listener from a given element,\nlate bound to a named method on this element.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 431,
                  "column": 6
                },
                "end": {
                  "line": 440,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to remove event listener from."
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event to stop listening to."
                },
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Name of handler method on `this` to not call\n       anymore."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "setScrollDirection",
              "description": "Override scrolling behavior to all direction, one direction, or none.\n\nValid scroll directions:\n  - 'all': scroll in any direction\n  - 'x': scroll only in the 'x' direction\n  - 'y': scroll only in the 'y' direction\n  - 'none': disable scrolling for this node",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 457,
                  "column": 6
                },
                "end": {
                  "line": 459,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "direction",
                  "type": "string=",
                  "description": "Direction to allow scrolling\nDefaults to `all`."
                },
                {
                  "name": "node",
                  "type": "Element=",
                  "description": "Element to apply scroll direction setting.\nDefaults to `this`."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "$$",
              "description": "Convenience method to run `querySelector` on this local DOM scope.\n\nThis function calls `Polymer.dom(this.root).querySelector(slctr)`.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 470,
                  "column": 6
                },
                "end": {
                  "line": 472,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "slctr",
                  "type": "string",
                  "description": "Selector to run on this local DOM scope"
                }
              ],
              "return": {
                "type": "Element",
                "desc": "Element found by the selector, or null if not found."
              }
            },
            {
              "name": "distributeContent",
              "description": "Force this element to distribute its children to its local dom.\nThis should not be necessary as of Polymer 2.0.2 and is provided only\nfor backwards compatibility.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 491,
                  "column": 6
                },
                "end": {
                  "line": 495,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "getEffectiveChildNodes",
              "description": "Returns a list of nodes that are the effective childNodes. The effective\nchildNodes list is the same as the element's childNodes except that\nany `<content>` elements are replaced with the list of nodes distributed\nto the `<content>`, the result of its `getDistributedNodes` method.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 505,
                  "column": 6
                },
                "end": {
                  "line": 509,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "!Array.<!Node>",
                "desc": "List of effective child nodes."
              }
            },
            {
              "name": "queryDistributedElements",
              "description": "Returns a list of nodes distributed within this element that match\n`selector`. These can be dom children or elements distributed to\nchildren that are insertion points.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 519,
                  "column": 6
                },
                "end": {
                  "line": 523,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selector",
                  "type": "string",
                  "description": "Selector to run."
                }
              ],
              "return": {
                "type": "!Array.<!Node>",
                "desc": "List of distributed elements that match selector."
              }
            },
            {
              "name": "getEffectiveChildren",
              "description": "Returns a list of elements that are the effective children. The effective\nchildren list is the same as the element's children except that\nany `<content>` elements are replaced with the list of elements\ndistributed to the `<content>`.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 533,
                  "column": 6
                },
                "end": {
                  "line": 538,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "!Array.<!Node>",
                "desc": "List of effective children."
              }
            },
            {
              "name": "getEffectiveTextContent",
              "description": "Returns a string of text content that is the concatenation of the\ntext content's of the element's effective childNodes (the elements\nreturned by <a href=\"#getEffectiveChildNodes>getEffectiveChildNodes</a>.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 547,
                  "column": 6
                },
                "end": {
                  "line": 556,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "string",
                "desc": "List of effective children."
              }
            },
            {
              "name": "queryEffectiveChildren",
              "description": "Returns the first effective childNode within this element that\nmatch `selector`. These can be dom child nodes or elements distributed\nto children that are insertion points.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 565,
                  "column": 6
                },
                "end": {
                  "line": 568,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selector",
                  "type": "string",
                  "description": "Selector to run."
                }
              ],
              "return": {
                "type": "Node",
                "desc": "First effective child node that matches selector."
              }
            },
            {
              "name": "queryAllEffectiveChildren",
              "description": "Returns a list of effective childNodes within this element that\nmatch `selector`. These can be dom child nodes or elements distributed\nto children that are insertion points.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 577,
                  "column": 6
                },
                "end": {
                  "line": 579,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selector",
                  "type": "string",
                  "description": "Selector to run."
                }
              ],
              "return": {
                "type": "!Array.<!Node>",
                "desc": "List of effective child nodes that match selector."
              }
            },
            {
              "name": "getContentChildNodes",
              "description": "Returns a list of nodes distributed to this element's `<slot>`.\n\nIf this element contains more than one `<slot>` in its local DOM,\nan optional selector may be passed to choose the desired content.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 591,
                  "column": 6
                },
                "end": {
                  "line": 594,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "slctr",
                  "type": "string=",
                  "description": "CSS selector to choose the desired\n  `<slot>`.  Defaults to `content`."
                }
              ],
              "return": {
                "type": "!Array.<!Node>",
                "desc": "List of distributed nodes for the `<slot>`."
              }
            },
            {
              "name": "getContentChildren",
              "description": "Returns a list of element children distributed to this element's\n`<slot>`.\n\nIf this element contains more than one `<slot>` in its\nlocal DOM, an optional selector may be passed to choose the desired\ncontent.  This method differs from `getContentChildNodes` in that only\nelements are returned.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 611,
                  "column": 6
                },
                "end": {
                  "line": 616,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "slctr",
                  "type": "string=",
                  "description": "CSS selector to choose the desired\n  `<content>`.  Defaults to `content`."
                }
              ],
              "return": {
                "type": "!Array.<!HTMLElement>",
                "desc": "List of distributed nodes for the\n  `<slot>`."
              }
            },
            {
              "name": "isLightDescendant",
              "description": "Checks whether an element is in this element's light DOM tree.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 625,
                  "column": 6
                },
                "end": {
                  "line": 629,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "?Node",
                  "description": "The element to be checked."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "true if node is in this element's light DOM tree."
              }
            },
            {
              "name": "isLocalDescendant",
              "description": "Checks whether an element is in this element's local DOM tree.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 637,
                  "column": 6
                },
                "end": {
                  "line": 639,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Element",
                  "description": "The element to be checked."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "true if node is in this element's local DOM tree."
              }
            },
            {
              "name": "scopeSubtree",
              "description": "No-op for backwards compatibility. This should now be handled by\nShadyCss library.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 648,
                  "column": 6
                },
                "end": {
                  "line": 649,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "container",
                  "type": "*",
                  "description": "Unused"
                },
                {
                  "name": "shouldObserve",
                  "type": "*",
                  "description": "Unused"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "getComputedStyleValue",
              "description": "Returns the computed style value for the given property.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 658,
                  "column": 6
                },
                "end": {
                  "line": 660,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "The css property name."
                }
              ],
              "return": {
                "type": "string",
                "desc": "Returns the computed css property value for the given\n`property`."
              }
            },
            {
              "name": "debounce",
              "description": "Call `debounce` to collapse multiple requests for a named task into\none invocation which is made after the wait time has elapsed with\nno new request.  If no wait time is given, the callback will be called\nat microtask timing (guaranteed before paint).\n\n    debouncedClickAction(e) {\n      // will not call `processClick` more than once per 100ms\n      this.debounce('click', function() {\n       this.processClick();\n      } 100);\n    }",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 688,
                  "column": 6
                },
                "end": {
                  "line": 694,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "jobName",
                  "type": "string",
                  "description": "String to identify the debounce job."
                },
                {
                  "name": "callback",
                  "type": "function (): void",
                  "description": "Function that is called (with `this`\n  context) when the wait time elapses."
                },
                {
                  "name": "wait",
                  "type": "number",
                  "description": "Optional wait time in milliseconds (ms) after the\n  last signal that must elapse before invoking `callback`"
                }
              ],
              "return": {
                "type": "!Object",
                "desc": "Returns a debouncer object on which exists the\nfollowing methods: `isActive()` returns true if the debouncer is\nactive; `cancel()` cancels the debouncer if it is active;\n`flush()` immediately invokes the debounced callback if the debouncer\nis active."
              }
            },
            {
              "name": "isDebouncerActive",
              "description": "Returns whether a named debouncer is active.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 702,
                  "column": 6
                },
                "end": {
                  "line": 706,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "jobName",
                  "type": "string",
                  "description": "The name of the debouncer started with `debounce`"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the debouncer is active (has not yet fired)."
              }
            },
            {
              "name": "flushDebouncer",
              "description": "Immediately calls the debouncer `callback` and inactivates it.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 714,
                  "column": 6
                },
                "end": {
                  "line": 720,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "jobName",
                  "type": "string",
                  "description": "The name of the debouncer started with `debounce`"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "cancelDebouncer",
              "description": "Cancels an active debouncer.  The `callback` will not be called.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 728,
                  "column": 6
                },
                "end": {
                  "line": 734,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "jobName",
                  "type": "string",
                  "description": "The name of the debouncer started with `debounce`"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "async",
              "description": "Runs a callback function asynchronously.\n\nBy default (if no waitTime is specified), async callbacks are run at\nmicrotask timing, which will occur before paint.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 748,
                  "column": 6
                },
                "end": {
                  "line": 751,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "callback",
                  "type": "!Function",
                  "description": "The callback function to run, bound to `this`."
                },
                {
                  "name": "waitTime",
                  "type": "number=",
                  "description": "Time to wait before calling the\n  `callback`.  If unspecified or 0, the callback will be run at microtask\n  timing (before paint)."
                }
              ],
              "return": {
                "type": "number",
                "desc": "Handle that may be used to cancel the async job."
              }
            },
            {
              "name": "cancelAsync",
              "description": "Cancels an async operation started with `async`.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 760,
                  "column": 6
                },
                "end": {
                  "line": 763,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "handle",
                  "type": "number",
                  "description": "Handle returned from original `async` call to\n  cancel."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "create",
              "description": "Convenience method for creating an element and configuring it.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 775,
                  "column": 6
                },
                "end": {
                  "line": 787,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "tag",
                  "type": "string",
                  "description": "HTML element tag to create."
                },
                {
                  "name": "props",
                  "type": "Object=",
                  "description": "Object of properties to configure on the\n   instance."
                }
              ],
              "return": {
                "type": "!Element",
                "desc": "Newly created and configured element."
              }
            },
            {
              "name": "importHref",
              "description": "Convenience method for importing an HTML document imperatively.\n\nThis method creates a new `<link rel=\"import\">` element with\nthe provided URL and appends it to the document to start loading.\nIn the `onload` callback, the `import` property of the `link`\nelement will contain the imported document contents.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 806,
                  "column": 6
                },
                "end": {
                  "line": 810,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "href",
                  "type": "string",
                  "description": "URL to document to load."
                },
                {
                  "name": "onload",
                  "type": "?function (!Event): void=",
                  "description": "Callback to notify when an import successfully\n  loaded."
                },
                {
                  "name": "onerror",
                  "type": "?function (!ErrorEvent): void=",
                  "description": "Callback to notify when an import\n  unsuccessfully loaded."
                },
                {
                  "name": "optAsync",
                  "type": "boolean=",
                  "description": "True if the import should be loaded `async`.\n  Defaults to `false`."
                }
              ],
              "return": {
                "type": "!HTMLLinkElement",
                "desc": "The link element for the URL to be loaded."
              }
            },
            {
              "name": "elementMatches",
              "description": "Polyfill for Element.prototype.matches, which is sometimes still\nprefixed.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 820,
                  "column": 6
                },
                "end": {
                  "line": 822,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selector",
                  "type": "string",
                  "description": "Selector to test."
                },
                {
                  "name": "node",
                  "type": "!Element=",
                  "description": "Element to test the selector against."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the element matches the selector."
              }
            },
            {
              "name": "toggleAttribute",
              "description": "Toggles an HTML attribute on or off.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 833,
                  "column": 6
                },
                "end": {
                  "line": 843,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "HTML attribute name"
                },
                {
                  "name": "bool",
                  "type": "boolean=",
                  "description": "Boolean to force the attribute on or off.\n   When unspecified, the state of the attribute will be reversed."
                },
                {
                  "name": "node",
                  "type": "Element=",
                  "description": "Node to target.  Defaults to `this`."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "toggleClass",
              "description": "Toggles a CSS class on or off.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 855,
                  "column": 6
                },
                "end": {
                  "line": 865,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "CSS class name"
                },
                {
                  "name": "bool",
                  "type": "boolean=",
                  "description": "Boolean to force the class on or off.\n   When unspecified, the state of the class will be reversed."
                },
                {
                  "name": "node",
                  "type": "Element=",
                  "description": "Node to target.  Defaults to `this`."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "transform",
              "description": "Cross-platform helper for setting an element's CSS `transform` property.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 875,
                  "column": 6
                },
                "end": {
                  "line": 879,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "transformText",
                  "type": "string",
                  "description": "Transform setting."
                },
                {
                  "name": "node",
                  "type": "Element=",
                  "description": "Element to apply the transform to.\nDefaults to `this`"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "translate3d",
              "description": "Cross-platform helper for setting an element's CSS `translate3d`\nproperty.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 892,
                  "column": 6
                },
                "end": {
                  "line": 895,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "x",
                  "type": "number",
                  "description": "X offset."
                },
                {
                  "name": "y",
                  "type": "number",
                  "description": "Y offset."
                },
                {
                  "name": "z",
                  "type": "number",
                  "description": "Z offset."
                },
                {
                  "name": "node",
                  "type": "Element=",
                  "description": "Element to apply the transform to.\nDefaults to `this`."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "arrayDelete",
              "description": "Removes an item from an array, if it exists.\n\nIf the array is specified by path, a change notification is\ngenerated, so that observers, data bindings and computed\nproperties watching that path can update.\n\nIf the array is passed directly, **no change\nnotification is generated**.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 912,
                  "column": 6
                },
                "end": {
                  "line": 927,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "arrayOrPath",
                  "type": "(string | !Array.<(number | string)>)",
                  "description": "Path to array from which to remove the item\n  (or the array itself)."
                },
                {
                  "name": "item",
                  "type": "*",
                  "description": "Item to remove."
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Array containing item removed."
              }
            },
            {
              "name": "_logger",
              "description": "Facades `console.log`/`warn`/`error` as override point.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 938,
                  "column": 6
                },
                "end": {
                  "line": 949,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "level",
                  "type": "string",
                  "description": "One of 'log', 'warn', 'error'"
                },
                {
                  "name": "args",
                  "type": "Array",
                  "description": "Array of strings or objects to log"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_log",
              "description": "Facades `console.log` as an override point.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 957,
                  "column": 6
                },
                "end": {
                  "line": 959,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args",
                  "type": "...*",
                  "rest": true,
                  "description": "Array of strings or objects to log"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_warn",
              "description": "Facades `console.warn` as an override point.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 967,
                  "column": 6
                },
                "end": {
                  "line": 969,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args",
                  "type": "...*",
                  "rest": true,
                  "description": "Array of strings or objects to log"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_error",
              "description": "Facades `console.error` as an override point.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 977,
                  "column": 6
                },
                "end": {
                  "line": 979,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args",
                  "type": "...*",
                  "rest": true,
                  "description": "Array of strings or objects to log"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_logf",
              "description": "Formats a message using the element type an a method name.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 989,
                  "column": 6
                },
                "end": {
                  "line": 991,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Method name to associate with message"
                },
                {
                  "name": "args",
                  "type": "...*",
                  "rest": true,
                  "description": "Array of strings or objects to log"
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Array with formatting information for `console`\n  logging."
              }
            }
          ],
          "staticMethods": [
            {
              "name": "_parseTemplate",
              "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 197,
                  "column": 6
                },
                "end": {
                  "line": 208,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to parse"
                },
                {
                  "name": "outerTemplateInfo",
                  "type": "TemplateInfo=",
                  "description": "Template metadata from the outer\n  template, for parsing nested templates"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Parsed template metadata"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateContent",
              "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 657,
                  "column": 6
                },
                "end": {
                  "line": 660,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "templateInfo"
                },
                {
                  "name": "nodeInfo"
                }
              ],
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_parseTemplateNode",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2499,
                  "column": 6
                },
                "end": {
                  "line": 2513,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateChildNodes",
              "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 258,
                  "column": 6
                },
                "end": {
                  "line": 295,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "root",
                  "type": "Node",
                  "description": "Root node whose `childNodes` will be parsed"
                },
                {
                  "name": "templateInfo",
                  "type": "!TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "!NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNestedTemplate",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2591,
                  "column": 6
                },
                "end": {
                  "line": 2601,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateNodeAttributes",
              "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 333,
                  "column": 6
                },
                "end": {
                  "line": 342,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNodeAttribute",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2534,
                  "column": 6
                },
                "end": {
                  "line": 2575,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Attribute name"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Attribute value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_contentForTemplate",
              "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 388,
                  "column": 6
                },
                "end": {
                  "line": 391,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "HTMLTemplateElement",
                  "description": "Template to retrieve `content` for"
                }
              ],
              "return": {
                "type": "DocumentFragment",
                "desc": "Content fragment"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "createProperties",
              "description": "Override of PropertiesChanged createProperties to create accessors\nand property effects for all of the properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 325,
                  "column": 7
                },
                "end": {
                  "line": 329,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "attributeNameForProperty",
              "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property to convert"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Attribute name corresponding to the given property."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "typeForProperty",
              "description": "Overrides `PropertiesChanged` method to return type specified in the\nstatic `properties` object for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-mixin.html",
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 183,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Type to which to deserialize attribute"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "createPropertiesForAttributes",
              "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-accessors.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 133,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "addPropertyEffect",
              "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2220,
                  "column": 6
                },
                "end": {
                  "line": 2222,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createPropertyObserver",
              "description": "Creates a single-property observer for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2234,
                  "column": 6
                },
                "end": {
                  "line": 2236,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string | function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createMethodObserver",
              "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2251,
                  "column": 6
                },
                "end": {
                  "line": 2253,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating"
                }
              ],
              "return": {
                "type": "void",
                "desc": "whether method names should be included as a dependency to the effect."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createNotifyingProperty",
              "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2263,
                  "column": 6
                },
                "end": {
                  "line": 2265,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReadOnlyProperty",
              "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2283,
                  "column": 6
                },
                "end": {
                  "line": 2285,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReflectedProperty",
              "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2295,
                  "column": 6
                },
                "end": {
                  "line": 2297,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createComputedProperty",
              "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2313,
                  "column": 6
                },
                "end": {
                  "line": 2315,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "bindTemplate",
              "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2329,
                  "column": 6
                },
                "end": {
                  "line": 2331,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addTemplatePropertyEffect",
              "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2395,
                  "column": 6
                },
                "end": {
                  "line": 2401,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Template metadata to add effect to"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseBindings",
              "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2636,
                  "column": 6
                },
                "end": {
                  "line": 2701,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "text",
                  "type": "string",
                  "description": "Text to parse from attribute or textContent"
                },
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Current template metadata"
                }
              ],
              "return": {
                "type": "Array.<!BindingPart>",
                "desc": "Array of binding part metadata"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_evaluateBinding",
              "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2717,
                  "column": 6
                },
                "end": {
                  "line": 2734,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "inst",
                  "type": "this",
                  "description": "Element that should be used as scope for\n  binding dependencies"
                },
                {
                  "name": "part",
                  "type": "BindingPart",
                  "description": "Binding part metadata"
                },
                {
                  "name": "path",
                  "type": "string",
                  "description": "Property/path that triggered this effect"
                },
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of current property changes"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value the binding part evaluated to"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "finalize",
              "description": "Finalizes an element definition, including ensuring any super classes\nare also finalized. This includes ensuring property\naccessors exist on the element prototype. This method calls\n`_finalizeClass` to finalize each constructor in the prototype chain.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\properties-mixin.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 137,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_finalizeClass",
              "description": "Override of PropertiesMixin _finalizeClass to create observers and\nfind the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 293,
                  "column": 5
                },
                "end": {
                  "line": 316,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "createObservers",
              "description": "Creates observers for the given `observers` array.\nLeverages `PropertyEffects` to create observers.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 342,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "observers",
                  "type": "Object",
                  "description": "Array of observer descriptors for\n  this class"
                },
                {
                  "name": "dynamicFns",
                  "type": "Object",
                  "description": "Object containing keys for any properties\n  that are functions and should trigger the effect when the function\n  reference is changed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_processStyleText",
              "description": "Gather style text for a style element in the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 490,
                  "column": 6
                },
                "end": {
                  "line": 492,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "cssText",
                  "type": "string",
                  "description": "Text containing styling to process"
                },
                {
                  "name": "baseURI",
                  "type": "string",
                  "description": "Base URI to rebase CSS paths against"
                }
              ],
              "return": {
                "type": "string",
                "desc": "The processed CSS text"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_finalizeTemplate",
              "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 503,
                  "column": 6
                },
                "end": {
                  "line": 514,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "is",
                  "type": "string",
                  "description": "Tag name (or type extension name) for this element"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 2
            },
            "end": {
              "line": 999,
              "column": 4
            }
          },
          "privacy": "public",
          "name": "Polymer.LegacyElementMixin",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "mixins": [
            "Polymer.ElementMixin",
            "Polymer.GestureEventListeners"
          ]
        },
        {
          "description": "Element class mixin to skip strict dirty-checking for objects and arrays\n(always consider them to be \"dirty\"), for use on elements utilizing\n`Polymer.PropertyEffects`\n\nBy default, `Polymer.PropertyEffects` performs strict dirty checking on\nobjects, which means that any deep modifications to an object or array will\nnot be propagated unless \"immutable\" data patterns are used (i.e. all object\nreferences from the root to the mutation were changed).\n\nPolymer also provides a proprietary data mutation and path notification API\n(e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\nmutation and notification of deep changes in an object graph to all elements\nbound to the same object graph.\n\nIn cases where neither immutable patterns nor the data mutation API can be\nused, applying this mixin will cause Polymer to skip dirty checking for\nobjects and arrays (always consider them to be \"dirty\").  This allows a\nuser to make a deep modification to a bound object graph, and then either\nsimply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n(e.g. `this.notifyPath('items')`) to update the tree.  Note that all\nelements that wish to be updated based on deep mutations must apply this\nmixin or otherwise skip strict dirty checking for objects/arrays.\nSpecifically, any elements in the binding tree between the source of a\nmutation and the consumption of it must apply this mixin or enable the\n`Polymer.OptionalMutableData` mixin.\n\nIn order to make the dirty check strategy configurable, see\n`Polymer.OptionalMutableData`.\n\nNote, the performance characteristics of propagating large object graphs\nwill be worse as opposed to using strict dirty checking with immutable\npatterns or Polymer's path notification API.",
          "summary": "Element class mixin to skip strict dirty-checking for objects\n  and arrays",
          "path": "components\\polymer\\lib\\mixins\\mutable-data.html",
          "properties": [],
          "methods": [
            {
              "name": "_shouldPropertyChange",
              "description": "Overrides `Polymer.PropertyEffects` to provide option for skipping\nstrict equality checking for Objects and Arrays.\n\nThis method pulls the value to dirty check against from the `__dataTemp`\ncache (rather than the normal `__data` cache) for Objects.  Since the temp\ncache is cleared at the end of a turn, this implementation allows\nside-effects of deep object changes to be processed by re-setting the\nsame object (using the temp cache as an in-turn backstop to prevent\ncycles due to 2-way notification).",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 101,
                  "column": 6
                },
                "end": {
                  "line": 103,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change"
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 2
            },
            "end": {
              "line": 109,
              "column": 4
            }
          },
          "privacy": "public",
          "name": "Polymer.MutableData",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "Element class mixin to add the optional ability to skip strict\ndirty-checking for objects and arrays (always consider them to be\n\"dirty\") by setting a `mutable-data` attribute on an element instance.\n\nBy default, `Polymer.PropertyEffects` performs strict dirty checking on\nobjects, which means that any deep modifications to an object or array will\nnot be propagated unless \"immutable\" data patterns are used (i.e. all object\nreferences from the root to the mutation were changed).\n\nPolymer also provides a proprietary data mutation and path notification API\n(e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\nmutation and notification of deep changes in an object graph to all elements\nbound to the same object graph.\n\nIn cases where neither immutable patterns nor the data mutation API can be\nused, applying this mixin will allow Polymer to skip dirty checking for\nobjects and arrays (always consider them to be \"dirty\").  This allows a\nuser to make a deep modification to a bound object graph, and then either\nsimply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n(e.g. `this.notifyPath('items')`) to update the tree.  Note that all\nelements that wish to be updated based on deep mutations must apply this\nmixin or otherwise skip strict dirty checking for objects/arrays.\nSpecifically, any elements in the binding tree between the source of a\nmutation and the consumption of it must enable this mixin or apply the\n`Polymer.MutableData` mixin.\n\nWhile this mixin adds the ability to forgo Object/Array dirty checking,\nthe `mutableData` flag defaults to false and must be set on the instance.\n\nNote, the performance characteristics of propagating large object graphs\nwill be worse by relying on `mutableData: true` as opposed to using\nstrict dirty checking with immutable patterns or Polymer's path notification\nAPI.",
          "summary": "Element class mixin to optionally skip strict dirty-checking\n  for objects and arrays",
          "path": "components\\polymer\\lib\\mixins\\mutable-data.html",
          "properties": [
            {
              "name": "mutableData",
              "type": "boolean",
              "description": "Instance-level flag for configuring the dirty-checking strategy\nfor this element.  When true, Objects and Arrays will skip dirty\nchecking, otherwise strict equality checking will be used.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 169,
                  "column": 10
                },
                "end": {
                  "line": 169,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "_shouldPropertyChange",
              "description": "Overrides `Polymer.PropertyEffects` to provide option for skipping\nstrict equality checking for Objects and Arrays.\n\nWhen `this.mutableData` is true on this instance, this method\npulls the value to dirty check against from the `__dataTemp` cache\n(rather than the normal `__data` cache) for Objects.  Since the temp\ncache is cleared at the end of a turn, this implementation allows\nside-effects of deep object changes to be processed by re-setting the\nsame object (using the temp cache as an in-turn backstop to prevent\ncycles due to 2-way notification).",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 191,
                  "column": 6
                },
                "end": {
                  "line": 193,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change"
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 153,
              "column": 2
            },
            "end": {
              "line": 198,
              "column": 4
            }
          },
          "privacy": "public",
          "name": "Polymer.OptionalMutableData",
          "attributes": [
            {
              "name": "mutable-data",
              "description": "Instance-level flag for configuring the dirty-checking strategy\nfor this element.  When true, Objects and Arrays will skip dirty\nchecking, otherwise strict equality checking will be used.",
              "sourceRange": {
                "start": {
                  "line": 169,
                  "column": 10
                },
                "end": {
                  "line": 169,
                  "column": 30
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "Element mixin for recording dynamic associations between item paths in a\nmaster `items` array and a `selected` array such that path changes to the\nmaster array (at the host) element or elsewhere via data-binding) are\ncorrectly propagated to items in the selected array and vice-versa.\n\nThe `items` property accepts an array of user data, and via the\n`select(item)` and `deselect(item)` API, updates the `selected` property\nwhich may be bound to other parts of the application, and any changes to\nsub-fields of `selected` item(s) will be kept in sync with items in the\n`items` array.  When `multi` is false, `selected` is a property\nrepresenting the last selected item.  When `multi` is true, `selected`\nis an array of multiply selected items.",
          "summary": "Element mixin for recording dynamic associations between item paths in a\nmaster `items` array and a `selected` array",
          "path": "components\\polymer\\lib\\elements\\array-selector.html",
          "properties": [
            {
              "name": "__dataClientsReady",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1147,
                  "column": 8
                },
                "end": {
                  "line": 1147,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPendingClients",
              "type": "Array",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1149,
                  "column": 8
                },
                "end": {
                  "line": 1149,
                  "column": 34
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataToNotify",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1151,
                  "column": 8
                },
                "end": {
                  "line": 1151,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataLinkedPaths",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1153,
                  "column": 8
                },
                "end": {
                  "line": 1153,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHasPaths",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1155,
                  "column": 8
                },
                "end": {
                  "line": 1155,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataCompoundStorage",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1157,
                  "column": 8
                },
                "end": {
                  "line": 1157,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHost",
              "type": "Polymer_PropertyEffects",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1159,
                  "column": 8
                },
                "end": {
                  "line": 1159,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataTemp",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1161,
                  "column": 8
                },
                "end": {
                  "line": 1161,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataClientsInitialized",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1163,
                  "column": 8
                },
                "end": {
                  "line": 1163,
                  "column": 38
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__data",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1165,
                  "column": 8
                },
                "end": {
                  "line": 1165,
                  "column": 20
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPending",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1167,
                  "column": 8
                },
                "end": {
                  "line": 1167,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataOld",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1169,
                  "column": 8
                },
                "end": {
                  "line": 1169,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__computeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1171,
                  "column": 8
                },
                "end": {
                  "line": 1171,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__reflectEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1173,
                  "column": 8
                },
                "end": {
                  "line": 1173,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__notifyEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1175,
                  "column": 8
                },
                "end": {
                  "line": 1175,
                  "column": 29
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__propagateEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1177,
                  "column": 8
                },
                "end": {
                  "line": 1177,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__observeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1179,
                  "column": 8
                },
                "end": {
                  "line": 1179,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__readOnly",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1181,
                  "column": 8
                },
                "end": {
                  "line": 1181,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__templateInfo",
              "type": "!TemplateInfo",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1183,
                  "column": 8
                },
                "end": {
                  "line": 1183,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_template",
              "type": "HTMLTemplateElement",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 421,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_importPath",
              "type": "string",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 423,
                  "column": 8
                },
                "end": {
                  "line": 423,
                  "column": 25
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "rootPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 425,
                  "column": 8
                },
                "end": {
                  "line": 425,
                  "column": 22
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "importPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 427,
                  "column": 8
                },
                "end": {
                  "line": 427,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "root",
              "type": "(StampedTemplate | HTMLElement | ShadowRoot)",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 429,
                  "column": 8
                },
                "end": {
                  "line": 429,
                  "column": 18
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "$",
              "type": "!Object.<string, !Element>",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 431,
                  "column": 8
                },
                "end": {
                  "line": 431,
                  "column": 15
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "items",
              "type": "Array",
              "description": "An array containing items from which selection will be made.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 63,
                  "column": 10
                },
                "end": {
                  "line": 65,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "multi",
              "type": "boolean",
              "description": "When `true`, multiple items may be selected at once (in this case,\n`selected` is an array of currently selected items).  When `false`,\nonly one item may be selected at a time.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 72,
                  "column": 10
                },
                "end": {
                  "line": 75,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "selected",
              "type": "?(Object | Array.<!Object>)",
              "description": "When `multi` is true, this is an array that contains any selected.\nWhen `multi` is false, this is the currently selected item, or `null`\nif no item is selected.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 83,
                  "column": 10
                },
                "end": {
                  "line": 86,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            },
            {
              "name": "selectedItem",
              "type": "?Object",
              "description": "When `multi` is false, this is the currently selected item, or `null`\nif no item is selected.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 93,
                  "column": 10
                },
                "end": {
                  "line": 96,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            },
            {
              "name": "toggle",
              "type": "boolean",
              "description": "When `true`, calling `select` on an item that is already selected\nwill deselect the item.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 102,
                  "column": 10
                },
                "end": {
                  "line": 105,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            }
          ],
          "methods": [
            {
              "name": "_stampTemplate",
              "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2423,
                  "column": 6
                },
                "end": {
                  "line": 2448,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to stamp"
                }
              ],
              "return": {
                "type": "!StampedTemplate",
                "desc": "Cloned template content"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addMethodEventListenerToNode",
              "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 452,
                  "column": 6
                },
                "end": {
                  "line": 457,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add listener on"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Name of method"
                },
                {
                  "name": "context",
                  "type": "*=",
                  "description": "Context the method will be called on (defaults\n  to `node`)"
                }
              ],
              "return": {
                "type": "Function",
                "desc": "Generated handler function"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_addEventListenerToNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 467,
                  "column": 6
                },
                "end": {
                  "line": 469,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add event listener to"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to add"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_removeEventListenerFromNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 479,
                  "column": 6
                },
                "end": {
                  "line": 481,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to remove event listener from"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_createPropertyAccessor",
              "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 115,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_addPropertyToAttributeMap",
              "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 132,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                }
              ],
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_definePropertyAccessor",
              "description": "Defines a property accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 140,
                  "column": 9
                },
                "end": {
                  "line": 153,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "ready",
              "description": "Stamps the element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 540,
                  "column": 6
                },
                "end": {
                  "line": 546,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeProperties",
              "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 446,
                  "column": 6
                },
                "end": {
                  "line": 480,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeInstanceProperties",
              "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 222,
                  "column": 8
                },
                "end": {
                  "line": 224,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of property values that were overwritten\n  when creating property accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setProperty",
              "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 235,
                  "column": 8
                },
                "end": {
                  "line": 239,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_getProperty",
              "description": "Returns the value for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 247,
                  "column": 8
                },
                "end": {
                  "line": 249,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value for the given property"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setPendingProperty",
              "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 264,
                  "column": 8
                },
                "end": {
                  "line": 280,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "ext",
                  "type": "boolean=",
                  "description": "Not used here; affordance for closure"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property changed"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_invalidateProperties",
              "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 290,
                  "column": 8
                },
                "end": {
                  "line": 300,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_enableProperties",
              "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 313,
                  "column": 8
                },
                "end": {
                  "line": 322,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_flushProperties",
              "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 333,
                  "column": 8
                },
                "end": {
                  "line": 342,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertiesChange",
              "description": "Called in `_flushProperties` to determine if `_propertiesChanged`\nshould be called. The default implementation returns true if\nproperties are pending. Override to customize when\n`_propertiesChanged` is called.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 356,
                  "column": 8
                },
                "end": {
                  "line": 358,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "true if changedProps is truthy"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertiesChanged",
              "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 372,
                  "column": 8
                },
                "end": {
                  "line": 373,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertyChange",
              "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 393,
                  "column": 8
                },
                "end": {
                  "line": 400,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeChangedCallback",
              "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 412,
                  "column": 8
                },
                "end": {
                  "line": 419,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of attribute that changed"
                },
                {
                  "name": "old",
                  "type": "?string",
                  "description": "Old attribute value"
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "New attribute value"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_attributeToProperty",
              "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 433,
                  "column": 8
                },
                "end": {
                  "line": 440,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to deserialize."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "of the attribute."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertyToAttribute",
              "description": "Serializes a property to its associated attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 452,
                  "column": 8
                },
                "end": {
                  "line": 458,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name to reflect."
                },
                {
                  "name": "attribute",
                  "type": "string=",
                  "description": "Attribute name to reflect to."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Property value to refect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_valueToNodeAttribute",
              "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 473,
                  "column": 8
                },
                "end": {
                  "line": 480,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to set attribute to."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to serialize."
                },
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Attribute name to serialize to."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_serializeValue",
              "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 493,
                  "column": 8
                },
                "end": {
                  "line": 500,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Property value to serialize."
                }
              ],
              "return": {
                "type": "(string | undefined)",
                "desc": "String serialized from the provided\nproperty  value."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_deserializeValue",
              "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 514,
                  "column": 8
                },
                "end": {
                  "line": 523,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Value to deserialize."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "Type to deserialize the string to."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Typed value deserialized from the provided string."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_initializeProtoProperties",
              "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1217,
                  "column": 6
                },
                "end": {
                  "line": 1221,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Properties to initialize on the prototype"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_ensureAttribute",
              "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-accessors.html",
                "start": {
                  "line": 192,
                  "column": 6
                },
                "end": {
                  "line": 197,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to ensure is set."
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "of the attribute."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_hasAccessor",
              "description": "Returns true if this library created an accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-accessors.html",
                "start": {
                  "line": 299,
                  "column": 6
                },
                "end": {
                  "line": 301,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if an accessor was created"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_isPropertyPending",
              "description": "Returns true if the specified property has a pending change.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-accessors.html",
                "start": {
                  "line": 310,
                  "column": 6
                },
                "end": {
                  "line": 312,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if property has a pending change"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_addPropertyEffect",
              "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1255,
                  "column": 6
                },
                "end": {
                  "line": 1263,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removePropertyEffect",
              "description": "Removes the given property effect.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1273,
                  "column": 6
                },
                "end": {
                  "line": 1279,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property the effect was associated with"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasPropertyEffect",
              "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1290,
                  "column": 6
                },
                "end": {
                  "line": 1293,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "type",
                  "type": "string=",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReadOnlyEffect",
              "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1303,
                  "column": 6
                },
                "end": {
                  "line": 1305,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasNotifyEffect",
              "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1315,
                  "column": 6
                },
                "end": {
                  "line": 1317,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReflectEffect",
              "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1327,
                  "column": 6
                },
                "end": {
                  "line": 1329,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasComputedEffect",
              "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1339,
                  "column": 6
                },
                "end": {
                  "line": 1341,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setPendingPropertyOrPath",
              "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1373,
                  "column": 6
                },
                "end": {
                  "line": 1405,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(number | string)>)",
                  "description": "Path to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "shouldNotify",
                  "type": "boolean=",
                  "description": "Set to true if this change should\n cause a property notification event dispatch"
                },
                {
                  "name": "isPathNotification",
                  "type": "boolean=",
                  "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setUnmanagedPropertyToNode",
              "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1428,
                  "column": 6
                },
                "end": {
                  "line": 1436,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "The node to set a property on"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "The property to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "The value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_enqueueClient",
              "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1543,
                  "column": 6
                },
                "end": {
                  "line": 1548,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "client",
                  "type": "Object",
                  "description": "PropertyEffects client to enqueue"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_flushClients",
              "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1569,
                  "column": 6
                },
                "end": {
                  "line": 1580,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__enableOrFlushClients",
              "description": "(c) the stamped dom enables.",
              "privacy": "private",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1594,
                  "column": 6
                },
                "end": {
                  "line": 1607,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_readyClients",
              "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 558,
                  "column": 6
                },
                "end": {
                  "line": 567,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "setProperties",
              "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1636,
                  "column": 6
                },
                "end": {
                  "line": 1647,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
                },
                {
                  "name": "setReadOnly",
                  "type": "boolean=",
                  "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_propagatePropertyChanges",
              "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1734,
                  "column": 6
                },
                "end": {
                  "line": 1744,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "changedProps",
                  "type": "Object",
                  "description": "Bag of changed properties"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "linkPaths",
              "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1755,
                  "column": 6
                },
                "end": {
                  "line": 1760,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "to",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Target path to link."
                },
                {
                  "name": "from",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Source path to link."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unlinkPaths",
              "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1772,
                  "column": 6
                },
                "end": {
                  "line": 1777,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Target path to unlink."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifySplices",
              "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1809,
                  "column": 6
                },
                "end": {
                  "line": 1813,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "splices",
                  "type": "Array",
                  "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "get",
              "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1834,
                  "column": 6
                },
                "end": {
                  "line": 1836,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "set",
              "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1859,
                  "column": 6
                },
                "end": {
                  "line": 1869,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set at the specified path."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "push",
              "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1885,
                  "column": 6
                },
                "end": {
                  "line": 1894,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to push onto array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "pop",
              "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1909,
                  "column": 6
                },
                "end": {
                  "line": 1918,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "splice",
              "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1937,
                  "column": 6
                },
                "end": {
                  "line": 1974,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "start",
                  "type": "number",
                  "description": "Index from which to start removing/inserting."
                },
                {
                  "name": "deleteCount",
                  "type": "number",
                  "description": "Number of items to remove."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert into array."
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Array of removed items."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "shift",
              "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 1989,
                  "column": 6
                },
                "end": {
                  "line": 1998,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unshift",
              "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2014,
                  "column": 6
                },
                "end": {
                  "line": 2022,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert info array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifyPath",
              "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2037,
                  "column": 6
                },
                "end": {
                  "line": 2054,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Value at the path (optional)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReadOnlyProperty",
              "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2067,
                  "column": 6
                },
                "end": {
                  "line": 2074,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createPropertyObserver",
              "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2088,
                  "column": 6
                },
                "end": {
                  "line": 2098,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string | function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createMethodObserver",
              "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2111,
                  "column": 6
                },
                "end": {
                  "line": 2117,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createNotifyingProperty",
              "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2128,
                  "column": 6
                },
                "end": {
                  "line": 2136,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReflectedProperty",
              "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2147,
                  "column": 6
                },
                "end": {
                  "line": 2160,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createComputedProperty",
              "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2174,
                  "column": 6
                },
                "end": {
                  "line": 2180,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_bindTemplate",
              "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2357,
                  "column": 6
                },
                "end": {
                  "line": 2380,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                },
                {
                  "name": "instanceBinding",
                  "type": "boolean=",
                  "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removeBoundDom",
              "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2459,
                  "column": 6
                },
                "end": {
                  "line": 2480,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "!StampedTemplate",
                  "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "connectedCallback",
              "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 527,
                  "column": 6
                },
                "end": {
                  "line": 532,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "disconnectedCallback",
              "description": "Called when the element is removed from a document",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\properties-mixin.html",
                "start": {
                  "line": 215,
                  "column": 6
                },
                "end": {
                  "line": 219,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_attachDom",
              "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 581,
                  "column": 6
                },
                "end": {
                  "line": 597,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "StampedTemplate",
                  "description": "to attach to the element."
                }
              ],
              "return": {
                "type": "ShadowRoot",
                "desc": "node to which the dom has been attached."
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "updateStyles",
              "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.\n\nNote: This function does not support updating CSS mixins.\nYou can not dynamically change the value of an `@apply`.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 620,
                  "column": 6
                },
                "end": {
                  "line": 624,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "properties",
                  "type": "Object=",
                  "description": "Bag of custom property key/values to\n  apply to this element."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "resolveUrl",
              "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 641,
                  "column": 6
                },
                "end": {
                  "line": 646,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "url",
                  "type": "string",
                  "description": "URL to resolve."
                },
                {
                  "name": "base",
                  "type": "string=",
                  "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Rewritten URL relative to base"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "__updateSelection",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 121,
                  "column": 6
                },
                "end": {
                  "line": 151,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "multi"
                },
                {
                  "name": "itemsInfo"
                }
              ]
            },
            {
              "name": "__applySplices",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 153,
                  "column": 6
                },
                "end": {
                  "line": 192,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "splices"
                }
              ]
            },
            {
              "name": "__updateLinks",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 194,
                  "column": 6
                },
                "end": {
                  "line": 209,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "clearSelection",
              "description": "Clears the selection state.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 215,
                  "column": 6
                },
                "end": {
                  "line": 226,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "isSelected",
              "description": "Returns whether the item is currently selected.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 234,
                  "column": 6
                },
                "end": {
                  "line": 236,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "item",
                  "type": "*",
                  "description": "Item from `items` array to test"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the item is selected"
              }
            },
            {
              "name": "isIndexSelected",
              "description": "Returns whether the item is currently selected.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 244,
                  "column": 6
                },
                "end": {
                  "line": 246,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "idx",
                  "type": "number",
                  "description": "Index from `items` array to test"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the item is selected"
              }
            },
            {
              "name": "__deselectChangedIdx",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 248,
                  "column": 6
                },
                "end": {
                  "line": 258,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "idx"
                }
              ]
            },
            {
              "name": "__selectedIndexForItemIndex",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 260,
                  "column": 6
                },
                "end": {
                  "line": 265,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "idx"
                }
              ]
            },
            {
              "name": "deselect",
              "description": "Deselects the given item if it is already selected.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 273,
                  "column": 6
                },
                "end": {
                  "line": 288,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "item",
                  "type": "*",
                  "description": "Item from `items` array to deselect"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "deselectIndex",
              "description": "Deselects the given index if it is already selected.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 296,
                  "column": 6
                },
                "end": {
                  "line": 298,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "idx",
                  "type": "number",
                  "description": "Index from `items` array to deselect"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "select",
              "description": "Selects the given item.  When `toggle` is true, this will automatically\ndeselect the item if already selected.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 307,
                  "column": 6
                },
                "end": {
                  "line": 309,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "item",
                  "type": "*",
                  "description": "Item from `items` array to select"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "selectIndex",
              "description": "Selects the given index.  When `toggle` is true, this will automatically\ndeselect the item if already selected.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 318,
                  "column": 6
                },
                "end": {
                  "line": 334,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "idx",
                  "type": "number",
                  "description": "Index from `items` array to select"
                }
              ],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [
            {
              "name": "_parseTemplate",
              "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 197,
                  "column": 6
                },
                "end": {
                  "line": 208,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to parse"
                },
                {
                  "name": "outerTemplateInfo",
                  "type": "TemplateInfo=",
                  "description": "Template metadata from the outer\n  template, for parsing nested templates"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Parsed template metadata"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateContent",
              "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 657,
                  "column": 6
                },
                "end": {
                  "line": 660,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "templateInfo"
                },
                {
                  "name": "nodeInfo"
                }
              ],
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_parseTemplateNode",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2499,
                  "column": 6
                },
                "end": {
                  "line": 2513,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateChildNodes",
              "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 258,
                  "column": 6
                },
                "end": {
                  "line": 295,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "root",
                  "type": "Node",
                  "description": "Root node whose `childNodes` will be parsed"
                },
                {
                  "name": "templateInfo",
                  "type": "!TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "!NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNestedTemplate",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2591,
                  "column": 6
                },
                "end": {
                  "line": 2601,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateNodeAttributes",
              "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 333,
                  "column": 6
                },
                "end": {
                  "line": 342,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNodeAttribute",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2534,
                  "column": 6
                },
                "end": {
                  "line": 2575,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Attribute name"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Attribute value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_contentForTemplate",
              "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\template-stamp.html",
                "start": {
                  "line": 388,
                  "column": 6
                },
                "end": {
                  "line": 391,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "HTMLTemplateElement",
                  "description": "Template to retrieve `content` for"
                }
              ],
              "return": {
                "type": "DocumentFragment",
                "desc": "Content fragment"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "createProperties",
              "description": "Override of PropertiesChanged createProperties to create accessors\nand property effects for all of the properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 325,
                  "column": 7
                },
                "end": {
                  "line": 329,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "attributeNameForProperty",
              "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-changed.html",
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property to convert"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Attribute name corresponding to the given property."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "typeForProperty",
              "description": "Overrides `PropertiesChanged` method to return type specified in the\nstatic `properties` object for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\properties-mixin.html",
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 183,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Type to which to deserialize attribute"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "createPropertiesForAttributes",
              "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\property-accessors.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 133,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "addPropertyEffect",
              "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2220,
                  "column": 6
                },
                "end": {
                  "line": 2222,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createPropertyObserver",
              "description": "Creates a single-property observer for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2234,
                  "column": 6
                },
                "end": {
                  "line": 2236,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string | function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createMethodObserver",
              "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2251,
                  "column": 6
                },
                "end": {
                  "line": 2253,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating"
                }
              ],
              "return": {
                "type": "void",
                "desc": "whether method names should be included as a dependency to the effect."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createNotifyingProperty",
              "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2263,
                  "column": 6
                },
                "end": {
                  "line": 2265,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReadOnlyProperty",
              "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2283,
                  "column": 6
                },
                "end": {
                  "line": 2285,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReflectedProperty",
              "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2295,
                  "column": 6
                },
                "end": {
                  "line": 2297,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createComputedProperty",
              "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2313,
                  "column": 6
                },
                "end": {
                  "line": 2315,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "bindTemplate",
              "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2329,
                  "column": 6
                },
                "end": {
                  "line": 2331,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addTemplatePropertyEffect",
              "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2395,
                  "column": 6
                },
                "end": {
                  "line": 2401,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Template metadata to add effect to"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseBindings",
              "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2636,
                  "column": 6
                },
                "end": {
                  "line": 2701,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "text",
                  "type": "string",
                  "description": "Text to parse from attribute or textContent"
                },
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Current template metadata"
                }
              ],
              "return": {
                "type": "Array.<!BindingPart>",
                "desc": "Array of binding part metadata"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_evaluateBinding",
              "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\property-effects.html",
                "start": {
                  "line": 2717,
                  "column": 6
                },
                "end": {
                  "line": 2734,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "inst",
                  "type": "this",
                  "description": "Element that should be used as scope for\n  binding dependencies"
                },
                {
                  "name": "part",
                  "type": "BindingPart",
                  "description": "Binding part metadata"
                },
                {
                  "name": "path",
                  "type": "string",
                  "description": "Property/path that triggered this effect"
                },
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of current property changes"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value the binding part evaluated to"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "finalize",
              "description": "Finalizes an element definition, including ensuring any super classes\nare also finalized. This includes ensuring property\naccessors exist on the element prototype. This method calls\n`_finalizeClass` to finalize each constructor in the prototype chain.",
              "privacy": "public",
              "sourceRange": {
                "file": "..\\mixins\\properties-mixin.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 137,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_finalizeClass",
              "description": "Override of PropertiesMixin _finalizeClass to create observers and\nfind the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 293,
                  "column": 5
                },
                "end": {
                  "line": 316,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "createObservers",
              "description": "Creates observers for the given `observers` array.\nLeverages `PropertyEffects` to create observers.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 342,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "observers",
                  "type": "Object",
                  "description": "Array of observer descriptors for\n  this class"
                },
                {
                  "name": "dynamicFns",
                  "type": "Object",
                  "description": "Object containing keys for any properties\n  that are functions and should trigger the effect when the function\n  reference is changed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_processStyleText",
              "description": "Gather style text for a style element in the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 490,
                  "column": 6
                },
                "end": {
                  "line": 492,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "cssText",
                  "type": "string",
                  "description": "Text containing styling to process"
                },
                {
                  "name": "baseURI",
                  "type": "string",
                  "description": "Base URI to rebase CSS paths against"
                }
              ],
              "return": {
                "type": "string",
                "desc": "The processed CSS text"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_finalizeTemplate",
              "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "..\\mixins\\element-mixin.html",
                "start": {
                  "line": 503,
                  "column": 6
                },
                "end": {
                  "line": 514,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "is",
                  "type": "string",
                  "description": "Tag name (or type extension name) for this element"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 2
            },
            "end": {
              "line": 340,
              "column": 5
            }
          },
          "privacy": "public",
          "name": "Polymer.ArraySelectorMixin",
          "attributes": [
            {
              "name": "items",
              "description": "An array containing items from which selection will be made.",
              "sourceRange": {
                "start": {
                  "line": 63,
                  "column": 10
                },
                "end": {
                  "line": 65,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array"
            },
            {
              "name": "multi",
              "description": "When `true`, multiple items may be selected at once (in this case,\n`selected` is an array of currently selected items).  When `false`,\nonly one item may be selected at a time.",
              "sourceRange": {
                "start": {
                  "line": 72,
                  "column": 10
                },
                "end": {
                  "line": 75,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "selected",
              "description": "When `multi` is true, this is an array that contains any selected.\nWhen `multi` is false, this is the currently selected item, or `null`\nif no item is selected.",
              "sourceRange": {
                "start": {
                  "line": 83,
                  "column": 10
                },
                "end": {
                  "line": 86,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "?(Object | Array.<!Object>)"
            },
            {
              "name": "selected-item",
              "description": "When `multi` is false, this is the currently selected item, or `null`\nif no item is selected.",
              "sourceRange": {
                "start": {
                  "line": 93,
                  "column": 10
                },
                "end": {
                  "line": 96,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "?Object"
            },
            {
              "name": "toggle",
              "description": "When `true`, calling `select` on an item that is already selected\nwill deselect the item.",
              "sourceRange": {
                "start": {
                  "line": 102,
                  "column": 10
                },
                "end": {
                  "line": 105,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "mixins": [
            "Polymer.ElementMixin"
          ]
        },
        {
          "description": "Element class mixin that allows the element to boot up in a non-enabled\nstate when the `disable-upgrade` attribute is present. This mixin is\ndesigned to be used with element classes like Polymer.Element that perform\ninitial startup work when they are first connected. When the\n`disable-upgrade` attribute is removed, if the element is connected, it\nboots up and \"enables\" as it otherwise would; if it is not connected, the\nelement boots up when it is next connected.\n\nUsing `disable-upgrade` with Polymer.Element prevents any data propagation\nto the element, any element DOM from stamping, or any work done in\nconnected/disconnctedCallback from occuring, but it does not prevent work\ndone in the element constructor.\n\nNote, this mixin must be applied on top of any element class that\nitself implements a `connectedCallback` so that it can control the work\ndone in `connectedCallback`. For example,\n\n    MyClass = Polymer.DisableUpgradeMixin(class extends BaseClass {...});",
          "summary": "",
          "path": "components\\polymer\\lib\\mixins\\disable-upgrade-mixin.html",
          "properties": [
            {
              "name": "__dataClientsReady",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1147,
                  "column": 8
                },
                "end": {
                  "line": 1147,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPendingClients",
              "type": "Array",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1149,
                  "column": 8
                },
                "end": {
                  "line": 1149,
                  "column": 34
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataToNotify",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1151,
                  "column": 8
                },
                "end": {
                  "line": 1151,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataLinkedPaths",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1153,
                  "column": 8
                },
                "end": {
                  "line": 1153,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHasPaths",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1155,
                  "column": 8
                },
                "end": {
                  "line": 1155,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataCompoundStorage",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1157,
                  "column": 8
                },
                "end": {
                  "line": 1157,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHost",
              "type": "Polymer_PropertyEffects",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1159,
                  "column": 8
                },
                "end": {
                  "line": 1159,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataTemp",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1161,
                  "column": 8
                },
                "end": {
                  "line": 1161,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataClientsInitialized",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1163,
                  "column": 8
                },
                "end": {
                  "line": 1163,
                  "column": 38
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__data",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1165,
                  "column": 8
                },
                "end": {
                  "line": 1165,
                  "column": 20
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPending",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1167,
                  "column": 8
                },
                "end": {
                  "line": 1167,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataOld",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1169,
                  "column": 8
                },
                "end": {
                  "line": 1169,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__computeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1171,
                  "column": 8
                },
                "end": {
                  "line": 1171,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__reflectEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1173,
                  "column": 8
                },
                "end": {
                  "line": 1173,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__notifyEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1175,
                  "column": 8
                },
                "end": {
                  "line": 1175,
                  "column": 29
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__propagateEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1177,
                  "column": 8
                },
                "end": {
                  "line": 1177,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__observeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1179,
                  "column": 8
                },
                "end": {
                  "line": 1179,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__readOnly",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1181,
                  "column": 8
                },
                "end": {
                  "line": 1181,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__templateInfo",
              "type": "!TemplateInfo",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1183,
                  "column": 8
                },
                "end": {
                  "line": 1183,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_template",
              "type": "HTMLTemplateElement",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "element-mixin.html",
                "start": {
                  "line": 421,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_importPath",
              "type": "string",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "element-mixin.html",
                "start": {
                  "line": 423,
                  "column": 8
                },
                "end": {
                  "line": 423,
                  "column": 25
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "rootPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "element-mixin.html",
                "start": {
                  "line": 425,
                  "column": 8
                },
                "end": {
                  "line": 425,
                  "column": 22
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "importPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "element-mixin.html",
                "start": {
                  "line": 427,
                  "column": 8
                },
                "end": {
                  "line": 427,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "root",
              "type": "(StampedTemplate | HTMLElement | ShadowRoot)",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "element-mixin.html",
                "start": {
                  "line": 429,
                  "column": 8
                },
                "end": {
                  "line": 429,
                  "column": 18
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "$",
              "type": "!Object.<string, !Element>",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "element-mixin.html",
                "start": {
                  "line": 431,
                  "column": 8
                },
                "end": {
                  "line": 431,
                  "column": 15
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            }
          ],
          "methods": [
            {
              "name": "_stampTemplate",
              "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2423,
                  "column": 6
                },
                "end": {
                  "line": 2448,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to stamp"
                }
              ],
              "return": {
                "type": "!StampedTemplate",
                "desc": "Cloned template content"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addMethodEventListenerToNode",
              "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
              "privacy": "protected",
              "sourceRange": {
                "file": "template-stamp.html",
                "start": {
                  "line": 452,
                  "column": 6
                },
                "end": {
                  "line": 457,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add listener on"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Name of method"
                },
                {
                  "name": "context",
                  "type": "*=",
                  "description": "Context the method will be called on (defaults\n  to `node`)"
                }
              ],
              "return": {
                "type": "Function",
                "desc": "Generated handler function"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_addEventListenerToNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "template-stamp.html",
                "start": {
                  "line": 467,
                  "column": 6
                },
                "end": {
                  "line": 469,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add event listener to"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to add"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_removeEventListenerFromNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "template-stamp.html",
                "start": {
                  "line": 479,
                  "column": 6
                },
                "end": {
                  "line": 481,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to remove event listener from"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_createPropertyAccessor",
              "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 115,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_addPropertyToAttributeMap",
              "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 132,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                }
              ],
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_definePropertyAccessor",
              "description": "Defines a property accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 140,
                  "column": 9
                },
                "end": {
                  "line": 153,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "ready",
              "description": "Stamps the element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "element-mixin.html",
                "start": {
                  "line": 540,
                  "column": 6
                },
                "end": {
                  "line": 546,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeProperties",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 78,
                  "column": 6
                },
                "end": {
                  "line": 78,
                  "column": 32
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_initializeInstanceProperties",
              "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 222,
                  "column": 8
                },
                "end": {
                  "line": 224,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of property values that were overwritten\n  when creating property accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setProperty",
              "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 235,
                  "column": 8
                },
                "end": {
                  "line": 239,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_getProperty",
              "description": "Returns the value for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 247,
                  "column": 8
                },
                "end": {
                  "line": 249,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value for the given property"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setPendingProperty",
              "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 264,
                  "column": 8
                },
                "end": {
                  "line": 280,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "ext",
                  "type": "boolean=",
                  "description": "Not used here; affordance for closure"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property changed"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_invalidateProperties",
              "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 290,
                  "column": 8
                },
                "end": {
                  "line": 300,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_enableProperties",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 90,
                  "column": 6
                },
                "end": {
                  "line": 97,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_flushProperties",
              "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 333,
                  "column": 8
                },
                "end": {
                  "line": 342,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertiesChange",
              "description": "Called in `_flushProperties` to determine if `_propertiesChanged`\nshould be called. The default implementation returns true if\nproperties are pending. Override to customize when\n`_propertiesChanged` is called.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 356,
                  "column": 8
                },
                "end": {
                  "line": 358,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "true if changedProps is truthy"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertiesChanged",
              "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 372,
                  "column": 8
                },
                "end": {
                  "line": 373,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertyChange",
              "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 393,
                  "column": 8
                },
                "end": {
                  "line": 400,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeChangedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 62,
                  "column": 6
                },
                "end": {
                  "line": 70,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name"
                },
                {
                  "name": "old"
                },
                {
                  "name": "value"
                }
              ]
            },
            {
              "name": "_attributeToProperty",
              "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 433,
                  "column": 8
                },
                "end": {
                  "line": 440,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to deserialize."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "of the attribute."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertyToAttribute",
              "description": "Serializes a property to its associated attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 452,
                  "column": 8
                },
                "end": {
                  "line": 458,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name to reflect."
                },
                {
                  "name": "attribute",
                  "type": "string=",
                  "description": "Attribute name to reflect to."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Property value to refect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_valueToNodeAttribute",
              "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 473,
                  "column": 8
                },
                "end": {
                  "line": 480,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to set attribute to."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to serialize."
                },
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Attribute name to serialize to."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_serializeValue",
              "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 493,
                  "column": 8
                },
                "end": {
                  "line": 500,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Property value to serialize."
                }
              ],
              "return": {
                "type": "(string | undefined)",
                "desc": "String serialized from the provided\nproperty  value."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_deserializeValue",
              "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 514,
                  "column": 8
                },
                "end": {
                  "line": 523,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Value to deserialize."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "Type to deserialize the string to."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Typed value deserialized from the provided string."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_initializeProtoProperties",
              "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1217,
                  "column": 6
                },
                "end": {
                  "line": 1221,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Properties to initialize on the prototype"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_ensureAttribute",
              "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-accessors.html",
                "start": {
                  "line": 192,
                  "column": 6
                },
                "end": {
                  "line": 197,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to ensure is set."
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "of the attribute."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_hasAccessor",
              "description": "Returns true if this library created an accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-accessors.html",
                "start": {
                  "line": 299,
                  "column": 6
                },
                "end": {
                  "line": 301,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if an accessor was created"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_isPropertyPending",
              "description": "Returns true if the specified property has a pending change.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-accessors.html",
                "start": {
                  "line": 310,
                  "column": 6
                },
                "end": {
                  "line": 312,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if property has a pending change"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_addPropertyEffect",
              "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1255,
                  "column": 6
                },
                "end": {
                  "line": 1263,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removePropertyEffect",
              "description": "Removes the given property effect.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1273,
                  "column": 6
                },
                "end": {
                  "line": 1279,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property the effect was associated with"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasPropertyEffect",
              "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1290,
                  "column": 6
                },
                "end": {
                  "line": 1293,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "type",
                  "type": "string=",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReadOnlyEffect",
              "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1303,
                  "column": 6
                },
                "end": {
                  "line": 1305,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasNotifyEffect",
              "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1315,
                  "column": 6
                },
                "end": {
                  "line": 1317,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReflectEffect",
              "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1327,
                  "column": 6
                },
                "end": {
                  "line": 1329,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasComputedEffect",
              "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1339,
                  "column": 6
                },
                "end": {
                  "line": 1341,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setPendingPropertyOrPath",
              "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1373,
                  "column": 6
                },
                "end": {
                  "line": 1405,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(number | string)>)",
                  "description": "Path to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "shouldNotify",
                  "type": "boolean=",
                  "description": "Set to true if this change should\n cause a property notification event dispatch"
                },
                {
                  "name": "isPathNotification",
                  "type": "boolean=",
                  "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setUnmanagedPropertyToNode",
              "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1428,
                  "column": 6
                },
                "end": {
                  "line": 1436,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "The node to set a property on"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "The property to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "The value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_enqueueClient",
              "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1543,
                  "column": 6
                },
                "end": {
                  "line": 1548,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "client",
                  "type": "Object",
                  "description": "PropertyEffects client to enqueue"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_flushClients",
              "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1569,
                  "column": 6
                },
                "end": {
                  "line": 1580,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__enableOrFlushClients",
              "description": "(c) the stamped dom enables.",
              "privacy": "private",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1594,
                  "column": 6
                },
                "end": {
                  "line": 1607,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_readyClients",
              "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
              "privacy": "protected",
              "sourceRange": {
                "file": "element-mixin.html",
                "start": {
                  "line": 558,
                  "column": 6
                },
                "end": {
                  "line": 567,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "setProperties",
              "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
              "privacy": "public",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1636,
                  "column": 6
                },
                "end": {
                  "line": 1647,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
                },
                {
                  "name": "setReadOnly",
                  "type": "boolean=",
                  "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_propagatePropertyChanges",
              "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1734,
                  "column": 6
                },
                "end": {
                  "line": 1744,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "changedProps",
                  "type": "Object",
                  "description": "Bag of changed properties"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "linkPaths",
              "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
              "privacy": "public",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1755,
                  "column": 6
                },
                "end": {
                  "line": 1760,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "to",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Target path to link."
                },
                {
                  "name": "from",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Source path to link."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unlinkPaths",
              "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
              "privacy": "public",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1772,
                  "column": 6
                },
                "end": {
                  "line": 1777,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Target path to unlink."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifySplices",
              "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
              "privacy": "public",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1809,
                  "column": 6
                },
                "end": {
                  "line": 1813,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "splices",
                  "type": "Array",
                  "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "get",
              "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
              "privacy": "public",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1834,
                  "column": 6
                },
                "end": {
                  "line": 1836,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "set",
              "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
              "privacy": "public",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1859,
                  "column": 6
                },
                "end": {
                  "line": 1869,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set at the specified path."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "push",
              "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1885,
                  "column": 6
                },
                "end": {
                  "line": 1894,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to push onto array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "pop",
              "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1909,
                  "column": 6
                },
                "end": {
                  "line": 1918,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "splice",
              "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1937,
                  "column": 6
                },
                "end": {
                  "line": 1974,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "start",
                  "type": "number",
                  "description": "Index from which to start removing/inserting."
                },
                {
                  "name": "deleteCount",
                  "type": "number",
                  "description": "Number of items to remove."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert into array."
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Array of removed items."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "shift",
              "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 1989,
                  "column": 6
                },
                "end": {
                  "line": 1998,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unshift",
              "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2014,
                  "column": 6
                },
                "end": {
                  "line": 2022,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert info array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifyPath",
              "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
              "privacy": "public",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2037,
                  "column": 6
                },
                "end": {
                  "line": 2054,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Value at the path (optional)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReadOnlyProperty",
              "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2067,
                  "column": 6
                },
                "end": {
                  "line": 2074,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createPropertyObserver",
              "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2088,
                  "column": 6
                },
                "end": {
                  "line": 2098,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string | function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createMethodObserver",
              "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2111,
                  "column": 6
                },
                "end": {
                  "line": 2117,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createNotifyingProperty",
              "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2128,
                  "column": 6
                },
                "end": {
                  "line": 2136,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReflectedProperty",
              "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2147,
                  "column": 6
                },
                "end": {
                  "line": 2160,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createComputedProperty",
              "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2174,
                  "column": 6
                },
                "end": {
                  "line": 2180,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_bindTemplate",
              "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2357,
                  "column": 6
                },
                "end": {
                  "line": 2380,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                },
                {
                  "name": "instanceBinding",
                  "type": "boolean=",
                  "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removeBoundDom",
              "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2459,
                  "column": 6
                },
                "end": {
                  "line": 2480,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "!StampedTemplate",
                  "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 82,
                  "column": 6
                },
                "end": {
                  "line": 86,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 101,
                  "column": 6
                },
                "end": {
                  "line": 105,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_attachDom",
              "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
              "privacy": "protected",
              "sourceRange": {
                "file": "element-mixin.html",
                "start": {
                  "line": 581,
                  "column": 6
                },
                "end": {
                  "line": 597,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "StampedTemplate",
                  "description": "to attach to the element."
                }
              ],
              "return": {
                "type": "ShadowRoot",
                "desc": "node to which the dom has been attached."
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "updateStyles",
              "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.\n\nNote: This function does not support updating CSS mixins.\nYou can not dynamically change the value of an `@apply`.",
              "privacy": "public",
              "sourceRange": {
                "file": "element-mixin.html",
                "start": {
                  "line": 620,
                  "column": 6
                },
                "end": {
                  "line": 624,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "properties",
                  "type": "Object=",
                  "description": "Bag of custom property key/values to\n  apply to this element."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "resolveUrl",
              "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
              "privacy": "public",
              "sourceRange": {
                "file": "element-mixin.html",
                "start": {
                  "line": 641,
                  "column": 6
                },
                "end": {
                  "line": 646,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "url",
                  "type": "string",
                  "description": "URL to resolve."
                },
                {
                  "name": "base",
                  "type": "string=",
                  "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Rewritten URL relative to base"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            }
          ],
          "staticMethods": [
            {
              "name": "_parseTemplate",
              "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "template-stamp.html",
                "start": {
                  "line": 197,
                  "column": 6
                },
                "end": {
                  "line": 208,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to parse"
                },
                {
                  "name": "outerTemplateInfo",
                  "type": "TemplateInfo=",
                  "description": "Template metadata from the outer\n  template, for parsing nested templates"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Parsed template metadata"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateContent",
              "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
              "privacy": "protected",
              "sourceRange": {
                "file": "element-mixin.html",
                "start": {
                  "line": 657,
                  "column": 6
                },
                "end": {
                  "line": 660,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "templateInfo"
                },
                {
                  "name": "nodeInfo"
                }
              ],
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_parseTemplateNode",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2499,
                  "column": 6
                },
                "end": {
                  "line": 2513,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateChildNodes",
              "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
              "privacy": "protected",
              "sourceRange": {
                "file": "template-stamp.html",
                "start": {
                  "line": 258,
                  "column": 6
                },
                "end": {
                  "line": 295,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "root",
                  "type": "Node",
                  "description": "Root node whose `childNodes` will be parsed"
                },
                {
                  "name": "templateInfo",
                  "type": "!TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "!NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNestedTemplate",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2591,
                  "column": 6
                },
                "end": {
                  "line": 2601,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateNodeAttributes",
              "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
              "privacy": "protected",
              "sourceRange": {
                "file": "template-stamp.html",
                "start": {
                  "line": 333,
                  "column": 6
                },
                "end": {
                  "line": 342,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNodeAttribute",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2534,
                  "column": 6
                },
                "end": {
                  "line": 2575,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Attribute name"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Attribute value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_contentForTemplate",
              "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "template-stamp.html",
                "start": {
                  "line": 388,
                  "column": 6
                },
                "end": {
                  "line": 391,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "HTMLTemplateElement",
                  "description": "Template to retrieve `content` for"
                }
              ],
              "return": {
                "type": "DocumentFragment",
                "desc": "Content fragment"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "createProperties",
              "description": "Override of PropertiesChanged createProperties to create accessors\nand property effects for all of the properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "element-mixin.html",
                "start": {
                  "line": 325,
                  "column": 7
                },
                "end": {
                  "line": 329,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "attributeNameForProperty",
              "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-changed.html",
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property to convert"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Attribute name corresponding to the given property."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "typeForProperty",
              "description": "Overrides `PropertiesChanged` method to return type specified in the\nstatic `properties` object for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "properties-mixin.html",
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 183,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Type to which to deserialize attribute"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "createPropertiesForAttributes",
              "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
              "privacy": "public",
              "sourceRange": {
                "file": "property-accessors.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 133,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "addPropertyEffect",
              "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2220,
                  "column": 6
                },
                "end": {
                  "line": 2222,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createPropertyObserver",
              "description": "Creates a single-property observer for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2234,
                  "column": 6
                },
                "end": {
                  "line": 2236,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string | function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createMethodObserver",
              "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2251,
                  "column": 6
                },
                "end": {
                  "line": 2253,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating"
                }
              ],
              "return": {
                "type": "void",
                "desc": "whether method names should be included as a dependency to the effect."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createNotifyingProperty",
              "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2263,
                  "column": 6
                },
                "end": {
                  "line": 2265,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReadOnlyProperty",
              "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2283,
                  "column": 6
                },
                "end": {
                  "line": 2285,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReflectedProperty",
              "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2295,
                  "column": 6
                },
                "end": {
                  "line": 2297,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createComputedProperty",
              "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2313,
                  "column": 6
                },
                "end": {
                  "line": 2315,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "bindTemplate",
              "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2329,
                  "column": 6
                },
                "end": {
                  "line": 2331,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addTemplatePropertyEffect",
              "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2395,
                  "column": 6
                },
                "end": {
                  "line": 2401,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Template metadata to add effect to"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseBindings",
              "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2636,
                  "column": 6
                },
                "end": {
                  "line": 2701,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "text",
                  "type": "string",
                  "description": "Text to parse from attribute or textContent"
                },
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Current template metadata"
                }
              ],
              "return": {
                "type": "Array.<!BindingPart>",
                "desc": "Array of binding part metadata"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_evaluateBinding",
              "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
              "privacy": "protected",
              "sourceRange": {
                "file": "property-effects.html",
                "start": {
                  "line": 2717,
                  "column": 6
                },
                "end": {
                  "line": 2734,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "inst",
                  "type": "this",
                  "description": "Element that should be used as scope for\n  binding dependencies"
                },
                {
                  "name": "part",
                  "type": "BindingPart",
                  "description": "Binding part metadata"
                },
                {
                  "name": "path",
                  "type": "string",
                  "description": "Property/path that triggered this effect"
                },
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of current property changes"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value the binding part evaluated to"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "finalize",
              "description": "Finalizes an element definition, including ensuring any super classes\nare also finalized. This includes ensuring property\naccessors exist on the element prototype. This method calls\n`_finalizeClass` to finalize each constructor in the prototype chain.",
              "privacy": "public",
              "sourceRange": {
                "file": "properties-mixin.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 137,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_finalizeClass",
              "description": "Override of PropertiesMixin _finalizeClass to create observers and\nfind the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "element-mixin.html",
                "start": {
                  "line": 293,
                  "column": 5
                },
                "end": {
                  "line": 316,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "createObservers",
              "description": "Creates observers for the given `observers` array.\nLeverages `PropertyEffects` to create observers.",
              "privacy": "protected",
              "sourceRange": {
                "file": "element-mixin.html",
                "start": {
                  "line": 342,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "observers",
                  "type": "Object",
                  "description": "Array of observer descriptors for\n  this class"
                },
                {
                  "name": "dynamicFns",
                  "type": "Object",
                  "description": "Object containing keys for any properties\n  that are functions and should trigger the effect when the function\n  reference is changed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_processStyleText",
              "description": "Gather style text for a style element in the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "element-mixin.html",
                "start": {
                  "line": 490,
                  "column": 6
                },
                "end": {
                  "line": 492,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "cssText",
                  "type": "string",
                  "description": "Text containing styling to process"
                },
                {
                  "name": "baseURI",
                  "type": "string",
                  "description": "Base URI to rebase CSS paths against"
                }
              ],
              "return": {
                "type": "string",
                "desc": "The processed CSS text"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_finalizeTemplate",
              "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "element-mixin.html",
                "start": {
                  "line": 503,
                  "column": 6
                },
                "end": {
                  "line": 514,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "is",
                  "type": "string",
                  "description": "Tag name (or type extension name) for this element"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 2
            },
            "end": {
              "line": 111,
              "column": 4
            }
          },
          "privacy": "public",
          "name": "Polymer.DisableUpgradeMixin",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "mixins": [
            "Polymer.ElementMixin"
          ]
        }
      ],
      "functions": [
        {
          "name": "Polymer.setRootPath",
          "description": "Sets the global rootPath property used by `Polymer.ElementMixin` and\navailable via `Polymer.rootPath`.",
          "summary": "",
          "sourceRange": {
            "file": "components\\polymer\\lib\\utils\\settings.html",
            "start": {
              "line": 57,
              "column": 2
            },
            "end": {
              "line": 59,
              "column": 4
            }
          },
          "privacy": "public",
          "params": [
            {
              "type": "string",
              "desc": "The new root path",
              "name": "path"
            }
          ],
          "return": {
            "type": "void",
            "desc": ""
          }
        },
        {
          "name": "Polymer.setSanitizeDOMValue",
          "description": "Sets the global sanitizeDOMValue available via `Polymer.sanitizeDOMValue`.",
          "summary": "",
          "sourceRange": {
            "file": "components\\polymer\\lib\\utils\\settings.html",
            "start": {
              "line": 90,
              "column": 2
            },
            "end": {
              "line": 92,
              "column": 4
            }
          },
          "privacy": "public",
          "params": [
            {
              "type": "((function (*, string, string, Node): *) | undefined)",
              "desc": "the global sanitizeDOMValue callback",
              "name": "newSanitizeDOMValue"
            }
          ],
          "return": {
            "type": "void",
            "desc": ""
          }
        },
        {
          "name": "Polymer.setPassiveTouchGestures",
          "description": "Sets `passiveTouchGestures` globally for all elements using Polymer Gestures.",
          "summary": "",
          "sourceRange": {
            "file": "components\\polymer\\lib\\utils\\settings.html",
            "start": {
              "line": 113,
              "column": 2
            },
            "end": {
              "line": 115,
              "column": 4
            }
          },
          "privacy": "public",
          "params": [
            {
              "type": "boolean",
              "desc": "enable or disable passive touch gestures globally",
              "name": "usePassive"
            }
          ],
          "return": {
            "type": "void",
            "desc": ""
          }
        },
        {
          "name": "Polymer.dedupingMixin",
          "description": "Wraps an ES6 class expression mixin such that the mixin is only applied\nif it has not already been applied its base argument. Also memoizes mixin\napplications.",
          "summary": "",
          "sourceRange": {
            "file": "components\\polymer\\lib\\utils\\mixin.html",
            "start": {
              "line": 43,
              "column": 2
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "privacy": "public",
          "params": [
            {
              "type": "T",
              "desc": "ES6 class expression mixin to wrap",
              "name": "mixin"
            }
          ],
          "return": {
            "type": "T",
            "desc": ""
          }
        },
        {
          "name": "Polymer.importHref",
          "description": "Convenience method for importing an HTML document imperatively.\n\nThis method creates a new `<link rel=\"import\">` element with\nthe provided URL and appends it to the document to start loading.\nIn the `onload` callback, the `import` property of the `link`\nelement will contain the imported document contents.",
          "summary": "",
          "sourceRange": {
            "file": "components\\polymer\\lib\\utils\\import-href.html",
            "start": {
              "line": 46,
              "column": 2
            },
            "end": {
              "line": 103,
              "column": 4
            }
          },
          "privacy": "public",
          "params": [
            {
              "type": "string",
              "desc": "URL to document to load.",
              "name": "href"
            },
            {
              "type": "?function (!Event): void=",
              "desc": "Callback to notify when an import successfully\n  loaded.",
              "name": "onload"
            },
            {
              "type": "?function (!ErrorEvent): void=",
              "desc": "Callback to notify when an import\n  unsuccessfully loaded.",
              "name": "onerror"
            },
            {
              "type": "boolean=",
              "desc": "True if the import should be loaded `async`.\n  Defaults to `false`.",
              "name": "optAsync"
            }
          ],
          "return": {
            "type": "!HTMLLinkElement",
            "desc": "The link element for the URL to be loaded."
          }
        },
        {
          "name": "Polymer.enqueueDebouncer",
          "description": "Adds a `Polymer.Debouncer` to a list of globally flushable tasks.",
          "summary": "",
          "sourceRange": {
            "file": "components\\polymer\\lib\\utils\\flush.html",
            "start": {
              "line": 23,
              "column": 2
            },
            "end": {
              "line": 25,
              "column": 4
            }
          },
          "privacy": "public",
          "params": [
            {
              "type": "!Polymer.Debouncer",
              "desc": "Debouncer to enqueue",
              "name": "debouncer"
            }
          ],
          "return": {
            "type": "void",
            "desc": ""
          }
        },
        {
          "name": "Polymer.flush",
          "description": "Forces several classes of asynchronously queued tasks to flush:\n- Debouncers added via `enqueueDebouncer`\n- ShadyDOM distribution",
          "summary": "",
          "sourceRange": {
            "file": "components\\polymer\\lib\\utils\\flush.html",
            "start": {
              "line": 49,
              "column": 2
            },
            "end": {
              "line": 58,
              "column": 4
            }
          },
          "privacy": "public",
          "params": [],
          "return": {
            "type": "void",
            "desc": ""
          }
        },
        {
          "name": "Polymer.dom",
          "description": "Legacy DOM and Event manipulation API wrapper factory used to abstract\ndifferences between native Shadow DOM and \"Shady DOM\" when polyfilling on\nolder browsers.\n\nNote that in Polymer 2.x use of `Polymer.dom` is no longer required and\nin the majority of cases simply facades directly to the standard native\nAPI.",
          "summary": "Legacy DOM and Event manipulation API wrapper factory used to\nabstract differences between native Shadow DOM and \"Shady DOM.\"",
          "sourceRange": {
            "file": "components\\polymer\\lib\\legacy\\polymer.dom.html",
            "start": {
              "line": 367,
              "column": 2
            },
            "end": {
              "line": 379,
              "column": 4
            }
          },
          "privacy": "public",
          "params": [
            {
              "type": "(Node | Event)=",
              "desc": "Node or event to operate on",
              "name": "obj"
            }
          ],
          "return": {
            "type": "(!DomApi | !EventApi)",
            "desc": "Wrapper providing either node API or event API"
          }
        },
        {
          "name": "Polymer.mixinBehaviors",
          "description": "Applies a \"legacy\" behavior or array of behaviors to the provided class.\n\nNote: this method will automatically also apply the `Polymer.LegacyElementMixin`\nto ensure that any legacy behaviors can rely on legacy Polymer API on\nthe underlying element.",
          "summary": "",
          "sourceRange": {
            "file": "components\\polymer\\lib\\legacy\\class.html",
            "start": {
              "line": 43,
              "column": 4
            },
            "end": {
              "line": 66,
              "column": 5
            }
          },
          "privacy": "public",
          "params": [
            {
              "type": "(!Object | !Array.<!Object>)",
              "desc": "Behavior object or array of behaviors.",
              "name": "behaviors"
            },
            {
              "type": "function (new: T)",
              "desc": "Element class.",
              "name": "klass"
            }
          ],
          "return": {
            "type": "function (new: T)",
            "desc": "Returns a new Element class extended by the\npassed in `behaviors` and also by `Polymer.LegacyElementMixin`."
          }
        },
        {
          "name": "Polymer.Class",
          "description": "Generates a class that extends `Polymer.LegacyElement` based on the\nprovided info object.  Metadata objects on the `info` object\n(`properties`, `observers`, `listeners`, `behaviors`, `is`) are used\nfor Polymer's meta-programming systems, and any functions are copied\nto the generated class.\n\nValid \"metadata\" values are as follows:\n\n`is`: String providing the tag name to register the element under. In\naddition, if a `dom-module` with the same id exists, the first template\nin that `dom-module` will be stamped into the shadow root of this element,\nwith support for declarative event listeners (`on-...`), Polymer data\nbindings (`[[...]]` and `{{...}}`), and id-based node finding into\n`this.$`.\n\n`properties`: Object describing property-related metadata used by Polymer\nfeatures (key: property names, value: object containing property metadata).\nValid keys in per-property metadata include:\n- `type` (String|Number|Object|Array|...): Used by\n  `attributeChangedCallback` to determine how string-based attributes\n  are deserialized to JavaScript property values.\n- `notify` (boolean): Causes a change in the property to fire a\n  non-bubbling event called `<property>-changed`. Elements that have\n  enabled two-way binding to the property use this event to observe changes.\n- `readOnly` (boolean): Creates a getter for the property, but no setter.\n  To set a read-only property, use the private setter method\n  `_setProperty(property, value)`.\n- `observer` (string): Observer method name that will be called when\n  the property changes. The arguments of the method are\n  `(value, previousValue)`.\n- `computed` (string): String describing method and dependent properties\n  for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).\n  Computed properties are read-only by default and can only be changed\n  via the return value of the computing method.\n\n`observers`: Array of strings describing multi-property observer methods\n and their dependent properties (e.g. `'observeABC(a, b, c)'`).\n\n`listeners`: Object describing event listeners to be added to each\n instance of this element (key: event name, value: method name).\n\n`behaviors`: Array of additional `info` objects containing metadata\nand callbacks in the same format as the `info` object here which are\nmerged into this element.\n\n`hostAttributes`: Object listing attributes to be applied to the host\n once created (key: attribute name, value: attribute value).  Values\n are serialized based on the type of the value.  Host attributes should\n generally be limited to attributes such as `tabIndex` and `aria-...`.\n Attributes in `hostAttributes` are only applied if a user-supplied\n attribute is not already present (attributes in markup override\n `hostAttributes`).\n\nIn addition, the following Polymer-specific callbacks may be provided:\n- `registered`: called after first instance of this element,\n- `created`: called during `constructor`\n- `attached`: called during `connectedCallback`\n- `detached`: called during `disconnectedCallback`\n- `ready`: called before first `attached`, after all properties of\n  this element have been propagated to its template and all observers\n  have run",
          "summary": "",
          "sourceRange": {
            "file": "components\\polymer\\lib\\legacy\\class.html",
            "start": {
              "line": 358,
              "column": 4
            },
            "end": {
              "line": 369,
              "column": 6
            }
          },
          "privacy": "public",
          "params": [
            {
              "type": "!PolymerInit",
              "desc": "Object containing Polymer metadata and functions\n  to become class methods.",
              "name": "info"
            }
          ],
          "return": {
            "type": "function (new: HTMLElement)",
            "desc": "Generated class"
          }
        },
        {
          "name": "Polymer.html",
          "description": "A template literal tag that creates an HTML <template> element from the\ncontents of the string.\n\nThis allows you to write a Polymer Template in JavaScript.\n\nTemplates can be composed by interpolating `HTMLTemplateElement`s in\nexpressions in the JavaScript template literal. The nested template's\n`innerHTML` is included in the containing template.  The only other\nvalues allowed in expressions are those returned from `Polymer.htmlLiteral`\nwhich ensures only literal values from JS source ever reach the HTML, to\nguard against XSS risks.\n\nAll other values are disallowed in expressions to help prevent XSS\nattacks; however, `Polymer.htmlLiteral` can be used to compose static\nstring values into templates. This is useful to compose strings into\nplaces that do not accept html, like the css text of a `style`\nelement.\n\nExample:\n\n    static get template() {\n      return Polymer.html`\n        <style>:host{ content:\"...\" }</style>\n        <div class=\"shadowed\">${this.partialTemplate}</div>\n        ${super.template}\n      `;\n    }\n    static get partialTemplate() { return Polymer.html`<span>Partial!</span>`; }",
          "summary": "",
          "sourceRange": {
            "file": "components\\polymer\\lib\\utils\\html-tag.html",
            "start": {
              "line": 93,
              "column": 4
            },
            "end": {
              "line": 98,
              "column": 6
            }
          },
          "privacy": "public",
          "params": [
            {
              "type": "!ITemplateArray",
              "desc": "Constant parts of tagged template literal",
              "name": "strings"
            },
            {
              "type": "...*",
              "desc": "Variable parts of tagged template literal",
              "name": "values"
            }
          ],
          "return": {
            "type": "!HTMLTemplateElement",
            "desc": "Constructed HTMLTemplateElement"
          }
        },
        {
          "name": "Polymer.htmlLiteral",
          "description": "An html literal tag that can be used with `Polymer.html` to compose.\na literal string.\n\nExample:\n\n    static get template() {\n      return Polymer.html`\n        <style>\n          :host { display: block; }\n          ${styleTemplate}\n        </style>\n        <div class=\"shadowed\">${staticValue}</div>\n        ${super.template}\n      `;\n    }\n    static get styleTemplate() { return Polymer.htmlLiteral`.shadowed { background: gray; }`; }",
          "summary": "",
          "sourceRange": {
            "file": "components\\polymer\\lib\\utils\\html-tag.html",
            "start": {
              "line": 123,
              "column": 4
            },
            "end": {
              "line": 126,
              "column": 6
            }
          },
          "privacy": "public",
          "params": [
            {
              "type": "!ITemplateArray",
              "desc": "Constant parts of tagged template literal",
              "name": "strings"
            },
            {
              "type": "...*",
              "desc": "Variable parts of tagged template literal",
              "name": "values"
            }
          ],
          "return": {
            "type": "!LiteralString",
            "desc": "Constructed literal string"
          }
        }
      ],
      "metadata": {
        "polymer": {
          "behaviors": [
            {
              "description": "The `Polymer.Templatizer` behavior adds methods to generate instances of\ntemplates that are each managed by an anonymous `Polymer.PropertyEffects`\ninstance where data-bindings in the stamped template content are bound to\naccessors on itself.\n\nThis behavior is provided in Polymer 2.x as a hybrid-element convenience\nonly.  For non-hybrid usage, the `Polymer.Templatize` library\nshould be used instead.\n\nExample:\n\n    // Get a template from somewhere, e.g. light DOM\n    let template = this.querySelector('template');\n    // Prepare the template\n    this.templatize(template);\n    // Instance the template with an initial data model\n    let instance = this.stamp({myProp: 'initial'});\n    // Insert the instance's DOM somewhere, e.g. light DOM\n    Polymer.dom(this).appendChild(instance.root);\n    // Changing a property on the instance will propagate to bindings\n    // in the template\n    instance.myProp = 'new value';\n\nUsers of `Templatizer` may need to implement the following abstract\nAPI's to determine how properties and paths from the host should be\nforwarded into to instances:\n\n    _forwardHostPropV2: function(prop, value)\n\nLikewise, users may implement these additional abstract API's to determine\nhow instance-specific properties that change on the instance should be\nforwarded out to the host, if necessary.\n\n    _notifyInstancePropV2: function(inst, prop, value)\n\nIn order to determine which properties are instance-specific and require\ncustom notification via `_notifyInstanceProp`, define an `_instanceProps`\nobject containing keys for each instance prop, for example:\n\n    _instanceProps: {\n      item: true,\n      index: true\n    }\n\nAny properties used in the template that are not defined in _instanceProp\nwill be forwarded out to the Templatize `owner` automatically.\n\nUsers may also implement the following abstract function to show or\nhide any DOM generated using `stamp`:\n\n    _showHideChildren: function(shouldHide)\n\nNote that some callbacks are suffixed with `V2` in the Polymer 2.x behavior\nas the implementations will need to differ from the callbacks required\nby the 1.x Templatizer API due to changes in the `TemplateInstance` API\nbetween versions 1.x and 2.x.",
              "summary": "",
              "path": "components\\polymer\\lib\\legacy\\templatizer-behavior.html",
              "properties": [],
              "methods": [
                {
                  "name": "templatize",
                  "description": "Generates an anonymous `TemplateInstance` class (stored as `this.ctor`)\nfor the provided template.  This method should be called once per\ntemplate to prepare an element for stamping the template, followed\nby `stamp` to create new instances of the template.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 105,
                      "column": 6
                    },
                    "end": {
                      "line": 114,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "template",
                      "type": "!HTMLTemplateElement",
                      "description": "Template to prepare"
                    },
                    {
                      "name": "mutableData",
                      "type": "boolean=",
                      "description": "When `true`, the generated class will skip\n  strict dirty-checking for objects and arrays (always consider them to\n  be \"dirty\"). Defaults to false."
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "stamp",
                  "description": "Creates an instance of the template prepared by `templatize`.  The object\nreturned is an instance of the anonymous class generated by `templatize`\nwhose `root` property is a document fragment containing newly cloned\ntemplate content, and which has property accessors corresponding to\nproperties referenced in template bindings.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 129,
                      "column": 6
                    },
                    "end": {
                      "line": 131,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "model",
                      "type": "Object=",
                      "description": "Object containing initial property values to\n  populate into the template bindings."
                    }
                  ],
                  "return": {
                    "type": "TemplateInstanceBase",
                    "desc": "Returns the created instance of\nthe template prepared by `templatize`."
                  }
                },
                {
                  "name": "modelForElement",
                  "description": "Returns the template \"model\" (`TemplateInstance`) associated with\na given element, which serves as the binding scope for the template\ninstance the element is contained in.  A template model should be used\nto manipulate data associated with this template instance.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 144,
                      "column": 6
                    },
                    "end": {
                      "line": 146,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "el",
                      "type": "HTMLElement",
                      "description": "Element for which to return a template model."
                    }
                  ],
                  "return": {
                    "type": "TemplateInstanceBase",
                    "desc": "Model representing the binding scope for\n  the element."
                  }
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 90,
                  "column": 4
                },
                "end": {
                  "line": 147,
                  "column": 6
                }
              },
              "privacy": "public",
              "name": "Polymer.Templatizer",
              "attributes": [],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "Legacy element behavior to skip strict dirty-checking for objects and arrays,\n(always consider them to be \"dirty\") for use on legacy API Polymer elements.\n\nBy default, `Polymer.PropertyEffects` performs strict dirty checking on\nobjects, which means that any deep modifications to an object or array will\nnot be propagated unless \"immutable\" data patterns are used (i.e. all object\nreferences from the root to the mutation were changed).\n\nPolymer also provides a proprietary data mutation and path notification API\n(e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\nmutation and notification of deep changes in an object graph to all elements\nbound to the same object graph.\n\nIn cases where neither immutable patterns nor the data mutation API can be\nused, applying this mixin will cause Polymer to skip dirty checking for\nobjects and arrays (always consider them to be \"dirty\").  This allows a\nuser to make a deep modification to a bound object graph, and then either\nsimply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n(e.g. `this.notifyPath('items')`) to update the tree.  Note that all\nelements that wish to be updated based on deep mutations must apply this\nmixin or otherwise skip strict dirty checking for objects/arrays.\nSpecifically, any elements in the binding tree between the source of a\nmutation and the consumption of it must apply this behavior or enable the\n`Polymer.OptionalMutableDataBehavior`.\n\nIn order to make the dirty check strategy configurable, see\n`Polymer.OptionalMutableDataBehavior`.\n\nNote, the performance characteristics of propagating large object graphs\nwill be worse as opposed to using strict dirty checking with immutable\npatterns or Polymer's path notification API.",
              "summary": "Behavior to skip strict dirty-checking for objects and\n  arrays",
              "path": "components\\polymer\\lib\\legacy\\mutable-data-behavior.html",
              "properties": [],
              "methods": [
                {
                  "name": "_shouldPropertyChange",
                  "description": "Overrides `Polymer.PropertyEffects` to provide option for skipping\nstrict equality checking for Objects and Arrays.\n\nThis method pulls the value to dirty check against from the `__dataTemp`\ncache (rather than the normal `__data` cache) for Objects.  Since the temp\ncache is cleared at the end of a turn, this implementation allows\nside-effects of deep object changes to be processed by re-setting the\nsame object (using the temp cache as an in-turn backstop to prevent\ncycles due to 2-way notification).",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 79,
                      "column": 4
                    },
                    "end": {
                      "line": 81,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "property",
                      "type": "string",
                      "description": "Property name"
                    },
                    {
                      "name": "value",
                      "type": "*",
                      "description": "New property value"
                    },
                    {
                      "name": "old",
                      "type": "*",
                      "description": "Previous property value"
                    }
                  ],
                  "return": {
                    "type": "boolean",
                    "desc": "Whether the property should be considered a change"
                  }
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 60,
                  "column": 2
                },
                "end": {
                  "line": 82,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "Polymer.MutableDataBehavior",
              "attributes": [],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "Legacy element behavior to add the optional ability to skip strict\ndirty-checking for objects and arrays (always consider them to be\n\"dirty\") by setting a `mutable-data` attribute on an element instance.\n\nBy default, `Polymer.PropertyEffects` performs strict dirty checking on\nobjects, which means that any deep modifications to an object or array will\nnot be propagated unless \"immutable\" data patterns are used (i.e. all object\nreferences from the root to the mutation were changed).\n\nPolymer also provides a proprietary data mutation and path notification API\n(e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\nmutation and notification of deep changes in an object graph to all elements\nbound to the same object graph.\n\nIn cases where neither immutable patterns nor the data mutation API can be\nused, applying this mixin will allow Polymer to skip dirty checking for\nobjects and arrays (always consider them to be \"dirty\").  This allows a\nuser to make a deep modification to a bound object graph, and then either\nsimply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n(e.g. `this.notifyPath('items')`) to update the tree.  Note that all\nelements that wish to be updated based on deep mutations must apply this\nmixin or otherwise skip strict dirty checking for objects/arrays.\nSpecifically, any elements in the binding tree between the source of a\nmutation and the consumption of it must enable this behavior or apply the\n`Polymer.OptionalMutableDataBehavior`.\n\nWhile this behavior adds the ability to forgo Object/Array dirty checking,\nthe `mutableData` flag defaults to false and must be set on the instance.\n\nNote, the performance characteristics of propagating large object graphs\nwill be worse by relying on `mutableData: true` as opposed to using\nstrict dirty checking with immutable patterns or Polymer's path notification\nAPI.",
              "summary": "Behavior to optionally skip strict dirty-checking for objects and\n  arrays",
              "path": "components\\polymer\\lib\\legacy\\mutable-data-behavior.html",
              "properties": [
                {
                  "name": "mutableData",
                  "type": "boolean",
                  "description": "Instance-level flag for configuring the dirty-checking strategy\nfor this element.  When true, Objects and Arrays will skip dirty\nchecking, otherwise strict equality checking will be used.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 132,
                      "column": 6
                    },
                    "end": {
                      "line": 132,
                      "column": 26
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                }
              ],
              "methods": [
                {
                  "name": "_shouldPropertyChange",
                  "description": "Overrides `Polymer.PropertyEffects` to skip strict equality checking\nfor Objects and Arrays.\n\nPulls the value to dirty check against from the `__dataTemp` cache\n(rather than the normal `__data` cache) for Objects.  Since the temp\ncache is cleared at the end of a turn, this implementation allows\nside-effects of deep object changes to be processed by re-setting the\nsame object (using the temp cache as an in-turn backstop to prevent\ncycles due to 2-way notification).",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 153,
                      "column": 4
                    },
                    "end": {
                      "line": 155,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "property",
                      "type": "string",
                      "description": "Property name"
                    },
                    {
                      "name": "value",
                      "type": "*",
                      "description": "New property value"
                    },
                    {
                      "name": "old",
                      "type": "*",
                      "description": "Previous property value"
                    }
                  ],
                  "return": {
                    "type": "boolean",
                    "desc": "Whether the property should be considered a change"
                  }
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 124,
                  "column": 2
                },
                "end": {
                  "line": 156,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "Polymer.OptionalMutableDataBehavior",
              "attributes": [
                {
                  "name": "mutable-data",
                  "description": "Instance-level flag for configuring the dirty-checking strategy\nfor this element.  When true, Objects and Arrays will skip dirty\nchecking, otherwise strict equality checking will be used.",
                  "sourceRange": {
                    "start": {
                      "line": 132,
                      "column": 6
                    },
                    "end": {
                      "line": 132,
                      "column": 26
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "`IronResizableBehavior` is a behavior that can be used in Polymer elements to\ncoordinate the flow of resize events between \"resizers\" (elements that control the\nsize or hidden state of their children) and \"resizables\" (elements that need to be\nnotified when they are resized or un-hidden by their parents in order to take\naction on their new measurements).\n\nElements that perform measurement should add the `IronResizableBehavior` behavior to\ntheir element definition and listen for the `iron-resize` event on themselves.\nThis event will be fired when they become showing after having been hidden,\nwhen they are resized explicitly by another resizable, or when the window has been\nresized.\n\nNote, the `iron-resize` event is non-bubbling.",
              "summary": "",
              "path": "components\\iron-resizable-behavior\\iron-resizable-behavior.html",
              "properties": [
                {
                  "name": "_parentResizable",
                  "type": "Object",
                  "description": "The closest ancestor element that implements `IronResizableBehavior`.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 36,
                      "column": 6
                    },
                    "end": {
                      "line": 39,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "observer": "\"_parentResizableChanged\""
                    }
                  }
                },
                {
                  "name": "_notifyingDescendant",
                  "type": "boolean",
                  "description": "True if this element is currently notifying its descendant elements of\nresize.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 45,
                      "column": 6
                    },
                    "end": {
                      "line": 48,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false"
                }
              ],
              "methods": [
                {
                  "name": "created",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 55,
                      "column": 4
                    },
                    "end": {
                      "line": 60,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "attached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 62,
                      "column": 4
                    },
                    "end": {
                      "line": 64,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "detached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 66,
                      "column": 4
                    },
                    "end": {
                      "line": 74,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "notifyResize",
                  "description": "Can be called to manually notify a resizable and its descendant\nresizables of a resize change.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 80,
                      "column": 4
                    },
                    "end": {
                      "line": 92,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "assignParentResizable",
                  "description": "Used to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 98,
                      "column": 4
                    },
                    "end": {
                      "line": 100,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "parentResizable"
                    }
                  ]
                },
                {
                  "name": "stopResizeNotificationsFor",
                  "description": "Used to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 106,
                      "column": 4
                    },
                    "end": {
                      "line": 113,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "target"
                    }
                  ]
                },
                {
                  "name": "resizerShouldNotify",
                  "description": "This method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 124,
                      "column": 4
                    },
                    "end": {
                      "line": 124,
                      "column": 59
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "element",
                      "type": "HTMLElement",
                      "description": "A candidate descendant element that\nimplements `IronResizableBehavior`."
                    }
                  ],
                  "return": {
                    "type": "boolean",
                    "desc": "True if the `element` should be notified of resize."
                  }
                },
                {
                  "name": "_onDescendantIronResize",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 126,
                      "column": 4
                    },
                    "end": {
                      "line": 138,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event"
                    }
                  ]
                },
                {
                  "name": "_fireResize",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 140,
                      "column": 4
                    },
                    "end": {
                      "line": 145,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_onIronRequestResizeNotifications",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 147,
                      "column": 4
                    },
                    "end": {
                      "line": 162,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event"
                    }
                  ]
                },
                {
                  "name": "_parentResizableChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 164,
                      "column": 4
                    },
                    "end": {
                      "line": 168,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "parentResizable"
                    }
                  ]
                },
                {
                  "name": "_notifyDescendant",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 170,
                      "column": 4
                    },
                    "end": {
                      "line": 181,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "descendant"
                    }
                  ]
                },
                {
                  "name": "_requestResizeNotifications",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 183,
                      "column": 4
                    },
                    "end": {
                      "line": 211,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                }
              ],
              "staticMethods": [],
              "demos": [
                {
                  "url": "demo/index.html",
                  "description": "demo"
                },
                {
                  "url": "demo/index.html",
                  "description": ""
                }
              ],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 31,
                  "column": 2
                },
                "end": {
                  "line": 212,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "Polymer.IronResizableBehavior",
              "attributes": [],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "",
              "summary": "",
              "path": "components\\app-layout\\app-layout-behavior\\app-layout-behavior.html",
              "properties": [
                {
                  "name": "_parentResizable",
                  "type": "Object",
                  "description": "The closest ancestor element that implements `IronResizableBehavior`.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
                    "start": {
                      "line": 36,
                      "column": 6
                    },
                    "end": {
                      "line": 39,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "observer": "\"_parentResizableChanged\""
                    }
                  },
                  "inheritedFrom": "Polymer.IronResizableBehavior"
                },
                {
                  "name": "_notifyingDescendant",
                  "type": "boolean",
                  "description": "True if this element is currently notifying its descendant elements of\nresize.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
                    "start": {
                      "line": 45,
                      "column": 6
                    },
                    "end": {
                      "line": 48,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronResizableBehavior"
                }
              ],
              "methods": [
                {
                  "name": "created",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
                    "start": {
                      "line": 55,
                      "column": 4
                    },
                    "end": {
                      "line": 60,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronResizableBehavior"
                },
                {
                  "name": "attached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 26,
                      "column": 4
                    },
                    "end": {
                      "line": 28,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "detached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
                    "start": {
                      "line": 66,
                      "column": 4
                    },
                    "end": {
                      "line": 74,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronResizableBehavior"
                },
                {
                  "name": "notifyResize",
                  "description": "Can be called to manually notify a resizable and its descendant\nresizables of a resize change.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
                    "start": {
                      "line": 80,
                      "column": 4
                    },
                    "end": {
                      "line": 92,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronResizableBehavior"
                },
                {
                  "name": "assignParentResizable",
                  "description": "Used to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
                    "start": {
                      "line": 98,
                      "column": 4
                    },
                    "end": {
                      "line": 100,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "parentResizable"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronResizableBehavior"
                },
                {
                  "name": "stopResizeNotificationsFor",
                  "description": "Used to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
                    "start": {
                      "line": 106,
                      "column": 4
                    },
                    "end": {
                      "line": 113,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "target"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronResizableBehavior"
                },
                {
                  "name": "resizerShouldNotify",
                  "description": "This method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
                    "start": {
                      "line": 124,
                      "column": 4
                    },
                    "end": {
                      "line": 124,
                      "column": 59
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "element",
                      "type": "HTMLElement",
                      "description": "A candidate descendant element that\nimplements `IronResizableBehavior`."
                    }
                  ],
                  "return": {
                    "type": "boolean",
                    "desc": "True if the `element` should be notified of resize."
                  },
                  "inheritedFrom": "Polymer.IronResizableBehavior"
                },
                {
                  "name": "_onDescendantIronResize",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
                    "start": {
                      "line": 126,
                      "column": 4
                    },
                    "end": {
                      "line": 138,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronResizableBehavior"
                },
                {
                  "name": "_fireResize",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
                    "start": {
                      "line": 140,
                      "column": 4
                    },
                    "end": {
                      "line": 145,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronResizableBehavior"
                },
                {
                  "name": "_onIronRequestResizeNotifications",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
                    "start": {
                      "line": 147,
                      "column": 4
                    },
                    "end": {
                      "line": 162,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronResizableBehavior"
                },
                {
                  "name": "_parentResizableChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
                    "start": {
                      "line": 164,
                      "column": 4
                    },
                    "end": {
                      "line": 168,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "parentResizable"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronResizableBehavior"
                },
                {
                  "name": "_notifyDescendant",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
                    "start": {
                      "line": 170,
                      "column": 4
                    },
                    "end": {
                      "line": 181,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "descendant"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronResizableBehavior"
                },
                {
                  "name": "_requestResizeNotifications",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
                    "start": {
                      "line": 183,
                      "column": 4
                    },
                    "end": {
                      "line": 211,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronResizableBehavior"
                },
                {
                  "name": "_appResetLayoutHandler",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 30,
                      "column": 4
                    },
                    "end": {
                      "line": 36,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "e"
                    }
                  ]
                },
                {
                  "name": "_updateLayoutStates",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 38,
                      "column": 4
                    },
                    "end": {
                      "line": 40,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "resetLayout",
                  "description": "Resets the layout. If you changed the size of this element via CSS\nyou can notify the changes by either firing the `iron-resize` event\nor calling `resetLayout` directly.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 49,
                      "column": 4
                    },
                    "end": {
                      "line": 65,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_notifyLayoutChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 67,
                      "column": 4
                    },
                    "end": {
                      "line": 75,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_notifyDescendantResize",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 77,
                      "column": 4
                    },
                    "end": {
                      "line": 86,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 18,
                  "column": 2
                },
                "end": {
                  "line": 87,
                  "column": 5
                }
              },
              "privacy": "public",
              "name": "Polymer.AppLayoutBehavior",
              "attributes": [],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "`Polymer.IronScrollTargetBehavior` allows an element to respond to scroll\nevents from a designated scroll target.\n\nElements that consume this behavior can override the `_scrollHandler`\nmethod to add logic on the scroll event.",
              "summary": "",
              "path": "components\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
              "properties": [
                {
                  "name": "scrollTarget",
                  "type": "HTMLElement",
                  "description": "Specifies the element that will handle the scroll event\non the behalf of the current element. This is typically a reference to an\nelement, but there are a few more posibilities:\n\n### Elements id\n\n```html\n<div id=\"scrollable-element\" style=\"overflow: auto;\">\n <x-element scroll-target=\"scrollable-element\">\n   <!-- Content-->\n </x-element>\n</div>\n```\nIn this case, the `scrollTarget` will point to the outer div element.\n\n### Document scrolling\n\nFor document scrolling, you can use the reserved word `document`:\n\n```html\n<x-element scroll-target=\"document\">\n  <!-- Content -->\n</x-element>\n```\n\n### Elements reference\n\n```js\nappHeader.scrollTarget = document.querySelector('#scrollable-element');\n```",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 63,
                      "column": 6
                    },
                    "end": {
                      "line": 68,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "_shouldHaveListener",
                  "type": "boolean",
                  "description": "True if the event listener should be installed.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 76,
                      "column": 4
                    },
                    "end": {
                      "line": 76,
                      "column": 29
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                }
              ],
              "methods": [
                {
                  "name": "_scrollTargetChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 78,
                      "column": 4
                    },
                    "end": {
                      "line": 103,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "scrollTarget"
                    },
                    {
                      "name": "isAttached"
                    }
                  ]
                },
                {
                  "name": "_scrollHandler",
                  "description": "Runs on every scroll event. Consumer of this behavior may override this\nmethod.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 111,
                      "column": 4
                    },
                    "end": {
                      "line": 111,
                      "column": 47
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_defaultScrollTarget",
                  "description": "The default scroll target. Consumers of this behavior may want to customize\nthe default scroll target.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 119,
                      "column": 4
                    },
                    "end": {
                      "line": 121,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_doc",
                  "description": "Shortcut for the document element",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 128,
                      "column": 4
                    },
                    "end": {
                      "line": 130,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_scrollTop",
                  "description": "Sets the number of pixels that the content of an element is scrolled\nupward.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 166,
                      "column": 4
                    },
                    "end": {
                      "line": 172,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "top"
                    }
                  ]
                },
                {
                  "name": "_scrollLeft",
                  "description": "Sets the number of pixels that the content of an element is scrolled to the\nleft.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 180,
                      "column": 4
                    },
                    "end": {
                      "line": 186,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "left"
                    }
                  ]
                },
                {
                  "name": "scroll",
                  "description": "Scrolls the content to a particular place.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 196,
                      "column": 4
                    },
                    "end": {
                      "line": 214,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "leftOrOptions",
                      "type": "(number | !{left: number, top: number})",
                      "description": "The left position or scroll options"
                    },
                    {
                      "name": "top",
                      "type": "number=",
                      "description": "The top position"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "_scrollTargetWidth",
                  "description": "Gets the width of the scroll target.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 221,
                      "column": 4
                    },
                    "end": {
                      "line": 227,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_scrollTargetHeight",
                  "description": "Gets the height of the scroll target.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 234,
                      "column": 4
                    },
                    "end": {
                      "line": 240,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_isValidScrollTarget",
                  "description": "Returns true if the scroll target is a valid HTMLElement.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 247,
                      "column": 4
                    },
                    "end": {
                      "line": 249,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "boolean"
                  }
                },
                {
                  "name": "_toggleScrollListener",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 251,
                      "column": 4
                    },
                    "end": {
                      "line": 264,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "yes"
                    },
                    {
                      "name": "scrollTarget"
                    }
                  ]
                },
                {
                  "name": "toggleScrollListener",
                  "description": "Enables or disables the scroll event listener.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 271,
                      "column": 4
                    },
                    "end": {
                      "line": 274,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "yes",
                      "type": "boolean",
                      "description": "True to add the event, False to remove it."
                    }
                  ]
                }
              ],
              "staticMethods": [],
              "demos": [
                {
                  "url": "Scrolling Region",
                  "description": "demo"
                },
                {
                  "url": "Document Element",
                  "description": "demo"
                },
                {
                  "url": "demo/scrolling-region.html",
                  "description": "Scrolling Region"
                },
                {
                  "url": "demo/document.html",
                  "description": "Document Element"
                }
              ],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 24,
                  "column": 2
                },
                "end": {
                  "line": 276,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "Polymer.IronScrollTargetBehavior",
              "attributes": [
                {
                  "name": "scroll-target",
                  "description": "Specifies the element that will handle the scroll event\non the behalf of the current element. This is typically a reference to an\nelement, but there are a few more posibilities:\n\n### Elements id\n\n```html\n<div id=\"scrollable-element\" style=\"overflow: auto;\">\n <x-element scroll-target=\"scrollable-element\">\n   <!-- Content-->\n </x-element>\n</div>\n```\nIn this case, the `scrollTarget` will point to the outer div element.\n\n### Document scrolling\n\nFor document scrolling, you can use the reserved word `document`:\n\n```html\n<x-element scroll-target=\"document\">\n  <!-- Content -->\n</x-element>\n```\n\n### Elements reference\n\n```js\nappHeader.scrollTarget = document.querySelector('#scrollable-element');\n```",
                  "sourceRange": {
                    "start": {
                      "line": 63,
                      "column": 6
                    },
                    "end": {
                      "line": 68,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "HTMLElement"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "`Polymer.AppScrollEffectsBehavior` provides an interface that allows an element to use scrolls effects.\n\n### Importing the app-layout effects\n\napp-layout provides a set of scroll effects that can be used by explicitly importing\n`app-scroll-effects.html`:\n\n```html\n<link rel=\"import\" href=\"/bower_components/app-layout/app-scroll-effects/app-scroll-effects.html\">\n```\n\nThe scroll effects can also be used by individually importing\n`app-layout/app-scroll-effects/effects/[effectName].html`. For example:\n\n```html\n <link rel=\"import\" href=\"/bower_components/app-layout/app-scroll-effects/effects/waterfall.html\">\n```\n\n### Consuming effects\n\nEffects can be consumed via the `effects` property. For example:\n\n```html\n<app-header effects=\"waterfall\"></app-header>\n```\n\n### Creating scroll effects\n\nYou may want to create a custom scroll effect if you need to modify the CSS of an element\nbased on the scroll position.\n\nA scroll effect definition is an object with `setUp()`, `tearDown()` and `run()` functions.\n\nTo register the effect, you can use `Polymer.AppLayout.registerEffect(effectName, effectDef)`\nFor example, let's define an effect that resizes the header's logo:\n\n```js\nPolymer.AppLayout.registerEffect('resizable-logo', {\n  setUp: function(config) {\n    // the effect's config is passed to the setUp.\n    this._fxResizeLogo = { logo: Polymer.dom(this).querySelector('[logo]') };\n  },\n\n  run: function(progress) {\n     // the progress of the effect\n     this.transform('scale3d(' + progress + ', '+ progress +', 1)',  this._fxResizeLogo.logo);\n  },\n\n  tearDown: function() {\n     // clean up and reset of states\n     delete this._fxResizeLogo;\n  }\n});\n```\nNow, you can consume the effect:\n\n```html\n<app-header id=\"appHeader\" effects=\"resizable-logo\">\n  <img logo src=\"logo.svg\">\n</app-header>\n```\n\n### Imperative API\n\n```js\nvar logoEffect = appHeader.createEffect('resizable-logo', effectConfig);\n// run the effect: logoEffect.run(progress);\n// tear down the effect: logoEffect.tearDown();\n```\n\n### Configuring effects\n\nFor effects installed via the `effects` property, their configuration can be set\nvia the `effectsConfig` property. For example:\n\n```html\n<app-header effects=\"waterfall\"\n  effects-config='{\"waterfall\": {\"startsAt\": 0, \"endsAt\": 0.5}}'>\n</app-header>\n```\n\nAll effects have a `startsAt` and `endsAt` config property. They specify at what\npoint the effect should start and end. This value goes from 0 to 1 inclusive.",
              "summary": "",
              "path": "components\\app-layout\\app-scroll-effects\\app-scroll-effects-behavior.html",
              "properties": [
                {
                  "name": "scrollTarget",
                  "type": "HTMLElement",
                  "description": "Specifies the element that will handle the scroll event\non the behalf of the current element. This is typically a reference to an\nelement, but there are a few more posibilities:\n\n### Elements id\n\n```html\n<div id=\"scrollable-element\" style=\"overflow: auto;\">\n <x-element scroll-target=\"scrollable-element\">\n   <!-- Content-->\n </x-element>\n</div>\n```\nIn this case, the `scrollTarget` will point to the outer div element.\n\n### Document scrolling\n\nFor document scrolling, you can use the reserved word `document`:\n\n```html\n<x-element scroll-target=\"document\">\n  <!-- Content -->\n</x-element>\n```\n\n### Elements reference\n\n```js\nappHeader.scrollTarget = document.querySelector('#scrollable-element');\n```",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
                    "start": {
                      "line": 63,
                      "column": 6
                    },
                    "end": {
                      "line": 68,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronScrollTargetBehavior"
                },
                {
                  "name": "_shouldHaveListener",
                  "type": "boolean",
                  "description": "True if the event listener should be installed.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
                    "start": {
                      "line": 76,
                      "column": 4
                    },
                    "end": {
                      "line": 76,
                      "column": 29
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronScrollTargetBehavior"
                },
                {
                  "name": "effects",
                  "type": "string",
                  "description": "A space-separated list of the effects names that will be triggered when the user scrolls.\ne.g. `waterfall parallax-background` installs the `waterfall` and `parallax-background`.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 112,
                      "column": 6
                    },
                    "end": {
                      "line": 114,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "effectsConfig",
                  "type": "Object",
                  "description": "An object that configurates the effects installed via the `effects` property. e.g.\n```js\n element.effectsConfig = {\n  \"blend-background\": {\n    \"startsAt\": 0.5\n  }\n};\n```\nEvery effect has at least two config properties: `startsAt` and `endsAt`.\nThese properties indicate when the event should start and end respectively\nand relative to the overall element progress. So for example, if `blend-background`\nstarts at `0.5`, the effect will only start once the current element reaches 0.5\nof its progress. In this context, the progress is a value in the range of `[0, 1]`\nthat indicates where this element is on the screen relative to the viewport.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 132,
                      "column": 6
                    },
                    "end": {
                      "line": 137,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "{}"
                },
                {
                  "name": "disabled",
                  "type": "boolean",
                  "description": "Disables CSS transitions and scroll effects on the element.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 142,
                      "column": 6
                    },
                    "end": {
                      "line": 146,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "threshold",
                  "type": "number",
                  "description": "Allows to set a `scrollTop` threshold. When greater than 0, `thresholdTriggered`\nis true only when the scroll target's `scrollTop` has reached this value.\n\nFor example, if `threshold = 100`, `thresholdTriggered` is true when the `scrollTop`\nis at least `100`.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 155,
                      "column": 6
                    },
                    "end": {
                      "line": 158,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "0"
                },
                {
                  "name": "thresholdTriggered",
                  "type": "boolean",
                  "description": "True if the `scrollTop` threshold (set in `scrollTopThreshold`) has\nbeen reached.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 164,
                      "column": 6
                    },
                    "end": {
                      "line": 169,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "readOnly": true
                    }
                  }
                },
                {
                  "name": "_effectsRunFn",
                  "type": "Array.<Function>",
                  "description": "List of effects handlers that will take place during scroll.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 213,
                      "column": 4
                    },
                    "end": {
                      "line": 213,
                      "column": 23
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "_effects",
                  "type": "Array.<Object>",
                  "description": "List of the effects definitions installed via the `effects` property.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 220,
                      "column": 4
                    },
                    "end": {
                      "line": 220,
                      "column": 18
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                }
              ],
              "methods": [
                {
                  "name": "_scrollTargetChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
                    "start": {
                      "line": 78,
                      "column": 4
                    },
                    "end": {
                      "line": 103,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "scrollTarget"
                    },
                    {
                      "name": "isAttached"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronScrollTargetBehavior"
                },
                {
                  "name": "_scrollHandler",
                  "description": "Overrides the `_scrollHandler`.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 365,
                      "column": 4
                    },
                    "end": {
                      "line": 373,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_defaultScrollTarget",
                  "description": "The default scroll target. Consumers of this behavior may want to customize\nthe default scroll target.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
                    "start": {
                      "line": 119,
                      "column": 4
                    },
                    "end": {
                      "line": 121,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronScrollTargetBehavior"
                },
                {
                  "name": "_doc",
                  "description": "Shortcut for the document element",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
                    "start": {
                      "line": 128,
                      "column": 4
                    },
                    "end": {
                      "line": 130,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronScrollTargetBehavior"
                },
                {
                  "name": "_scrollTop",
                  "description": "Sets the number of pixels that the content of an element is scrolled\nupward.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
                    "start": {
                      "line": 166,
                      "column": 4
                    },
                    "end": {
                      "line": 172,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "top"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronScrollTargetBehavior"
                },
                {
                  "name": "_scrollLeft",
                  "description": "Sets the number of pixels that the content of an element is scrolled to the\nleft.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
                    "start": {
                      "line": 180,
                      "column": 4
                    },
                    "end": {
                      "line": 186,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "left"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronScrollTargetBehavior"
                },
                {
                  "name": "scroll",
                  "description": "Scrolls the content to a particular place.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
                    "start": {
                      "line": 196,
                      "column": 4
                    },
                    "end": {
                      "line": 214,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "leftOrOptions",
                      "type": "(number | !{left: number, top: number})",
                      "description": "The left position or scroll options"
                    },
                    {
                      "name": "top",
                      "type": "number=",
                      "description": "The top position"
                    }
                  ],
                  "return": {
                    "type": "void"
                  },
                  "inheritedFrom": "Polymer.IronScrollTargetBehavior"
                },
                {
                  "name": "_scrollTargetWidth",
                  "description": "Gets the width of the scroll target.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
                    "start": {
                      "line": 221,
                      "column": 4
                    },
                    "end": {
                      "line": 227,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronScrollTargetBehavior"
                },
                {
                  "name": "_scrollTargetHeight",
                  "description": "Gets the height of the scroll target.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
                    "start": {
                      "line": 234,
                      "column": 4
                    },
                    "end": {
                      "line": 240,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronScrollTargetBehavior"
                },
                {
                  "name": "_isValidScrollTarget",
                  "description": "Returns true if the scroll target is a valid HTMLElement.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
                    "start": {
                      "line": 247,
                      "column": 4
                    },
                    "end": {
                      "line": 249,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "boolean"
                  },
                  "inheritedFrom": "Polymer.IronScrollTargetBehavior"
                },
                {
                  "name": "_toggleScrollListener",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
                    "start": {
                      "line": 251,
                      "column": 4
                    },
                    "end": {
                      "line": 264,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "yes"
                    },
                    {
                      "name": "scrollTarget"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronScrollTargetBehavior"
                },
                {
                  "name": "toggleScrollListener",
                  "description": "Enables or disables the scroll event listener.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
                    "start": {
                      "line": 271,
                      "column": 4
                    },
                    "end": {
                      "line": 274,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "yes",
                      "type": "boolean",
                      "description": "True to add the event, False to remove it."
                    }
                  ],
                  "inheritedFrom": "Polymer.IronScrollTargetBehavior"
                },
                {
                  "name": "_updateScrollState",
                  "description": "Updates the scroll state. This method should be overridden\nby the consumer of this behavior.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 183,
                      "column": 4
                    },
                    "end": {
                      "line": 183,
                      "column": 46
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "scrollTop",
                      "type": "number"
                    }
                  ]
                },
                {
                  "name": "isOnScreen",
                  "description": "Returns true if the current element is on the screen.\nThat is, visible in the current viewport. This method should be\noverridden by the consumer of this behavior.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 193,
                      "column": 4
                    },
                    "end": {
                      "line": 195,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "boolean"
                  }
                },
                {
                  "name": "isContentBelow",
                  "description": "Returns true if there's content below the current element. This method\nshould be overridden by the consumer of this behavior.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 204,
                      "column": 4
                    },
                    "end": {
                      "line": 206,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "boolean"
                  }
                },
                {
                  "name": "_clampedScrollTop",
                  "description": "The clamped value of `_scrollTop`.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 226,
                      "column": 4
                    },
                    "end": {
                      "line": 228,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "detached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 230,
                      "column": 4
                    },
                    "end": {
                      "line": 232,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "createEffect",
                  "description": "Creates an effect object from an effect's name that can be used to run\neffects programmatically.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 255,
                      "column": 4
                    },
                    "end": {
                      "line": 263,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "effectName",
                      "type": "string",
                      "description": "The effect's name registered via `Polymer.AppLayout.registerEffect`."
                    },
                    {
                      "name": "effectConfig",
                      "type": "Object=",
                      "description": "The effect config object. (Optional)"
                    }
                  ],
                  "return": {
                    "type": "Object",
                    "desc": "An effect object with the following functions:\n\n * `effect.setUp()`, Sets up the requirements for the effect.\n      This function is called automatically before the `effect` function returns.\n * `effect.run(progress, y)`, Runs the effect given a `progress`.\n * `effect.tearDown()`, Cleans up any DOM nodes or element references used by the effect.\n\nExample:\n```js\nvar parallax = element.createEffect('parallax-background');\n// runs the effect\nparallax.run(0.5, 0);\n```"
                  }
                },
                {
                  "name": "_effectsChanged",
                  "description": "Called when `effects` or `effectsConfig` changes.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 268,
                      "column": 4
                    },
                    "end": {
                      "line": 286,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "effects"
                    },
                    {
                      "name": "effectsConfig"
                    },
                    {
                      "name": "isAttached"
                    }
                  ]
                },
                {
                  "name": "_layoutIfDirty",
                  "description": "Forces layout",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 291,
                      "column": 4
                    },
                    "end": {
                      "line": 293,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_boundEffect",
                  "description": "Returns an effect object bound to the current context.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 301,
                      "column": 4
                    },
                    "end": {
                      "line": 318,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "effectDef",
                      "type": "Object"
                    },
                    {
                      "name": "effectsConfig",
                      "type": "Object=",
                      "description": "The effect config object if the effect accepts config values. (Optional)"
                    }
                  ]
                },
                {
                  "name": "_setUpEffect",
                  "description": "Sets up the effects.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 323,
                      "column": 4
                    },
                    "end": {
                      "line": 333,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_tearDownEffects",
                  "description": "Tears down the effects.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 338,
                      "column": 4
                    },
                    "end": {
                      "line": 346,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_runEffects",
                  "description": "Runs the effects.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 354,
                      "column": 4
                    },
                    "end": {
                      "line": 360,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "p",
                      "type": "number",
                      "description": "The progress"
                    },
                    {
                      "name": "y",
                      "type": "number",
                      "description": "The top position of the current element relative to the viewport."
                    }
                  ]
                },
                {
                  "name": "_getDOMRef",
                  "description": "Override this method to return a reference to a node in the local DOM.\nThe node is consumed by a scroll effect.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 381,
                      "column": 4
                    },
                    "end": {
                      "line": 383,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "id",
                      "type": "string",
                      "description": "The id for the node."
                    }
                  ]
                },
                {
                  "name": "_getUndefinedMsg",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 385,
                      "column": 4
                    },
                    "end": {
                      "line": 388,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "effectName"
                    }
                  ]
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 102,
                  "column": 2
                },
                "end": {
                  "line": 390,
                  "column": 5
                }
              },
              "privacy": "public",
              "name": "Polymer.AppScrollEffectsBehavior",
              "attributes": [
                {
                  "name": "scroll-target",
                  "description": "Specifies the element that will handle the scroll event\non the behalf of the current element. This is typically a reference to an\nelement, but there are a few more posibilities:\n\n### Elements id\n\n```html\n<div id=\"scrollable-element\" style=\"overflow: auto;\">\n <x-element scroll-target=\"scrollable-element\">\n   <!-- Content-->\n </x-element>\n</div>\n```\nIn this case, the `scrollTarget` will point to the outer div element.\n\n### Document scrolling\n\nFor document scrolling, you can use the reserved word `document`:\n\n```html\n<x-element scroll-target=\"document\">\n  <!-- Content -->\n</x-element>\n```\n\n### Elements reference\n\n```js\nappHeader.scrollTarget = document.querySelector('#scrollable-element');\n```",
                  "sourceRange": {
                    "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
                    "start": {
                      "line": 63,
                      "column": 6
                    },
                    "end": {
                      "line": 68,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "HTMLElement",
                  "inheritedFrom": "Polymer.IronScrollTargetBehavior"
                },
                {
                  "name": "effects",
                  "description": "A space-separated list of the effects names that will be triggered when the user scrolls.\ne.g. `waterfall parallax-background` installs the `waterfall` and `parallax-background`.",
                  "sourceRange": {
                    "start": {
                      "line": 112,
                      "column": 6
                    },
                    "end": {
                      "line": 114,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string"
                },
                {
                  "name": "effects-config",
                  "description": "An object that configurates the effects installed via the `effects` property. e.g.\n```js\n element.effectsConfig = {\n  \"blend-background\": {\n    \"startsAt\": 0.5\n  }\n};\n```\nEvery effect has at least two config properties: `startsAt` and `endsAt`.\nThese properties indicate when the event should start and end respectively\nand relative to the overall element progress. So for example, if `blend-background`\nstarts at `0.5`, the effect will only start once the current element reaches 0.5\nof its progress. In this context, the progress is a value in the range of `[0, 1]`\nthat indicates where this element is on the screen relative to the viewport.",
                  "sourceRange": {
                    "start": {
                      "line": 132,
                      "column": 6
                    },
                    "end": {
                      "line": 137,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "Object"
                },
                {
                  "name": "disabled",
                  "description": "Disables CSS transitions and scroll effects on the element.",
                  "sourceRange": {
                    "start": {
                      "line": 142,
                      "column": 6
                    },
                    "end": {
                      "line": 146,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "threshold",
                  "description": "Allows to set a `scrollTop` threshold. When greater than 0, `thresholdTriggered`\nis true only when the scroll target's `scrollTop` has reached this value.\n\nFor example, if `threshold = 100`, `thresholdTriggered` is true when the `scrollTop`\nis at least `100`.",
                  "sourceRange": {
                    "start": {
                      "line": 155,
                      "column": 6
                    },
                    "end": {
                      "line": 158,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "number"
                },
                {
                  "name": "threshold-triggered",
                  "description": "True if the `scrollTop` threshold (set in `scrollTopThreshold`) has\nbeen reached.",
                  "sourceRange": {
                    "start": {
                      "line": 164,
                      "column": 6
                    },
                    "end": {
                      "line": 169,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                }
              ],
              "events": [
                {
                  "type": "CustomEvent",
                  "name": "threshold-triggered-changed",
                  "description": "Fired when the `thresholdTriggered` property changes.",
                  "metadata": {}
                }
              ],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "",
              "summary": "",
              "path": "components\\iron-doc-viewer\\iron-doc-viewer-behavior.html",
              "properties": [
                {
                  "name": "descriptor",
                  "type": "Object",
                  "description": "The [Polymer\nAnalyzer](https://github.com/Polymer/polymer-analyzer)-generated element\ndescriptor to display details for.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 14,
                      "column": 6
                    },
                    "end": {
                      "line": 16,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "baseHref",
                  "type": "string",
                  "description": "The base href where this doc viewer is located.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 21,
                      "column": 6
                    },
                    "end": {
                      "line": 21,
                      "column": 41
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "\"\""
                },
                {
                  "name": "fragmentPrefix",
                  "type": "string",
                  "description": "Prefix for fragment identifiers used in anchors.\nFor static routing `iron-component-page` can\nset this to a string identifying the current component.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 28,
                      "column": 6
                    },
                    "end": {
                      "line": 28,
                      "column": 47
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "\"\""
                },
                {
                  "name": "_showProtected",
                  "type": "boolean",
                  "description": "Whether protected members should be hidden or shown.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 33,
                      "column": 6
                    },
                    "end": {
                      "line": 36,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "_showInherited",
                  "type": "boolean",
                  "description": "Whether inherited members should be hidden or shown.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 41,
                      "column": 6
                    },
                    "end": {
                      "line": 44,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "true"
                }
              ],
              "methods": [
                {
                  "name": "_filterMembers",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 47,
                      "column": 4
                    },
                    "end": {
                      "line": 60,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "items"
                    },
                    {
                      "name": "showProtected"
                    },
                    {
                      "name": "showInherited"
                    }
                  ]
                },
                {
                  "name": "_noneToShow",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 62,
                      "column": 4
                    },
                    "end": {
                      "line": 75,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "showProtected"
                    },
                    {
                      "name": "showInherited"
                    },
                    {
                      "name": "descriptor"
                    },
                    {
                      "name": "name"
                    }
                  ]
                },
                {
                  "name": "scrollToAnchor",
                  "description": "Scroll to the descriptor (element, function, etc.) with an `anchor-id`\nmatching the given URL hash (`#` optional). If no hash is specified,\nuses `window.location.hash`.\n\nWhichever element or script is in charge of routing should call this\nmethod on initial page load and on `hashchange` events.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 85,
                      "column": 4
                    },
                    "end": {
                      "line": 116,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "hash"
                    }
                  ]
                },
                {
                  "name": "_getElementName",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 118,
                      "column": 4
                    },
                    "end": {
                      "line": 129,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "element"
                    }
                  ]
                },
                {
                  "name": "_getElementId",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 131,
                      "column": 4
                    },
                    "end": {
                      "line": 133,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "element"
                    }
                  ]
                },
                {
                  "name": "_getPolymerBehaviors",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 135,
                      "column": 4
                    },
                    "end": {
                      "line": 137,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "descriptor"
                    }
                  ]
                },
                {
                  "name": "_compareDescriptors",
                  "description": "Compare two analysis descriptors (elements, functions, etc.) by\ndisplay name.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 143,
                      "column": 4
                    },
                    "end": {
                      "line": 153,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "a"
                    },
                    {
                      "name": "b"
                    }
                  ]
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 6,
                  "column": 2
                },
                "end": {
                  "line": 155,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "Polymer.IronDocViewerBehavior",
              "attributes": [
                {
                  "name": "descriptor",
                  "description": "The [Polymer\nAnalyzer](https://github.com/Polymer/polymer-analyzer)-generated element\ndescriptor to display details for.",
                  "sourceRange": {
                    "start": {
                      "line": 14,
                      "column": 6
                    },
                    "end": {
                      "line": 16,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "Object"
                },
                {
                  "name": "base-href",
                  "description": "The base href where this doc viewer is located.",
                  "sourceRange": {
                    "start": {
                      "line": 21,
                      "column": 6
                    },
                    "end": {
                      "line": 21,
                      "column": 41
                    }
                  },
                  "metadata": {},
                  "type": "string"
                },
                {
                  "name": "fragment-prefix",
                  "description": "Prefix for fragment identifiers used in anchors.\nFor static routing `iron-component-page` can\nset this to a string identifying the current component.",
                  "sourceRange": {
                    "start": {
                      "line": 28,
                      "column": 6
                    },
                    "end": {
                      "line": 28,
                      "column": 47
                    }
                  },
                  "metadata": {},
                  "type": "string"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "`Polymer.IronA11yKeysBehavior` provides a normalized interface for processing\nkeyboard commands that pertain to [WAI-ARIA best\npractices](http://www.w3.org/TR/wai-aria-practices/#kbd_general_binding). The\nelement takes care of browser differences with respect to Keyboard events and\nuses an expressive syntax to filter key presses.\n\nUse the `keyBindings` prototype property to express what combination of keys\nwill trigger the callback. A key binding has the format\n`\"KEY+MODIFIER:EVENT\": \"callback\"` (`\"KEY\": \"callback\"` or\n`\"KEY:EVENT\": \"callback\"` are valid as well). Some examples:\n\n     keyBindings: {\n       'space': '_onKeydown', // same as 'space:keydown'\n       'shift+tab': '_onKeydown',\n       'enter:keypress': '_onKeypress',\n       'esc:keyup': '_onKeyup'\n     }\n\nThe callback will receive with an event containing the following information\nin `event.detail`:\n\n     _onKeydown: function(event) {\n       console.log(event.detail.combo); // KEY+MODIFIER, e.g. \"shift+tab\"\n       console.log(event.detail.key); // KEY only, e.g. \"tab\"\n       console.log(event.detail.event); // EVENT, e.g. \"keydown\"\n       console.log(event.detail.keyboardEvent); // the original KeyboardEvent\n     }\n\nUse the `keyEventTarget` attribute to set up event handlers on a specific\nnode.\n\nSee the [demo source\ncode](https://github.com/PolymerElements/iron-a11y-keys-behavior/blob/master/demo/x-key-aware.html)\nfor an example.",
              "summary": "",
              "path": "components\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
              "properties": [
                {
                  "name": "keyEventTarget",
                  "type": "?EventTarget",
                  "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 277,
                      "column": 6
                    },
                    "end": {
                      "line": 282,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "stopKeyboardEventPropagation",
                  "type": "boolean",
                  "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 288,
                      "column": 6
                    },
                    "end": {
                      "line": 288,
                      "column": 65
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "_boundKeyHandlers",
                  "type": "Array",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 290,
                      "column": 6
                    },
                    "end": {
                      "line": 295,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "[]"
                },
                {
                  "name": "_imperativeKeyBindings",
                  "type": "Object",
                  "description": "own properties of everything on the \"prototype\".",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 299,
                      "column": 6
                    },
                    "end": {
                      "line": 304,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "{}"
                },
                {
                  "name": "keyBindings",
                  "type": "!Object",
                  "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 315,
                      "column": 4
                    },
                    "end": {
                      "line": 315,
                      "column": 19
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                }
              ],
              "methods": [
                {
                  "name": "registered",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 317,
                      "column": 4
                    },
                    "end": {
                      "line": 319,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "attached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 321,
                      "column": 4
                    },
                    "end": {
                      "line": 323,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "detached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 325,
                      "column": 4
                    },
                    "end": {
                      "line": 327,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "addOwnKeyBinding",
                  "description": "Can be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 337,
                      "column": 4
                    },
                    "end": {
                      "line": 341,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "eventString",
                      "type": "string"
                    },
                    {
                      "name": "handlerName",
                      "type": "string"
                    }
                  ]
                },
                {
                  "name": "removeOwnKeyBindings",
                  "description": "When called, will remove all imperatively-added key bindings.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 346,
                      "column": 4
                    },
                    "end": {
                      "line": 350,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "keyboardEventMatchesKeys",
                  "description": "Returns true if a keyboard event matches `eventString`.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 359,
                      "column": 4
                    },
                    "end": {
                      "line": 367,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event",
                      "type": "KeyboardEvent"
                    },
                    {
                      "name": "eventString",
                      "type": "string"
                    }
                  ],
                  "return": {
                    "type": "boolean"
                  }
                },
                {
                  "name": "_collectKeyBindings",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 369,
                      "column": 4
                    },
                    "end": {
                      "line": 379,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_prepKeyBindings",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 381,
                      "column": 4
                    },
                    "end": {
                      "line": 403,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_addKeyBinding",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 405,
                      "column": 4
                    },
                    "end": {
                      "line": 412,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "eventString"
                    },
                    {
                      "name": "handlerName"
                    }
                  ]
                },
                {
                  "name": "_resetKeyEventListeners",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 414,
                      "column": 4
                    },
                    "end": {
                      "line": 420,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_listenKeyEventListeners",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 422,
                      "column": 4
                    },
                    "end": {
                      "line": 435,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_unlistenKeyEventListeners",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 437,
                      "column": 4
                    },
                    "end": {
                      "line": 452,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_onKeyBindingEvent",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 454,
                      "column": 4
                    },
                    "end": {
                      "line": 475,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "keyBindings"
                    },
                    {
                      "name": "event"
                    }
                  ]
                },
                {
                  "name": "_triggerKeyHandler",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 477,
                      "column": 4
                    },
                    "end": {
                      "line": 486,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "keyCombo"
                    },
                    {
                      "name": "handlerName"
                    },
                    {
                      "name": "keyboardEvent"
                    }
                  ]
                }
              ],
              "staticMethods": [],
              "demos": [
                {
                  "url": "demo/index.html",
                  "description": "demo"
                },
                {
                  "url": "demo/index.html",
                  "description": ""
                }
              ],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 270,
                  "column": 2
                },
                "end": {
                  "line": 487,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "Polymer.IronA11yKeysBehavior",
              "attributes": [
                {
                  "name": "key-event-target",
                  "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
                  "sourceRange": {
                    "start": {
                      "line": 277,
                      "column": 6
                    },
                    "end": {
                      "line": 282,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "?EventTarget"
                },
                {
                  "name": "stop-keyboard-event-propagation",
                  "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
                  "sourceRange": {
                    "start": {
                      "line": 288,
                      "column": 6
                    },
                    "end": {
                      "line": 288,
                      "column": 65
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "",
              "summary": "",
              "path": "components\\iron-behaviors\\iron-control-state.html",
              "properties": [
                {
                  "name": "focused",
                  "type": "boolean",
                  "description": "If true, the element currently has focus.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 25,
                      "column": 6
                    },
                    "end": {
                      "line": 31,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "readOnly": true
                    }
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "disabled",
                  "type": "boolean",
                  "description": "If true, the user cannot interact with this element.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 36,
                      "column": 6
                    },
                    "end": {
                      "line": 42,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "observer": "\"_disabledChanged\""
                    }
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "_oldTabIndex",
                  "type": "(?string | undefined)",
                  "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 49,
                      "column": 6
                    },
                    "end": {
                      "line": 51,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "_boundFocusBlurHandler",
                  "type": "Function",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 53,
                      "column": 6
                    },
                    "end": {
                      "line": 58,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "__handleEventRetargeting",
                  "type": "boolean",
                  "description": "",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 60,
                      "column": 6
                    },
                    "end": {
                      "line": 65,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                }
              ],
              "methods": [
                {
                  "name": "ready",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 75,
                      "column": 4
                    },
                    "end": {
                      "line": 78,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "_focusBlurHandler",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 80,
                      "column": 4
                    },
                    "end": {
                      "line": 104,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event"
                    }
                  ]
                },
                {
                  "name": "_disabledChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 106,
                      "column": 4
                    },
                    "end": {
                      "line": 125,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "disabled"
                    },
                    {
                      "name": "old"
                    }
                  ]
                },
                {
                  "name": "_changedControlState",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 127,
                      "column": 4
                    },
                    "end": {
                      "line": 132,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                }
              ],
              "staticMethods": [],
              "demos": [
                {
                  "url": "demo/index.html",
                  "description": "demo"
                },
                {
                  "url": "demo/index.html",
                  "description": ""
                }
              ],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 18,
                  "column": 2
                },
                "end": {
                  "line": 134,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "Polymer.IronControlState",
              "attributes": [
                {
                  "name": "focused",
                  "description": "If true, the element currently has focus.",
                  "sourceRange": {
                    "start": {
                      "line": 25,
                      "column": 6
                    },
                    "end": {
                      "line": 31,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "disabled",
                  "description": "If true, the user cannot interact with this element.",
                  "sourceRange": {
                    "start": {
                      "line": 36,
                      "column": 6
                    },
                    "end": {
                      "line": 42,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                }
              ],
              "events": [
                {
                  "type": "CustomEvent",
                  "name": "focused-changed",
                  "description": "Fired when the `focused` property changes.",
                  "metadata": {}
                },
                {
                  "type": "CustomEvent",
                  "name": "disabled-changed",
                  "description": "Fired when the `disabled` property changes.",
                  "metadata": {}
                }
              ],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "",
              "summary": "",
              "path": "components\\iron-behaviors\\iron-button-state.html",
              "properties": [
                {
                  "name": "keyEventTarget",
                  "type": "?EventTarget",
                  "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 277,
                      "column": 6
                    },
                    "end": {
                      "line": 282,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "stopKeyboardEventPropagation",
                  "type": "boolean",
                  "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 288,
                      "column": 6
                    },
                    "end": {
                      "line": 288,
                      "column": 65
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_boundKeyHandlers",
                  "type": "Array",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 290,
                      "column": 6
                    },
                    "end": {
                      "line": 295,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "[]",
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_imperativeKeyBindings",
                  "type": "Object",
                  "description": "own properties of everything on the \"prototype\".",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 299,
                      "column": 6
                    },
                    "end": {
                      "line": 304,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "{}",
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "keyBindings",
                  "type": "!Object",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 100,
                      "column": 4
                    },
                    "end": {
                      "line": 104,
                      "column": 5
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "pressed",
                  "type": "boolean",
                  "description": "If true, the user is currently holding down the button.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 27,
                      "column": 6
                    },
                    "end": {
                      "line": 33,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "observer": "\"_pressedChanged\"",
                      "readOnly": true
                    }
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "toggles",
                  "type": "boolean",
                  "description": "If true, the button toggles the active state with each tap or press\nof the spacebar.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 39,
                      "column": 6
                    },
                    "end": {
                      "line": 43,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "active",
                  "type": "boolean",
                  "description": "If true, the button is a toggle and is currently in the active state.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 48,
                      "column": 6
                    },
                    "end": {
                      "line": 53,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true
                    }
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "pointerDown",
                  "type": "boolean",
                  "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 60,
                      "column": 6
                    },
                    "end": {
                      "line": 64,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true
                    }
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "receivedFocusFromKeyboard",
                  "type": "boolean",
                  "description": "True if the input device that caused the element to receive focus\nwas a keyboard.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 70,
                      "column": 6
                    },
                    "end": {
                      "line": 73,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true
                    }
                  }
                },
                {
                  "name": "ariaActiveAttribute",
                  "type": "string",
                  "description": "The aria attribute to be set if the button is a toggle and in the\nactive state.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 79,
                      "column": 6
                    },
                    "end": {
                      "line": 83,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "observer": "\"_ariaActiveAttributeChanged\""
                    }
                  },
                  "defaultValue": "\"aria-pressed\""
                },
                {
                  "name": "_mouseEventRe",
                  "type": "object",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 106,
                      "column": 4
                    },
                    "end": {
                      "line": 106,
                      "column": 27
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                }
              ],
              "methods": [
                {
                  "name": "registered",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 317,
                      "column": 4
                    },
                    "end": {
                      "line": 319,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "attached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 321,
                      "column": 4
                    },
                    "end": {
                      "line": 323,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "detached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 325,
                      "column": 4
                    },
                    "end": {
                      "line": 327,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "addOwnKeyBinding",
                  "description": "Can be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 337,
                      "column": 4
                    },
                    "end": {
                      "line": 341,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "eventString",
                      "type": "string"
                    },
                    {
                      "name": "handlerName",
                      "type": "string"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "removeOwnKeyBindings",
                  "description": "When called, will remove all imperatively-added key bindings.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 346,
                      "column": 4
                    },
                    "end": {
                      "line": 350,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "keyboardEventMatchesKeys",
                  "description": "Returns true if a keyboard event matches `eventString`.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 359,
                      "column": 4
                    },
                    "end": {
                      "line": 367,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event",
                      "type": "KeyboardEvent"
                    },
                    {
                      "name": "eventString",
                      "type": "string"
                    }
                  ],
                  "return": {
                    "type": "boolean"
                  },
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_collectKeyBindings",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 369,
                      "column": 4
                    },
                    "end": {
                      "line": 379,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_prepKeyBindings",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 381,
                      "column": 4
                    },
                    "end": {
                      "line": 403,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_addKeyBinding",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 405,
                      "column": 4
                    },
                    "end": {
                      "line": 412,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "eventString"
                    },
                    {
                      "name": "handlerName"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_resetKeyEventListeners",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 414,
                      "column": 4
                    },
                    "end": {
                      "line": 420,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_listenKeyEventListeners",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 422,
                      "column": 4
                    },
                    "end": {
                      "line": 435,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_unlistenKeyEventListeners",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 437,
                      "column": 4
                    },
                    "end": {
                      "line": 452,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_onKeyBindingEvent",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 454,
                      "column": 4
                    },
                    "end": {
                      "line": 475,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "keyBindings"
                    },
                    {
                      "name": "event"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_triggerKeyHandler",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 477,
                      "column": 4
                    },
                    "end": {
                      "line": 486,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "keyCombo"
                    },
                    {
                      "name": "handlerName"
                    },
                    {
                      "name": "keyboardEvent"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_tapHandler",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 108,
                      "column": 4
                    },
                    "end": {
                      "line": 115,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_focusChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 117,
                      "column": 4
                    },
                    "end": {
                      "line": 123,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "focused"
                    }
                  ]
                },
                {
                  "name": "_detectKeyboardFocus",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 125,
                      "column": 4
                    },
                    "end": {
                      "line": 127,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "focused"
                    }
                  ]
                },
                {
                  "name": "_userActivate",
                  "description": "'change' events",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 131,
                      "column": 4
                    },
                    "end": {
                      "line": 136,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "active"
                    }
                  ]
                },
                {
                  "name": "_downHandler",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 138,
                      "column": 4
                    },
                    "end": {
                      "line": 142,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event"
                    }
                  ]
                },
                {
                  "name": "_upHandler",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 144,
                      "column": 4
                    },
                    "end": {
                      "line": 147,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_spaceKeyDownHandler",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 152,
                      "column": 4
                    },
                    "end": {
                      "line": 164,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event",
                      "type": "!KeyboardEvent",
                      "description": "."
                    }
                  ]
                },
                {
                  "name": "_spaceKeyUpHandler",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 169,
                      "column": 4
                    },
                    "end": {
                      "line": 182,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event",
                      "type": "!KeyboardEvent",
                      "description": "."
                    }
                  ]
                },
                {
                  "name": "_asyncClick",
                  "description": "event handler to unwind before triggering another event",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 186,
                      "column": 4
                    },
                    "end": {
                      "line": 190,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_pressedChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 194,
                      "column": 4
                    },
                    "end": {
                      "line": 196,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "pressed"
                    }
                  ]
                },
                {
                  "name": "_ariaActiveAttributeChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 198,
                      "column": 4
                    },
                    "end": {
                      "line": 202,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "oldValue"
                    }
                  ]
                },
                {
                  "name": "_activeChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 204,
                      "column": 4
                    },
                    "end": {
                      "line": 212,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "active"
                    },
                    {
                      "name": "ariaActiveAttribute"
                    }
                  ]
                },
                {
                  "name": "_controlStateChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 214,
                      "column": 4
                    },
                    "end": {
                      "line": 220,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_changedButtonState",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 224,
                      "column": 4
                    },
                    "end": {
                      "line": 228,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                }
              ],
              "staticMethods": [],
              "demos": [
                {
                  "url": "demo/index.html",
                  "description": "demo"
                },
                {
                  "url": "demo/index.html",
                  "description": ""
                }
              ],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 20,
                  "column": 2
                },
                "end": {
                  "line": 230,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "Polymer.IronButtonState",
              "attributes": [
                {
                  "name": "key-event-target",
                  "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 277,
                      "column": 6
                    },
                    "end": {
                      "line": 282,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "?EventTarget",
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "stop-keyboard-event-propagation",
                  "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 288,
                      "column": 6
                    },
                    "end": {
                      "line": 288,
                      "column": 65
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "pressed",
                  "description": "If true, the user is currently holding down the button.",
                  "sourceRange": {
                    "start": {
                      "line": 27,
                      "column": 6
                    },
                    "end": {
                      "line": 33,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "toggles",
                  "description": "If true, the button toggles the active state with each tap or press\nof the spacebar.",
                  "sourceRange": {
                    "start": {
                      "line": 39,
                      "column": 6
                    },
                    "end": {
                      "line": 43,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "active",
                  "description": "If true, the button is a toggle and is currently in the active state.",
                  "sourceRange": {
                    "start": {
                      "line": 48,
                      "column": 6
                    },
                    "end": {
                      "line": 53,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "pointer-down",
                  "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).",
                  "sourceRange": {
                    "start": {
                      "line": 60,
                      "column": 6
                    },
                    "end": {
                      "line": 64,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "received-focus-from-keyboard",
                  "description": "True if the input device that caused the element to receive focus\nwas a keyboard.",
                  "sourceRange": {
                    "start": {
                      "line": 70,
                      "column": 6
                    },
                    "end": {
                      "line": 73,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "aria-active-attribute",
                  "description": "The aria attribute to be set if the button is a toggle and in the\nactive state.",
                  "sourceRange": {
                    "start": {
                      "line": 79,
                      "column": 6
                    },
                    "end": {
                      "line": 83,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string"
                }
              ],
              "events": [
                {
                  "type": "CustomEvent",
                  "name": "active-changed",
                  "description": "Fired when the `active` property changes.",
                  "metadata": {}
                }
              ],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "`Polymer.PaperRippleBehavior` dynamically implements a ripple\nwhen the element has focus via pointer or keyboard.\n\nNOTE: This behavior is intended to be used in conjunction with and after\n`Polymer.IronButtonState` and `Polymer.IronControlState`.",
              "summary": "",
              "path": "components\\paper-behaviors\\paper-ripple-behavior.html",
              "properties": [
                {
                  "name": "noink",
                  "type": "boolean",
                  "description": "If true, the element will not produce a ripple effect when interacted\nwith via the pointer.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 30,
                      "column": 6
                    },
                    "end": {
                      "line": 30,
                      "column": 55
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "observer": "\"_noinkChanged\""
                    }
                  }
                },
                {
                  "name": "_rippleContainer",
                  "type": "(Element | undefined)",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 35,
                      "column": 6
                    },
                    "end": {
                      "line": 37,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                }
              ],
              "methods": [
                {
                  "name": "_buttonStateChanged",
                  "description": "Ensures a `<paper-ripple>` element is available when the element is\nfocused.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 44,
                      "column": 4
                    },
                    "end": {
                      "line": 48,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_downHandler",
                  "description": "In addition to the functionality provided in `IronButtonState`, ensures\na ripple effect is created when the element is in a `pressed` state.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 54,
                      "column": 4
                    },
                    "end": {
                      "line": 59,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event"
                    }
                  ]
                },
                {
                  "name": "ensureRipple",
                  "description": "Ensures this element contains a ripple effect. For startup efficiency\nthe ripple effect is dynamically on demand when needed.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 67,
                      "column": 4
                    },
                    "end": {
                      "line": 86,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "optTriggeringEvent",
                      "type": "!Event=",
                      "description": "(optional) event that triggered the\nripple."
                    }
                  ]
                },
                {
                  "name": "getRipple",
                  "description": "Returns the `<paper-ripple>` element used by this element to create\nripple effects. The element's ripple is created on demand, when\nnecessary, and calling this method will force the\nripple to be created.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 94,
                      "column": 4
                    },
                    "end": {
                      "line": 97,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "hasRipple",
                  "description": "Returns true if this element currently contains a ripple effect.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 103,
                      "column": 4
                    },
                    "end": {
                      "line": 105,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "boolean"
                  }
                },
                {
                  "name": "_createRipple",
                  "description": "Create the element's ripple effect via creating a `<paper-ripple>`.\nOverride this method to customize the ripple element.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 112,
                      "column": 4
                    },
                    "end": {
                      "line": 116,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "!PaperRippleElement",
                    "desc": "Returns a `<paper-ripple>` element."
                  }
                },
                {
                  "name": "_noinkChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 118,
                      "column": 4
                    },
                    "end": {
                      "line": 122,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "noink"
                    }
                  ]
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 24,
                  "column": 2
                },
                "end": {
                  "line": 123,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "Polymer.PaperRippleBehavior",
              "attributes": [
                {
                  "name": "noink",
                  "description": "If true, the element will not produce a ripple effect when interacted\nwith via the pointer.",
                  "sourceRange": {
                    "start": {
                      "line": 30,
                      "column": 6
                    },
                    "end": {
                      "line": 30,
                      "column": 55
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "`Polymer.PaperInkyFocusBehavior` implements a ripple when the element has\nkeyboard focus.",
              "summary": "",
              "path": "components\\paper-behaviors\\paper-inky-focus-behavior.html",
              "properties": [
                {
                  "name": "keyEventTarget",
                  "type": "?EventTarget",
                  "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 277,
                      "column": 6
                    },
                    "end": {
                      "line": 282,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "stopKeyboardEventPropagation",
                  "type": "boolean",
                  "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 288,
                      "column": 6
                    },
                    "end": {
                      "line": 288,
                      "column": 65
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_boundKeyHandlers",
                  "type": "Array",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 290,
                      "column": 6
                    },
                    "end": {
                      "line": 295,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "[]",
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_imperativeKeyBindings",
                  "type": "Object",
                  "description": "own properties of everything on the \"prototype\".",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 299,
                      "column": 6
                    },
                    "end": {
                      "line": 304,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "{}",
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "keyBindings",
                  "type": "!Object",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 100,
                      "column": 4
                    },
                    "end": {
                      "line": 104,
                      "column": 5
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "pressed",
                  "type": "boolean",
                  "description": "If true, the user is currently holding down the button.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 27,
                      "column": 6
                    },
                    "end": {
                      "line": 33,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "observer": "\"_pressedChanged\"",
                      "readOnly": true
                    }
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "toggles",
                  "type": "boolean",
                  "description": "If true, the button toggles the active state with each tap or press\nof the spacebar.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 39,
                      "column": 6
                    },
                    "end": {
                      "line": 43,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "active",
                  "type": "boolean",
                  "description": "If true, the button is a toggle and is currently in the active state.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 48,
                      "column": 6
                    },
                    "end": {
                      "line": 53,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true
                    }
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "pointerDown",
                  "type": "boolean",
                  "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 60,
                      "column": 6
                    },
                    "end": {
                      "line": 64,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true
                    }
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "receivedFocusFromKeyboard",
                  "type": "boolean",
                  "description": "True if the input device that caused the element to receive focus\nwas a keyboard.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 70,
                      "column": 6
                    },
                    "end": {
                      "line": 73,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true
                    }
                  },
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "ariaActiveAttribute",
                  "type": "string",
                  "description": "The aria attribute to be set if the button is a toggle and in the\nactive state.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 79,
                      "column": 6
                    },
                    "end": {
                      "line": 83,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "observer": "\"_ariaActiveAttributeChanged\""
                    }
                  },
                  "defaultValue": "\"aria-pressed\"",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_mouseEventRe",
                  "type": "object",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 106,
                      "column": 4
                    },
                    "end": {
                      "line": 106,
                      "column": 27
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "focused",
                  "type": "boolean",
                  "description": "If true, the element currently has focus.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 25,
                      "column": 6
                    },
                    "end": {
                      "line": 31,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "readOnly": true
                    }
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "disabled",
                  "type": "boolean",
                  "description": "If true, the user cannot interact with this element.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 36,
                      "column": 6
                    },
                    "end": {
                      "line": 42,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "observer": "\"_disabledChanged\""
                    }
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "_oldTabIndex",
                  "type": "(?string | undefined)",
                  "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 49,
                      "column": 6
                    },
                    "end": {
                      "line": 51,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "_boundFocusBlurHandler",
                  "type": "Function",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 53,
                      "column": 6
                    },
                    "end": {
                      "line": 58,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "__handleEventRetargeting",
                  "type": "boolean",
                  "description": "",
                  "privacy": "private",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 60,
                      "column": 6
                    },
                    "end": {
                      "line": 65,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "noink",
                  "type": "boolean",
                  "description": "If true, the element will not produce a ripple effect when interacted\nwith via the pointer.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "paper-ripple-behavior.html",
                    "start": {
                      "line": 30,
                      "column": 6
                    },
                    "end": {
                      "line": 30,
                      "column": 55
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "observer": "\"_noinkChanged\""
                    }
                  },
                  "inheritedFrom": "Polymer.PaperRippleBehavior"
                },
                {
                  "name": "_rippleContainer",
                  "type": "(Element | undefined)",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "paper-ripple-behavior.html",
                    "start": {
                      "line": 35,
                      "column": 6
                    },
                    "end": {
                      "line": 37,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.PaperRippleBehavior"
                }
              ],
              "methods": [
                {
                  "name": "registered",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 317,
                      "column": 4
                    },
                    "end": {
                      "line": 319,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "attached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 321,
                      "column": 4
                    },
                    "end": {
                      "line": 323,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "detached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 325,
                      "column": 4
                    },
                    "end": {
                      "line": 327,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "addOwnKeyBinding",
                  "description": "Can be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 337,
                      "column": 4
                    },
                    "end": {
                      "line": 341,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "eventString",
                      "type": "string"
                    },
                    {
                      "name": "handlerName",
                      "type": "string"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "removeOwnKeyBindings",
                  "description": "When called, will remove all imperatively-added key bindings.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 346,
                      "column": 4
                    },
                    "end": {
                      "line": 350,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "keyboardEventMatchesKeys",
                  "description": "Returns true if a keyboard event matches `eventString`.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 359,
                      "column": 4
                    },
                    "end": {
                      "line": 367,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event",
                      "type": "KeyboardEvent"
                    },
                    {
                      "name": "eventString",
                      "type": "string"
                    }
                  ],
                  "return": {
                    "type": "boolean"
                  },
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_collectKeyBindings",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 369,
                      "column": 4
                    },
                    "end": {
                      "line": 379,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_prepKeyBindings",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 381,
                      "column": 4
                    },
                    "end": {
                      "line": 403,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_addKeyBinding",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 405,
                      "column": 4
                    },
                    "end": {
                      "line": 412,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "eventString"
                    },
                    {
                      "name": "handlerName"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_resetKeyEventListeners",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 414,
                      "column": 4
                    },
                    "end": {
                      "line": 420,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_listenKeyEventListeners",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 422,
                      "column": 4
                    },
                    "end": {
                      "line": 435,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_unlistenKeyEventListeners",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 437,
                      "column": 4
                    },
                    "end": {
                      "line": 452,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_onKeyBindingEvent",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 454,
                      "column": 4
                    },
                    "end": {
                      "line": 475,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "keyBindings"
                    },
                    {
                      "name": "event"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_triggerKeyHandler",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 477,
                      "column": 4
                    },
                    "end": {
                      "line": 486,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "keyCombo"
                    },
                    {
                      "name": "handlerName"
                    },
                    {
                      "name": "keyboardEvent"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_tapHandler",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 108,
                      "column": 4
                    },
                    "end": {
                      "line": 115,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_focusChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 117,
                      "column": 4
                    },
                    "end": {
                      "line": 123,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "focused"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_detectKeyboardFocus",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 125,
                      "column": 4
                    },
                    "end": {
                      "line": 127,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "focused"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_userActivate",
                  "description": "'change' events",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 131,
                      "column": 4
                    },
                    "end": {
                      "line": 136,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "active"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_downHandler",
                  "description": "In addition to the functionality provided in `IronButtonState`, ensures\na ripple effect is created when the element is in a `pressed` state.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "paper-ripple-behavior.html",
                    "start": {
                      "line": 54,
                      "column": 4
                    },
                    "end": {
                      "line": 59,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event"
                    }
                  ],
                  "inheritedFrom": "Polymer.PaperRippleBehavior"
                },
                {
                  "name": "_upHandler",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 144,
                      "column": 4
                    },
                    "end": {
                      "line": 147,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_spaceKeyDownHandler",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 152,
                      "column": 4
                    },
                    "end": {
                      "line": 164,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event",
                      "type": "!KeyboardEvent",
                      "description": "."
                    }
                  ],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_spaceKeyUpHandler",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 169,
                      "column": 4
                    },
                    "end": {
                      "line": 182,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event",
                      "type": "!KeyboardEvent",
                      "description": "."
                    }
                  ],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_asyncClick",
                  "description": "event handler to unwind before triggering another event",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 186,
                      "column": 4
                    },
                    "end": {
                      "line": 190,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_pressedChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 194,
                      "column": 4
                    },
                    "end": {
                      "line": 196,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "pressed"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_ariaActiveAttributeChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 198,
                      "column": 4
                    },
                    "end": {
                      "line": 202,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "oldValue"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_activeChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 204,
                      "column": 4
                    },
                    "end": {
                      "line": 212,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "active"
                    },
                    {
                      "name": "ariaActiveAttribute"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_controlStateChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 214,
                      "column": 4
                    },
                    "end": {
                      "line": 220,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_changedButtonState",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 224,
                      "column": 4
                    },
                    "end": {
                      "line": 228,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "ready",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 75,
                      "column": 4
                    },
                    "end": {
                      "line": 78,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  },
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "_focusBlurHandler",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 80,
                      "column": 4
                    },
                    "end": {
                      "line": 104,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "_disabledChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 106,
                      "column": 4
                    },
                    "end": {
                      "line": 125,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "disabled"
                    },
                    {
                      "name": "old"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "_changedControlState",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 127,
                      "column": 4
                    },
                    "end": {
                      "line": 132,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "_buttonStateChanged",
                  "description": "Ensures a `<paper-ripple>` element is available when the element is\nfocused.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "paper-ripple-behavior.html",
                    "start": {
                      "line": 44,
                      "column": 4
                    },
                    "end": {
                      "line": 48,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.PaperRippleBehavior"
                },
                {
                  "name": "ensureRipple",
                  "description": "Ensures this element contains a ripple effect. For startup efficiency\nthe ripple effect is dynamically on demand when needed.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "paper-ripple-behavior.html",
                    "start": {
                      "line": 67,
                      "column": 4
                    },
                    "end": {
                      "line": 86,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "optTriggeringEvent",
                      "type": "!Event=",
                      "description": "(optional) event that triggered the\nripple."
                    }
                  ],
                  "inheritedFrom": "Polymer.PaperRippleBehavior"
                },
                {
                  "name": "getRipple",
                  "description": "Returns the `<paper-ripple>` element used by this element to create\nripple effects. The element's ripple is created on demand, when\nnecessary, and calling this method will force the\nripple to be created.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "paper-ripple-behavior.html",
                    "start": {
                      "line": 94,
                      "column": 4
                    },
                    "end": {
                      "line": 97,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.PaperRippleBehavior"
                },
                {
                  "name": "hasRipple",
                  "description": "Returns true if this element currently contains a ripple effect.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "paper-ripple-behavior.html",
                    "start": {
                      "line": 103,
                      "column": 4
                    },
                    "end": {
                      "line": 105,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "boolean"
                  },
                  "inheritedFrom": "Polymer.PaperRippleBehavior"
                },
                {
                  "name": "_createRipple",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 33,
                      "column": 4
                    },
                    "end": {
                      "line": 39,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_noinkChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "paper-ripple-behavior.html",
                    "start": {
                      "line": 118,
                      "column": 4
                    },
                    "end": {
                      "line": 122,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "noink"
                    }
                  ],
                  "inheritedFrom": "Polymer.PaperRippleBehavior"
                },
                {
                  "name": "_focusedChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 24,
                      "column": 4
                    },
                    "end": {
                      "line": 31,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "receivedFocusFromKeyboard"
                    }
                  ]
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 21,
                  "column": 2
                },
                "end": {
                  "line": 40,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "Polymer.PaperInkyFocusBehavior",
              "attributes": [
                {
                  "name": "key-event-target",
                  "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 277,
                      "column": 6
                    },
                    "end": {
                      "line": 282,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "?EventTarget",
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "stop-keyboard-event-propagation",
                  "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 288,
                      "column": 6
                    },
                    "end": {
                      "line": 288,
                      "column": 65
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "pressed",
                  "description": "If true, the user is currently holding down the button.",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 27,
                      "column": 6
                    },
                    "end": {
                      "line": 33,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "toggles",
                  "description": "If true, the button toggles the active state with each tap or press\nof the spacebar.",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 39,
                      "column": 6
                    },
                    "end": {
                      "line": 43,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "active",
                  "description": "If true, the button is a toggle and is currently in the active state.",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 48,
                      "column": 6
                    },
                    "end": {
                      "line": 53,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "pointer-down",
                  "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 60,
                      "column": 6
                    },
                    "end": {
                      "line": 64,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "received-focus-from-keyboard",
                  "description": "True if the input device that caused the element to receive focus\nwas a keyboard.",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 70,
                      "column": 6
                    },
                    "end": {
                      "line": 73,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "aria-active-attribute",
                  "description": "The aria attribute to be set if the button is a toggle and in the\nactive state.",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 79,
                      "column": 6
                    },
                    "end": {
                      "line": 83,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "focused",
                  "description": "If true, the element currently has focus.",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 25,
                      "column": 6
                    },
                    "end": {
                      "line": 31,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "disabled",
                  "description": "If true, the user cannot interact with this element.",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 36,
                      "column": 6
                    },
                    "end": {
                      "line": 42,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "noink",
                  "description": "If true, the element will not produce a ripple effect when interacted\nwith via the pointer.",
                  "sourceRange": {
                    "file": "paper-ripple-behavior.html",
                    "start": {
                      "line": 30,
                      "column": 6
                    },
                    "end": {
                      "line": 30,
                      "column": 55
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.PaperRippleBehavior"
                }
              ],
              "events": [
                {
                  "type": "CustomEvent",
                  "name": "active-changed",
                  "description": "Fired when the `active` property changes.",
                  "metadata": {},
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "type": "CustomEvent",
                  "name": "focused-changed",
                  "description": "Fired when the `focused` property changes.",
                  "metadata": {},
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "type": "CustomEvent",
                  "name": "disabled-changed",
                  "description": "Fired when the `disabled` property changes.",
                  "metadata": {},
                  "inheritedFrom": "Polymer.IronControlState"
                }
              ],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "  `Polymer.IronFitBehavior` fits an element in another element using `max-height`\n  and `max-width`, and optionally centers it in the window or another element.\n\n  The element will only be sized and/or positioned if it has not already been\n  sized and/or positioned by CSS.\n\n  CSS properties               | Action\n  -----------------------------|-------------------------------------------\n  `position` set               | Element is not centered horizontally or\n  vertically `top` or `bottom` set        | Element is not vertically centered\n  `left` or `right` set        | Element is not horizontally centered\n  `max-height` set             | Element respects `max-height`\n  `max-width` set              | Element respects `max-width`\n\n  `Polymer.IronFitBehavior` can position an element into another element using\n  `verticalAlign` and `horizontalAlign`. This will override the element's css\n  position.\n\n        <div class=\"container\">\n          <iron-fit-impl vertical-align=\"top\" horizontal-align=\"auto\">\n            Positioned into the container\n          </iron-fit-impl>\n        </div>\n\n  Use `noOverlap` to position the element around another element without\n  overlapping it.\n\n        <div class=\"container\">\n          <iron-fit-impl no-overlap vertical-align=\"auto\" horizontal-align=\"auto\">\n            Positioned around the container\n          </iron-fit-impl>\n        </div>\n\n  Use `horizontalOffset, verticalOffset` to offset the element from its\n  `positionTarget`; `Polymer.IronFitBehavior` will collapse these in order to keep\n  the element within `fitInto` boundaries, while preserving the element's CSS\n  margin values.\n\n        <div class=\"container\">\n          <iron-fit-impl vertical-align=\"top\" vertical-offset=\"20\">\n            With vertical offset\n          </iron-fit-impl>\n        </div>\n\n\n  ",
              "summary": "",
              "path": "components\\iron-fit-behavior\\iron-fit-behavior.html",
              "properties": [
                {
                  "name": "sizingTarget",
                  "type": "!Element",
                  "description": "The element that will receive a `max-height`/`width`. By default it is\nthe same as `this`, but it can be set to a child element. This is useful,\nfor example, for implementing a scrolling region inside the element.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 72,
                      "column": 6
                    },
                    "end": {
                      "line": 77,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "fitInto",
                  "type": "Object",
                  "description": "The element to fit `this` into.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 82,
                      "column": 6
                    },
                    "end": {
                      "line": 82,
                      "column": 44
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "noOverlap",
                  "type": "boolean",
                  "description": "Will position the element around the positionTarget without overlapping\nit.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 88,
                      "column": 6
                    },
                    "end": {
                      "line": 88,
                      "column": 32
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "positionTarget",
                  "type": "!Element",
                  "description": "The element that should be used to position the element. If not set, it\nwill default to the parent node.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 95,
                      "column": 6
                    },
                    "end": {
                      "line": 95,
                      "column": 37
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "horizontalAlign",
                  "type": "string",
                  "description": "The orientation against which to align the element horizontally\nrelative to the `positionTarget`. Possible values are \"left\", \"right\",\n\"center\", \"auto\".",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 102,
                      "column": 6
                    },
                    "end": {
                      "line": 102,
                      "column": 37
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "verticalAlign",
                  "type": "string",
                  "description": "The orientation against which to align the element vertically\nrelative to the `positionTarget`. Possible values are \"top\", \"bottom\",\n\"middle\", \"auto\".",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 109,
                      "column": 6
                    },
                    "end": {
                      "line": 109,
                      "column": 35
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "dynamicAlign",
                  "type": "boolean",
                  "description": "If true, it will use `horizontalAlign` and `verticalAlign` values as\npreferred alignment and if there's not enough space, it will pick the\nvalues which minimize the cropping.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 116,
                      "column": 6
                    },
                    "end": {
                      "line": 116,
                      "column": 35
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "horizontalOffset",
                  "type": "number",
                  "description": "A pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `horizontalAlign`.\n\nIf `horizontalAlign` is \"left\" or \"center\", this offset will increase or\ndecrease the distance to the left side of the screen: a negative offset\nwill move the dropdown to the left; a positive one, to the right.\n\nConversely if `horizontalAlign` is \"right\", this offset will increase\nor decrease the distance to the right side of the screen: a negative\noffset will move the dropdown to the right; a positive one, to the left.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 132,
                      "column": 6
                    },
                    "end": {
                      "line": 132,
                      "column": 62
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true
                    }
                  },
                  "defaultValue": "0"
                },
                {
                  "name": "verticalOffset",
                  "type": "number",
                  "description": "A pixel value that will be added to the position calculated for the\ngiven `verticalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `verticalAlign`.\n\nIf `verticalAlign` is \"top\" or \"middle\", this offset will increase or\ndecrease the distance to the top side of the screen: a negative offset\nwill move the dropdown upwards; a positive one, downwards.\n\nConversely if `verticalAlign` is \"bottom\", this offset will increase\nor decrease the distance to the bottom side of the screen: a negative\noffset will move the dropdown downwards; a positive one, upwards.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 148,
                      "column": 6
                    },
                    "end": {
                      "line": 148,
                      "column": 60
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true
                    }
                  },
                  "defaultValue": "0"
                },
                {
                  "name": "autoFitOnAttach",
                  "type": "boolean",
                  "description": "Set to true to auto-fit on attach.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 153,
                      "column": 6
                    },
                    "end": {
                      "line": 153,
                      "column": 52
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "_fitInfo",
                  "type": "?Object",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 156,
                      "column": 6
                    },
                    "end": {
                      "line": 156,
                      "column": 30
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                }
              ],
              "methods": [
                {
                  "name": "_fitWidth",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 159,
                      "column": 4
                    },
                    "end": {
                      "line": 167,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_fitHeight",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 169,
                      "column": 4
                    },
                    "end": {
                      "line": 177,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_fitLeft",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 179,
                      "column": 4
                    },
                    "end": {
                      "line": 187,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_fitTop",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 189,
                      "column": 4
                    },
                    "end": {
                      "line": 197,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_defaultPositionTarget",
                  "description": "The element that should be used to position the element,\nif no position target is configured.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 203,
                      "column": 4
                    },
                    "end": {
                      "line": 211,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_localeHorizontalAlign",
                  "description": "The horizontal align value, accounting for the RTL/LTR text direction.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 216,
                      "column": 4
                    },
                    "end": {
                      "line": 227,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "__shouldPosition",
                  "description": "True if the element should be positioned instead of centered.",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 233,
                      "column": 4
                    },
                    "end": {
                      "line": 236,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "attached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 238,
                      "column": 4
                    },
                    "end": {
                      "line": 258,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "detached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 260,
                      "column": 4
                    },
                    "end": {
                      "line": 265,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "fit",
                  "description": "Positions and fits the element into the `fitInto` element.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 270,
                      "column": 4
                    },
                    "end": {
                      "line": 274,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_discoverInfo",
                  "description": "Memoize information needed to position and size the target element.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 280,
                      "column": 4
                    },
                    "end": {
                      "line": 319,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "resetFit",
                  "description": "Resets the target element's position and size constraints, and clear\nthe memoized data.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 325,
                      "column": 4
                    },
                    "end": {
                      "line": 335,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "refit",
                  "description": "Equivalent to calling `resetFit()` and `fit()`. Useful to call this after\nthe element or the `fitInto` element has been resized, or if any of the\npositioning properties (e.g. `horizontalAlign, verticalAlign`) is updated.\nIt preserves the scroll position of the sizingTarget.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 343,
                      "column": 4
                    },
                    "end": {
                      "line": 350,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "position",
                  "description": "Positions the element according to `horizontalAlign, verticalAlign`.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 355,
                      "column": 4
                    },
                    "end": {
                      "line": 416,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "constrain",
                  "description": "Constrains the size of the element to `fitInto` by setting `max-height`\nand/or `max-width`.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 422,
                      "column": 4
                    },
                    "end": {
                      "line": 452,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_sizeDimension",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 458,
                      "column": 4
                    },
                    "end": {
                      "line": 460,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "rect"
                    },
                    {
                      "name": "positionedBy"
                    },
                    {
                      "name": "start"
                    },
                    {
                      "name": "end"
                    },
                    {
                      "name": "extent"
                    }
                  ]
                },
                {
                  "name": "__sizeDimension",
                  "description": "",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 465,
                      "column": 4
                    },
                    "end": {
                      "line": 476,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "rect"
                    },
                    {
                      "name": "positionedBy"
                    },
                    {
                      "name": "start"
                    },
                    {
                      "name": "end"
                    },
                    {
                      "name": "extent"
                    }
                  ]
                },
                {
                  "name": "center",
                  "description": "Centers horizontally and vertically if not already positioned. This also\nsets `position:fixed`.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 482,
                      "column": 4
                    },
                    "end": {
                      "line": 515,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "__getNormalizedRect",
                  "description": "",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 517,
                      "column": 4
                    },
                    "end": {
                      "line": 529,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "target"
                    }
                  ]
                },
                {
                  "name": "__getOffscreenArea",
                  "description": "",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 531,
                      "column": 4
                    },
                    "end": {
                      "line": 538,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "position"
                    },
                    {
                      "name": "size"
                    },
                    {
                      "name": "fitRect"
                    }
                  ]
                },
                {
                  "name": "__getPosition",
                  "description": "",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 541,
                      "column": 4
                    },
                    "end": {
                      "line": 675,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "hAlign"
                    },
                    {
                      "name": "vAlign"
                    },
                    {
                      "name": "size"
                    },
                    {
                      "name": "sizeNoMargins"
                    },
                    {
                      "name": "positionRect"
                    },
                    {
                      "name": "fitRect"
                    }
                  ]
                }
              ],
              "staticMethods": [],
              "demos": [
                {
                  "url": "demo/index.html",
                  "description": "demo"
                },
                {
                  "url": "demo/index.html",
                  "description": ""
                }
              ],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 62,
                  "column": 2
                },
                "end": {
                  "line": 677,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "Polymer.IronFitBehavior",
              "attributes": [
                {
                  "name": "sizing-target",
                  "description": "The element that will receive a `max-height`/`width`. By default it is\nthe same as `this`, but it can be set to a child element. This is useful,\nfor example, for implementing a scrolling region inside the element.",
                  "sourceRange": {
                    "start": {
                      "line": 72,
                      "column": 6
                    },
                    "end": {
                      "line": 77,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "!Element"
                },
                {
                  "name": "fit-into",
                  "description": "The element to fit `this` into.",
                  "sourceRange": {
                    "start": {
                      "line": 82,
                      "column": 6
                    },
                    "end": {
                      "line": 82,
                      "column": 44
                    }
                  },
                  "metadata": {},
                  "type": "Object"
                },
                {
                  "name": "no-overlap",
                  "description": "Will position the element around the positionTarget without overlapping\nit.",
                  "sourceRange": {
                    "start": {
                      "line": 88,
                      "column": 6
                    },
                    "end": {
                      "line": 88,
                      "column": 32
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "position-target",
                  "description": "The element that should be used to position the element. If not set, it\nwill default to the parent node.",
                  "sourceRange": {
                    "start": {
                      "line": 95,
                      "column": 6
                    },
                    "end": {
                      "line": 95,
                      "column": 37
                    }
                  },
                  "metadata": {},
                  "type": "!Element"
                },
                {
                  "name": "horizontal-align",
                  "description": "The orientation against which to align the element horizontally\nrelative to the `positionTarget`. Possible values are \"left\", \"right\",\n\"center\", \"auto\".",
                  "sourceRange": {
                    "start": {
                      "line": 102,
                      "column": 6
                    },
                    "end": {
                      "line": 102,
                      "column": 37
                    }
                  },
                  "metadata": {},
                  "type": "string"
                },
                {
                  "name": "vertical-align",
                  "description": "The orientation against which to align the element vertically\nrelative to the `positionTarget`. Possible values are \"top\", \"bottom\",\n\"middle\", \"auto\".",
                  "sourceRange": {
                    "start": {
                      "line": 109,
                      "column": 6
                    },
                    "end": {
                      "line": 109,
                      "column": 35
                    }
                  },
                  "metadata": {},
                  "type": "string"
                },
                {
                  "name": "dynamic-align",
                  "description": "If true, it will use `horizontalAlign` and `verticalAlign` values as\npreferred alignment and if there's not enough space, it will pick the\nvalues which minimize the cropping.",
                  "sourceRange": {
                    "start": {
                      "line": 116,
                      "column": 6
                    },
                    "end": {
                      "line": 116,
                      "column": 35
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "horizontal-offset",
                  "description": "A pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `horizontalAlign`.\n\nIf `horizontalAlign` is \"left\" or \"center\", this offset will increase or\ndecrease the distance to the left side of the screen: a negative offset\nwill move the dropdown to the left; a positive one, to the right.\n\nConversely if `horizontalAlign` is \"right\", this offset will increase\nor decrease the distance to the right side of the screen: a negative\noffset will move the dropdown to the right; a positive one, to the left.",
                  "sourceRange": {
                    "start": {
                      "line": 132,
                      "column": 6
                    },
                    "end": {
                      "line": 132,
                      "column": 62
                    }
                  },
                  "metadata": {},
                  "type": "number"
                },
                {
                  "name": "vertical-offset",
                  "description": "A pixel value that will be added to the position calculated for the\ngiven `verticalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `verticalAlign`.\n\nIf `verticalAlign` is \"top\" or \"middle\", this offset will increase or\ndecrease the distance to the top side of the screen: a negative offset\nwill move the dropdown upwards; a positive one, downwards.\n\nConversely if `verticalAlign` is \"bottom\", this offset will increase\nor decrease the distance to the bottom side of the screen: a negative\noffset will move the dropdown downwards; a positive one, upwards.",
                  "sourceRange": {
                    "start": {
                      "line": 148,
                      "column": 6
                    },
                    "end": {
                      "line": 148,
                      "column": 60
                    }
                  },
                  "metadata": {},
                  "type": "number"
                },
                {
                  "name": "auto-fit-on-attach",
                  "description": "Set to true to auto-fit on attach.",
                  "sourceRange": {
                    "start": {
                      "line": 153,
                      "column": 6
                    },
                    "end": {
                      "line": 153,
                      "column": 52
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                }
              ],
              "events": [
                {
                  "type": "CustomEvent",
                  "name": "horizontal-offset-changed",
                  "description": "Fired when the `horizontalOffset` property changes.",
                  "metadata": {}
                },
                {
                  "type": "CustomEvent",
                  "name": "vertical-offset-changed",
                  "description": "Fired when the `verticalOffset` property changes.",
                  "metadata": {}
                }
              ],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "",
              "summary": "",
              "path": "components\\iron-overlay-behavior\\iron-overlay-behavior.html",
              "properties": [
                {
                  "name": "opened",
                  "type": "boolean",
                  "description": "True if the overlay is currently displayed.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 29,
                      "column": 6
                    },
                    "end": {
                      "line": 30,
                      "column": 81
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "observer": "\"_openedChanged\""
                    }
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "canceled",
                  "type": "boolean",
                  "description": "True if the overlay was canceled when it was last closed.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 35,
                      "column": 6
                    },
                    "end": {
                      "line": 40,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "observer": "\"_canceledChanged\"",
                      "readOnly": true
                    }
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "withBackdrop",
                  "type": "boolean",
                  "description": "Set to true to display a backdrop behind the overlay. It traps the focus\nwithin the light DOM of the overlay.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 46,
                      "column": 6
                    },
                    "end": {
                      "line": 46,
                      "column": 69
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "observer": "\"_withBackdropChanged\""
                    }
                  }
                },
                {
                  "name": "noAutoFocus",
                  "type": "boolean",
                  "description": "Set to true to disable auto-focusing the overlay or child nodes with\nthe `autofocus` attribute` when the overlay is opened.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 52,
                      "column": 6
                    },
                    "end": {
                      "line": 52,
                      "column": 48
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "noCancelOnEscKey",
                  "type": "boolean",
                  "description": "Set to true to disable canceling the overlay with the ESC key.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 57,
                      "column": 6
                    },
                    "end": {
                      "line": 57,
                      "column": 53
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "noCancelOnOutsideClick",
                  "type": "boolean",
                  "description": "Set to true to disable canceling the overlay by clicking outside it.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 62,
                      "column": 6
                    },
                    "end": {
                      "line": 62,
                      "column": 59
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "closingReason",
                  "type": "Object",
                  "description": "Contains the reason(s) this overlay was last closed (see\n`iron-overlay-closed`). `IronOverlayBehavior` provides the `canceled`\nreason; implementers of the behavior can provide other reasons in\naddition to `canceled`.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 70,
                      "column": 6
                    },
                    "end": {
                      "line": 74,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "restoreFocusOnClose",
                  "type": "boolean",
                  "description": "Set to true to enable restoring of focus when overlay is closed.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 79,
                      "column": 6
                    },
                    "end": {
                      "line": 79,
                      "column": 56
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "allowClickThrough",
                  "type": "boolean",
                  "description": "Set to true to allow clicks to go through overlays.\nWhen the user clicks outside this overlay, the click may\nclose the overlay below.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 86,
                      "column": 6
                    },
                    "end": {
                      "line": 86,
                      "column": 40
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "alwaysOnTop",
                  "type": "boolean",
                  "description": "Set to true to keep overlay always on top.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 91,
                      "column": 6
                    },
                    "end": {
                      "line": 91,
                      "column": 34
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "scrollAction",
                  "type": "string",
                  "description": "Determines which action to perform when scroll outside an opened overlay\nhappens. Possible values: lock - blocks scrolling from happening, refit -\ncomputes the new position on the overlay cancel - causes the overlay to\nclose",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 99,
                      "column": 6
                    },
                    "end": {
                      "line": 99,
                      "column": 34
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "_manager",
                  "type": "!Polymer.IronOverlayManagerClass",
                  "description": "Shortcut to access to the overlay manager.",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 106,
                      "column": 6
                    },
                    "end": {
                      "line": 106,
                      "column": 65
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "_focusedChild",
                  "type": "?Node",
                  "description": "The node being focused.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 112,
                      "column": 6
                    },
                    "end": {
                      "line": 112,
                      "column": 35
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                }
              ],
              "methods": [
                {
                  "name": "backdropElement",
                  "description": "The backdrop element.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 124,
                      "column": 4
                    },
                    "end": {
                      "line": 126,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "!Element"
                  }
                },
                {
                  "name": "_focusNode",
                  "description": "Returns the node to give focus to.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 132,
                      "column": 4
                    },
                    "end": {
                      "line": 135,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "!Node"
                  }
                },
                {
                  "name": "_focusableNodes",
                  "description": "Array of nodes that can receive focus (overlay included), ordered by\n`tabindex`. This is used to retrieve which is the first and last focusable\nnodes in order to wrap the focus for overlays `with-backdrop`.\n\nIf you know what is your content (specifically the first and last focusable\nchildren), you can override this method to return only `[firstFocusable,\nlastFocusable];`",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 148,
                      "column": 4
                    },
                    "end": {
                      "line": 150,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "!Array.<!Node>"
                  }
                },
                {
                  "name": "ready",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 155,
                      "column": 4
                    },
                    "end": {
                      "line": 175,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "attached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 177,
                      "column": 4
                    },
                    "end": {
                      "line": 183,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "detached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 185,
                      "column": 4
                    },
                    "end": {
                      "line": 207,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "toggle",
                  "description": "Toggle the opened state of the overlay.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 212,
                      "column": 4
                    },
                    "end": {
                      "line": 215,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "open",
                  "description": "Open the overlay.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 220,
                      "column": 4
                    },
                    "end": {
                      "line": 223,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "close",
                  "description": "Close the overlay.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 228,
                      "column": 4
                    },
                    "end": {
                      "line": 231,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "cancel",
                  "description": "Cancels the overlay.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 237,
                      "column": 4
                    },
                    "end": {
                      "line": 246,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event",
                      "type": "Event=",
                      "description": "The original event"
                    }
                  ]
                },
                {
                  "name": "invalidateTabbables",
                  "description": "Invalidates the cached tabbable nodes. To be called when any of the\nfocusable content changes (e.g. a button is disabled).",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 252,
                      "column": 4
                    },
                    "end": {
                      "line": 254,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_ensureSetup",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 256,
                      "column": 4
                    },
                    "end": {
                      "line": 263,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_openedChanged",
                  "description": "Called when `opened` changes.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 270,
                      "column": 4
                    },
                    "end": {
                      "line": 287,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "opened",
                      "type": "boolean="
                    }
                  ]
                },
                {
                  "name": "_canceledChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 289,
                      "column": 4
                    },
                    "end": {
                      "line": 292,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_withBackdropChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 294,
                      "column": 4
                    },
                    "end": {
                      "line": 306,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_prepareRenderOpened",
                  "description": "tasks which must occur before opening; e.g. making the element visible.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 312,
                      "column": 4
                    },
                    "end": {
                      "line": 328,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_renderOpened",
                  "description": "Tasks which cause the overlay to actually open; typically play an\nanimation.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 335,
                      "column": 4
                    },
                    "end": {
                      "line": 337,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_renderClosed",
                  "description": "Tasks which cause the overlay to actually close; typically play an\nanimation.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 344,
                      "column": 4
                    },
                    "end": {
                      "line": 346,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_finishRenderOpened",
                  "description": "Tasks to be performed at the end of open action. Will fire\n`iron-overlay-opened`.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 353,
                      "column": 4
                    },
                    "end": {
                      "line": 358,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_finishRenderClosed",
                  "description": "Tasks to be performed at the end of close action. Will fire\n`iron-overlay-closed`.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 365,
                      "column": 4
                    },
                    "end": {
                      "line": 373,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_preparePositioning",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 375,
                      "column": 4
                    },
                    "end": {
                      "line": 379,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_finishPositioning",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 381,
                      "column": 4
                    },
                    "end": {
                      "line": 394,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_applyFocus",
                  "description": "Applies focus according to the opened state.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 400,
                      "column": 4
                    },
                    "end": {
                      "line": 423,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_onCaptureClick",
                  "description": "Cancels (closes) the overlay. Call when click happens outside the overlay.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 430,
                      "column": 4
                    },
                    "end": {
                      "line": 434,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event",
                      "type": "!Event"
                    }
                  ]
                },
                {
                  "name": "_onCaptureFocus",
                  "description": "Keeps track of the focused child. If withBackdrop, traps focus within\noverlay.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 442,
                      "column": 4
                    },
                    "end": {
                      "line": 453,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event",
                      "type": "!Event"
                    }
                  ]
                },
                {
                  "name": "_onCaptureEsc",
                  "description": "Handles the ESC key event and cancels (closes) the overlay.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 460,
                      "column": 4
                    },
                    "end": {
                      "line": 464,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event",
                      "type": "!Event"
                    }
                  ]
                },
                {
                  "name": "_onCaptureTab",
                  "description": "Handles TAB key events to track focus changes.\nWill wrap focus for overlays withBackdrop.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 472,
                      "column": 4
                    },
                    "end": {
                      "line": 516,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event",
                      "type": "!Event"
                    }
                  ]
                },
                {
                  "name": "_onIronResize",
                  "description": "Refits if the overlay is opened and not animating.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 522,
                      "column": 4
                    },
                    "end": {
                      "line": 526,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_onNodesChange",
                  "description": "Will call notifyResize if overlay is opened.\nCan be overridden in order to avoid multiple observers on the same node.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 533,
                      "column": 4
                    },
                    "end": {
                      "line": 539,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "__ensureFirstLastFocusables",
                  "description": "Will set first and last focusable nodes if any of them is not set.",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 545,
                      "column": 4
                    },
                    "end": {
                      "line": 551,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "__openedChanged",
                  "description": "Tasks executed when opened changes: prepare for the opening, move the\nfocus, update the manager, render opened/closed.",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 558,
                      "column": 4
                    },
                    "end": {
                      "line": 574,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "__deraf",
                  "description": "Debounces the execution of a callback to the next animation frame.",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 582,
                      "column": 4
                    },
                    "end": {
                      "line": 591,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "jobname",
                      "type": "!string"
                    },
                    {
                      "name": "callback",
                      "type": "!Function",
                      "description": "Always bound to `this`"
                    }
                  ]
                },
                {
                  "name": "__updateScrollObservers",
                  "description": "",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 599,
                      "column": 4
                    },
                    "end": {
                      "line": 610,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "isAttached",
                      "type": "boolean"
                    },
                    {
                      "name": "opened",
                      "type": "boolean"
                    },
                    {
                      "name": "scrollAction",
                      "type": "string="
                    }
                  ]
                },
                {
                  "name": "__addScrollListeners",
                  "description": "",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 615,
                      "column": 4
                    },
                    "end": {
                      "line": 637,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "__removeScrollListeners",
                  "description": "",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 642,
                      "column": 4
                    },
                    "end": {
                      "line": 654,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "__isValidScrollAction",
                  "description": "",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 661,
                      "column": 4
                    },
                    "end": {
                      "line": 664,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "scrollAction",
                      "type": "string="
                    }
                  ],
                  "return": {
                    "type": "boolean"
                  }
                },
                {
                  "name": "__onCaptureScroll",
                  "description": "",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 669,
                      "column": 4
                    },
                    "end": {
                      "line": 691,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event"
                    }
                  ]
                },
                {
                  "name": "__saveScrollPosition",
                  "description": "Memoizes the scroll position of the outside scrolling element.",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 697,
                      "column": 4
                    },
                    "end": {
                      "line": 708,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "__restoreScrollPosition",
                  "description": "Resets the scroll position of the outside scrolling element.",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 714,
                      "column": 4
                    },
                    "end": {
                      "line": 725,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 22,
                  "column": 2
                },
                "end": {
                  "line": 727,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "Polymer.IronOverlayBehaviorImpl",
              "attributes": [
                {
                  "name": "opened",
                  "description": "True if the overlay is currently displayed.",
                  "sourceRange": {
                    "start": {
                      "line": 29,
                      "column": 6
                    },
                    "end": {
                      "line": 30,
                      "column": 81
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "canceled",
                  "description": "True if the overlay was canceled when it was last closed.",
                  "sourceRange": {
                    "start": {
                      "line": 35,
                      "column": 6
                    },
                    "end": {
                      "line": 40,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "with-backdrop",
                  "description": "Set to true to display a backdrop behind the overlay. It traps the focus\nwithin the light DOM of the overlay.",
                  "sourceRange": {
                    "start": {
                      "line": 46,
                      "column": 6
                    },
                    "end": {
                      "line": 46,
                      "column": 69
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "no-auto-focus",
                  "description": "Set to true to disable auto-focusing the overlay or child nodes with\nthe `autofocus` attribute` when the overlay is opened.",
                  "sourceRange": {
                    "start": {
                      "line": 52,
                      "column": 6
                    },
                    "end": {
                      "line": 52,
                      "column": 48
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "no-cancel-on-esc-key",
                  "description": "Set to true to disable canceling the overlay with the ESC key.",
                  "sourceRange": {
                    "start": {
                      "line": 57,
                      "column": 6
                    },
                    "end": {
                      "line": 57,
                      "column": 53
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "no-cancel-on-outside-click",
                  "description": "Set to true to disable canceling the overlay by clicking outside it.",
                  "sourceRange": {
                    "start": {
                      "line": 62,
                      "column": 6
                    },
                    "end": {
                      "line": 62,
                      "column": 59
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "closing-reason",
                  "description": "Contains the reason(s) this overlay was last closed (see\n`iron-overlay-closed`). `IronOverlayBehavior` provides the `canceled`\nreason; implementers of the behavior can provide other reasons in\naddition to `canceled`.",
                  "sourceRange": {
                    "start": {
                      "line": 70,
                      "column": 6
                    },
                    "end": {
                      "line": 74,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "Object"
                },
                {
                  "name": "restore-focus-on-close",
                  "description": "Set to true to enable restoring of focus when overlay is closed.",
                  "sourceRange": {
                    "start": {
                      "line": 79,
                      "column": 6
                    },
                    "end": {
                      "line": 79,
                      "column": 56
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "allow-click-through",
                  "description": "Set to true to allow clicks to go through overlays.\nWhen the user clicks outside this overlay, the click may\nclose the overlay below.",
                  "sourceRange": {
                    "start": {
                      "line": 86,
                      "column": 6
                    },
                    "end": {
                      "line": 86,
                      "column": 40
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "always-on-top",
                  "description": "Set to true to keep overlay always on top.",
                  "sourceRange": {
                    "start": {
                      "line": 91,
                      "column": 6
                    },
                    "end": {
                      "line": 91,
                      "column": 34
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "scroll-action",
                  "description": "Determines which action to perform when scroll outside an opened overlay\nhappens. Possible values: lock - blocks scrolling from happening, refit -\ncomputes the new position on the overlay cancel - causes the overlay to\nclose",
                  "sourceRange": {
                    "start": {
                      "line": 99,
                      "column": 6
                    },
                    "end": {
                      "line": 99,
                      "column": 34
                    }
                  },
                  "metadata": {},
                  "type": "string"
                }
              ],
              "events": [
                {
                  "type": "CustomEvent",
                  "name": "opened-changed",
                  "description": "Fired when the `opened` property changes.",
                  "metadata": {}
                }
              ],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "  Use `Polymer.IronOverlayBehavior` to implement an element that can be hidden or\n  shown, and displays on top of other content. It includes an optional backdrop,\n  and can be used to implement a variety of UI controls including dialogs and drop\n  downs. Multiple overlays may be displayed at once.\n\n  See the [demo source\n  code](https://github.com/PolymerElements/iron-overlay-behavior/blob/master/demo/simple-overlay.html)\n  for an example.\n\n  ### Closing and canceling\n\n  An overlay may be hidden by closing or canceling. The difference between close\n  and cancel is user intent. Closing generally implies that the user acknowledged\n  the content on the overlay. By default, it will cancel whenever the user taps\n  outside it or presses the escape key. This behavior is configurable with the\n  `no-cancel-on-esc-key` and the `no-cancel-on-outside-click` properties.\n  `close()` should be called explicitly by the implementer when the user interacts\n  with a control in the overlay element. When the dialog is canceled, the overlay\n  fires an 'iron-overlay-canceled' event. Call `preventDefault` on this event to\n  prevent the overlay from closing.\n\n  ### Positioning\n\n  By default the element is sized and positioned to fit and centered inside the\n  window. You can position and size it manually using CSS. See\n  `Polymer.IronFitBehavior`.\n\n  ### Backdrop\n\n  Set the `with-backdrop` attribute to display a backdrop behind the overlay. The\n  backdrop is appended to `<body>` and is of type `<iron-overlay-backdrop>`. See\n  its doc page for styling options.\n\n  In addition, `with-backdrop` will wrap the focus within the content in the light\n  DOM. Override the [`_focusableNodes`\n  getter](#Polymer.IronOverlayBehavior:property-_focusableNodes) to achieve a\n  different behavior.\n\n  ### Limitations\n\n  The element is styled to appear on top of other content by setting its `z-index`\n  property. You must ensure no element has a stacking context with a higher\n  `z-index` than its parent stacking context. You should place this element as a\n  child of `<body>` whenever possible.\n\n  ",
              "summary": "",
              "path": "components\\iron-overlay-behavior\\iron-overlay-behavior.html",
              "properties": [
                {
                  "name": "sizingTarget",
                  "type": "!Element",
                  "description": "The element that will receive a `max-height`/`width`. By default it is\nthe same as `this`, but it can be set to a child element. This is useful,\nfor example, for implementing a scrolling region inside the element.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 72,
                      "column": 6
                    },
                    "end": {
                      "line": 77,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "fitInto",
                  "type": "Object",
                  "description": "The element to fit `this` into.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 82,
                      "column": 6
                    },
                    "end": {
                      "line": 82,
                      "column": 44
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "noOverlap",
                  "type": "boolean",
                  "description": "Will position the element around the positionTarget without overlapping\nit.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 88,
                      "column": 6
                    },
                    "end": {
                      "line": 88,
                      "column": 32
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "positionTarget",
                  "type": "!Element",
                  "description": "The element that should be used to position the element. If not set, it\nwill default to the parent node.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 95,
                      "column": 6
                    },
                    "end": {
                      "line": 95,
                      "column": 37
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "horizontalAlign",
                  "type": "string",
                  "description": "The orientation against which to align the element horizontally\nrelative to the `positionTarget`. Possible values are \"left\", \"right\",\n\"center\", \"auto\".",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 102,
                      "column": 6
                    },
                    "end": {
                      "line": 102,
                      "column": 37
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "verticalAlign",
                  "type": "string",
                  "description": "The orientation against which to align the element vertically\nrelative to the `positionTarget`. Possible values are \"top\", \"bottom\",\n\"middle\", \"auto\".",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 109,
                      "column": 6
                    },
                    "end": {
                      "line": 109,
                      "column": 35
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "dynamicAlign",
                  "type": "boolean",
                  "description": "If true, it will use `horizontalAlign` and `verticalAlign` values as\npreferred alignment and if there's not enough space, it will pick the\nvalues which minimize the cropping.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 116,
                      "column": 6
                    },
                    "end": {
                      "line": 116,
                      "column": 35
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "horizontalOffset",
                  "type": "number",
                  "description": "A pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `horizontalAlign`.\n\nIf `horizontalAlign` is \"left\" or \"center\", this offset will increase or\ndecrease the distance to the left side of the screen: a negative offset\nwill move the dropdown to the left; a positive one, to the right.\n\nConversely if `horizontalAlign` is \"right\", this offset will increase\nor decrease the distance to the right side of the screen: a negative\noffset will move the dropdown to the right; a positive one, to the left.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 132,
                      "column": 6
                    },
                    "end": {
                      "line": 132,
                      "column": 62
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true
                    }
                  },
                  "defaultValue": "0",
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "verticalOffset",
                  "type": "number",
                  "description": "A pixel value that will be added to the position calculated for the\ngiven `verticalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `verticalAlign`.\n\nIf `verticalAlign` is \"top\" or \"middle\", this offset will increase or\ndecrease the distance to the top side of the screen: a negative offset\nwill move the dropdown upwards; a positive one, downwards.\n\nConversely if `verticalAlign` is \"bottom\", this offset will increase\nor decrease the distance to the bottom side of the screen: a negative\noffset will move the dropdown downwards; a positive one, upwards.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 148,
                      "column": 6
                    },
                    "end": {
                      "line": 148,
                      "column": 60
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true
                    }
                  },
                  "defaultValue": "0",
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "autoFitOnAttach",
                  "type": "boolean",
                  "description": "Set to true to auto-fit on attach.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 153,
                      "column": 6
                    },
                    "end": {
                      "line": 153,
                      "column": 52
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "_fitInfo",
                  "type": "?Object",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 156,
                      "column": 6
                    },
                    "end": {
                      "line": 156,
                      "column": 30
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "_parentResizable",
                  "type": "Object",
                  "description": "The closest ancestor element that implements `IronResizableBehavior`.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-resizable-behavior\\iron-resizable-behavior.html",
                    "start": {
                      "line": 36,
                      "column": 6
                    },
                    "end": {
                      "line": 39,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "observer": "\"_parentResizableChanged\""
                    }
                  },
                  "inheritedFrom": "Polymer.IronResizableBehavior"
                },
                {
                  "name": "_notifyingDescendant",
                  "type": "boolean",
                  "description": "True if this element is currently notifying its descendant elements of\nresize.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-resizable-behavior\\iron-resizable-behavior.html",
                    "start": {
                      "line": 45,
                      "column": 6
                    },
                    "end": {
                      "line": 48,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronResizableBehavior"
                },
                {
                  "name": "opened",
                  "type": "boolean",
                  "description": "True if the overlay is currently displayed.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 29,
                      "column": 6
                    },
                    "end": {
                      "line": 30,
                      "column": 81
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "observer": "\"_openedChanged\""
                    }
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "canceled",
                  "type": "boolean",
                  "description": "True if the overlay was canceled when it was last closed.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 35,
                      "column": 6
                    },
                    "end": {
                      "line": 40,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "observer": "\"_canceledChanged\"",
                      "readOnly": true
                    }
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "withBackdrop",
                  "type": "boolean",
                  "description": "Set to true to display a backdrop behind the overlay. It traps the focus\nwithin the light DOM of the overlay.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 46,
                      "column": 6
                    },
                    "end": {
                      "line": 46,
                      "column": 69
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "observer": "\"_withBackdropChanged\""
                    }
                  },
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "noAutoFocus",
                  "type": "boolean",
                  "description": "Set to true to disable auto-focusing the overlay or child nodes with\nthe `autofocus` attribute` when the overlay is opened.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 52,
                      "column": 6
                    },
                    "end": {
                      "line": 52,
                      "column": 48
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "noCancelOnEscKey",
                  "type": "boolean",
                  "description": "Set to true to disable canceling the overlay with the ESC key.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 57,
                      "column": 6
                    },
                    "end": {
                      "line": 57,
                      "column": 53
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "noCancelOnOutsideClick",
                  "type": "boolean",
                  "description": "Set to true to disable canceling the overlay by clicking outside it.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 62,
                      "column": 6
                    },
                    "end": {
                      "line": 62,
                      "column": 59
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "closingReason",
                  "type": "Object",
                  "description": "Contains the reason(s) this overlay was last closed (see\n`iron-overlay-closed`). `IronOverlayBehavior` provides the `canceled`\nreason; implementers of the behavior can provide other reasons in\naddition to `canceled`.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 70,
                      "column": 6
                    },
                    "end": {
                      "line": 74,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "restoreFocusOnClose",
                  "type": "boolean",
                  "description": "Set to true to enable restoring of focus when overlay is closed.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 79,
                      "column": 6
                    },
                    "end": {
                      "line": 79,
                      "column": 56
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "allowClickThrough",
                  "type": "boolean",
                  "description": "Set to true to allow clicks to go through overlays.\nWhen the user clicks outside this overlay, the click may\nclose the overlay below.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 86,
                      "column": 6
                    },
                    "end": {
                      "line": 86,
                      "column": 40
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "alwaysOnTop",
                  "type": "boolean",
                  "description": "Set to true to keep overlay always on top.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 91,
                      "column": 6
                    },
                    "end": {
                      "line": 91,
                      "column": 34
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "scrollAction",
                  "type": "string",
                  "description": "Determines which action to perform when scroll outside an opened overlay\nhappens. Possible values: lock - blocks scrolling from happening, refit -\ncomputes the new position on the overlay cancel - causes the overlay to\nclose",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 99,
                      "column": 6
                    },
                    "end": {
                      "line": 99,
                      "column": 34
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "_manager",
                  "type": "!Polymer.IronOverlayManagerClass",
                  "description": "Shortcut to access to the overlay manager.",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 106,
                      "column": 6
                    },
                    "end": {
                      "line": 106,
                      "column": 65
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "_focusedChild",
                  "type": "?Node",
                  "description": "The node being focused.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 112,
                      "column": 6
                    },
                    "end": {
                      "line": 112,
                      "column": 35
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                }
              ],
              "methods": [
                {
                  "name": "_fitWidth",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 159,
                      "column": 4
                    },
                    "end": {
                      "line": 167,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "_fitHeight",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 169,
                      "column": 4
                    },
                    "end": {
                      "line": 177,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "_fitLeft",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 179,
                      "column": 4
                    },
                    "end": {
                      "line": 187,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "_fitTop",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 189,
                      "column": 4
                    },
                    "end": {
                      "line": 197,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "_defaultPositionTarget",
                  "description": "The element that should be used to position the element,\nif no position target is configured.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 203,
                      "column": 4
                    },
                    "end": {
                      "line": 211,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "_localeHorizontalAlign",
                  "description": "The horizontal align value, accounting for the RTL/LTR text direction.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 216,
                      "column": 4
                    },
                    "end": {
                      "line": 227,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "__shouldPosition",
                  "description": "True if the element should be positioned instead of centered.",
                  "privacy": "private",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 233,
                      "column": 4
                    },
                    "end": {
                      "line": 236,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "attached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 177,
                      "column": 4
                    },
                    "end": {
                      "line": 183,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "detached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 185,
                      "column": 4
                    },
                    "end": {
                      "line": 207,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "fit",
                  "description": "Positions and fits the element into the `fitInto` element.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 270,
                      "column": 4
                    },
                    "end": {
                      "line": 274,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "_discoverInfo",
                  "description": "Memoize information needed to position and size the target element.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 280,
                      "column": 4
                    },
                    "end": {
                      "line": 319,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "resetFit",
                  "description": "Resets the target element's position and size constraints, and clear\nthe memoized data.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 325,
                      "column": 4
                    },
                    "end": {
                      "line": 335,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "refit",
                  "description": "Equivalent to calling `resetFit()` and `fit()`. Useful to call this after\nthe element or the `fitInto` element has been resized, or if any of the\npositioning properties (e.g. `horizontalAlign, verticalAlign`) is updated.\nIt preserves the scroll position of the sizingTarget.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 343,
                      "column": 4
                    },
                    "end": {
                      "line": 350,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "position",
                  "description": "Positions the element according to `horizontalAlign, verticalAlign`.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 355,
                      "column": 4
                    },
                    "end": {
                      "line": 416,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "constrain",
                  "description": "Constrains the size of the element to `fitInto` by setting `max-height`\nand/or `max-width`.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 422,
                      "column": 4
                    },
                    "end": {
                      "line": 452,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "_sizeDimension",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 458,
                      "column": 4
                    },
                    "end": {
                      "line": 460,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "rect"
                    },
                    {
                      "name": "positionedBy"
                    },
                    {
                      "name": "start"
                    },
                    {
                      "name": "end"
                    },
                    {
                      "name": "extent"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "__sizeDimension",
                  "description": "",
                  "privacy": "private",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 465,
                      "column": 4
                    },
                    "end": {
                      "line": 476,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "rect"
                    },
                    {
                      "name": "positionedBy"
                    },
                    {
                      "name": "start"
                    },
                    {
                      "name": "end"
                    },
                    {
                      "name": "extent"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "center",
                  "description": "Centers horizontally and vertically if not already positioned. This also\nsets `position:fixed`.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 482,
                      "column": 4
                    },
                    "end": {
                      "line": 515,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "__getNormalizedRect",
                  "description": "",
                  "privacy": "private",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 517,
                      "column": 4
                    },
                    "end": {
                      "line": 529,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "target"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "__getOffscreenArea",
                  "description": "",
                  "privacy": "private",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 531,
                      "column": 4
                    },
                    "end": {
                      "line": 538,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "position"
                    },
                    {
                      "name": "size"
                    },
                    {
                      "name": "fitRect"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "__getPosition",
                  "description": "",
                  "privacy": "private",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 541,
                      "column": 4
                    },
                    "end": {
                      "line": 675,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "hAlign"
                    },
                    {
                      "name": "vAlign"
                    },
                    {
                      "name": "size"
                    },
                    {
                      "name": "sizeNoMargins"
                    },
                    {
                      "name": "positionRect"
                    },
                    {
                      "name": "fitRect"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "created",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-resizable-behavior\\iron-resizable-behavior.html",
                    "start": {
                      "line": 55,
                      "column": 4
                    },
                    "end": {
                      "line": 60,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronResizableBehavior"
                },
                {
                  "name": "notifyResize",
                  "description": "Can be called to manually notify a resizable and its descendant\nresizables of a resize change.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-resizable-behavior\\iron-resizable-behavior.html",
                    "start": {
                      "line": 80,
                      "column": 4
                    },
                    "end": {
                      "line": 92,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronResizableBehavior"
                },
                {
                  "name": "assignParentResizable",
                  "description": "Used to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-resizable-behavior\\iron-resizable-behavior.html",
                    "start": {
                      "line": 98,
                      "column": 4
                    },
                    "end": {
                      "line": 100,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "parentResizable"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronResizableBehavior"
                },
                {
                  "name": "stopResizeNotificationsFor",
                  "description": "Used to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-resizable-behavior\\iron-resizable-behavior.html",
                    "start": {
                      "line": 106,
                      "column": 4
                    },
                    "end": {
                      "line": 113,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "target"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronResizableBehavior"
                },
                {
                  "name": "resizerShouldNotify",
                  "description": "This method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-resizable-behavior\\iron-resizable-behavior.html",
                    "start": {
                      "line": 124,
                      "column": 4
                    },
                    "end": {
                      "line": 124,
                      "column": 59
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "element",
                      "type": "HTMLElement",
                      "description": "A candidate descendant element that\nimplements `IronResizableBehavior`."
                    }
                  ],
                  "return": {
                    "type": "boolean",
                    "desc": "True if the `element` should be notified of resize."
                  },
                  "inheritedFrom": "Polymer.IronResizableBehavior"
                },
                {
                  "name": "_onDescendantIronResize",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-resizable-behavior\\iron-resizable-behavior.html",
                    "start": {
                      "line": 126,
                      "column": 4
                    },
                    "end": {
                      "line": 138,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronResizableBehavior"
                },
                {
                  "name": "_fireResize",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-resizable-behavior\\iron-resizable-behavior.html",
                    "start": {
                      "line": 140,
                      "column": 4
                    },
                    "end": {
                      "line": 145,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronResizableBehavior"
                },
                {
                  "name": "_onIronRequestResizeNotifications",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-resizable-behavior\\iron-resizable-behavior.html",
                    "start": {
                      "line": 147,
                      "column": 4
                    },
                    "end": {
                      "line": 162,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronResizableBehavior"
                },
                {
                  "name": "_parentResizableChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-resizable-behavior\\iron-resizable-behavior.html",
                    "start": {
                      "line": 164,
                      "column": 4
                    },
                    "end": {
                      "line": 168,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "parentResizable"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronResizableBehavior"
                },
                {
                  "name": "_notifyDescendant",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-resizable-behavior\\iron-resizable-behavior.html",
                    "start": {
                      "line": 170,
                      "column": 4
                    },
                    "end": {
                      "line": 181,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "descendant"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronResizableBehavior"
                },
                {
                  "name": "_requestResizeNotifications",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-resizable-behavior\\iron-resizable-behavior.html",
                    "start": {
                      "line": 183,
                      "column": 4
                    },
                    "end": {
                      "line": 211,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronResizableBehavior"
                },
                {
                  "name": "backdropElement",
                  "description": "The backdrop element.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 124,
                      "column": 4
                    },
                    "end": {
                      "line": 126,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "!Element"
                  },
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "_focusNode",
                  "description": "Returns the node to give focus to.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 132,
                      "column": 4
                    },
                    "end": {
                      "line": 135,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "!Node"
                  },
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "_focusableNodes",
                  "description": "Array of nodes that can receive focus (overlay included), ordered by\n`tabindex`. This is used to retrieve which is the first and last focusable\nnodes in order to wrap the focus for overlays `with-backdrop`.\n\nIf you know what is your content (specifically the first and last focusable\nchildren), you can override this method to return only `[firstFocusable,\nlastFocusable];`",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 148,
                      "column": 4
                    },
                    "end": {
                      "line": 150,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "!Array.<!Node>"
                  },
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "ready",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 155,
                      "column": 4
                    },
                    "end": {
                      "line": 175,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  },
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "toggle",
                  "description": "Toggle the opened state of the overlay.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 212,
                      "column": 4
                    },
                    "end": {
                      "line": 215,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "open",
                  "description": "Open the overlay.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 220,
                      "column": 4
                    },
                    "end": {
                      "line": 223,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "close",
                  "description": "Close the overlay.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 228,
                      "column": 4
                    },
                    "end": {
                      "line": 231,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "cancel",
                  "description": "Cancels the overlay.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 237,
                      "column": 4
                    },
                    "end": {
                      "line": 246,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event",
                      "type": "Event=",
                      "description": "The original event"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "invalidateTabbables",
                  "description": "Invalidates the cached tabbable nodes. To be called when any of the\nfocusable content changes (e.g. a button is disabled).",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 252,
                      "column": 4
                    },
                    "end": {
                      "line": 254,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "_ensureSetup",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 256,
                      "column": 4
                    },
                    "end": {
                      "line": 263,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "_openedChanged",
                  "description": "Called when `opened` changes.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 270,
                      "column": 4
                    },
                    "end": {
                      "line": 287,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "opened",
                      "type": "boolean="
                    }
                  ],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "_canceledChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 289,
                      "column": 4
                    },
                    "end": {
                      "line": 292,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "_withBackdropChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 294,
                      "column": 4
                    },
                    "end": {
                      "line": 306,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "_prepareRenderOpened",
                  "description": "tasks which must occur before opening; e.g. making the element visible.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 312,
                      "column": 4
                    },
                    "end": {
                      "line": 328,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "_renderOpened",
                  "description": "Tasks which cause the overlay to actually open; typically play an\nanimation.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 335,
                      "column": 4
                    },
                    "end": {
                      "line": 337,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "_renderClosed",
                  "description": "Tasks which cause the overlay to actually close; typically play an\nanimation.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 344,
                      "column": 4
                    },
                    "end": {
                      "line": 346,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "_finishRenderOpened",
                  "description": "Tasks to be performed at the end of open action. Will fire\n`iron-overlay-opened`.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 353,
                      "column": 4
                    },
                    "end": {
                      "line": 358,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "_finishRenderClosed",
                  "description": "Tasks to be performed at the end of close action. Will fire\n`iron-overlay-closed`.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 365,
                      "column": 4
                    },
                    "end": {
                      "line": 373,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "_preparePositioning",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 375,
                      "column": 4
                    },
                    "end": {
                      "line": 379,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "_finishPositioning",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 381,
                      "column": 4
                    },
                    "end": {
                      "line": 394,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "_applyFocus",
                  "description": "Applies focus according to the opened state.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 400,
                      "column": 4
                    },
                    "end": {
                      "line": 423,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "_onCaptureClick",
                  "description": "Cancels (closes) the overlay. Call when click happens outside the overlay.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 430,
                      "column": 4
                    },
                    "end": {
                      "line": 434,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event",
                      "type": "!Event"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "_onCaptureFocus",
                  "description": "Keeps track of the focused child. If withBackdrop, traps focus within\noverlay.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 442,
                      "column": 4
                    },
                    "end": {
                      "line": 453,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event",
                      "type": "!Event"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "_onCaptureEsc",
                  "description": "Handles the ESC key event and cancels (closes) the overlay.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 460,
                      "column": 4
                    },
                    "end": {
                      "line": 464,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event",
                      "type": "!Event"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "_onCaptureTab",
                  "description": "Handles TAB key events to track focus changes.\nWill wrap focus for overlays withBackdrop.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 472,
                      "column": 4
                    },
                    "end": {
                      "line": 516,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event",
                      "type": "!Event"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "_onIronResize",
                  "description": "Refits if the overlay is opened and not animating.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 522,
                      "column": 4
                    },
                    "end": {
                      "line": 526,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "_onNodesChange",
                  "description": "Will call notifyResize if overlay is opened.\nCan be overridden in order to avoid multiple observers on the same node.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 533,
                      "column": 4
                    },
                    "end": {
                      "line": 539,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "__ensureFirstLastFocusables",
                  "description": "Will set first and last focusable nodes if any of them is not set.",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 545,
                      "column": 4
                    },
                    "end": {
                      "line": 551,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "__openedChanged",
                  "description": "Tasks executed when opened changes: prepare for the opening, move the\nfocus, update the manager, render opened/closed.",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 558,
                      "column": 4
                    },
                    "end": {
                      "line": 574,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "__deraf",
                  "description": "Debounces the execution of a callback to the next animation frame.",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 582,
                      "column": 4
                    },
                    "end": {
                      "line": 591,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "jobname",
                      "type": "!string"
                    },
                    {
                      "name": "callback",
                      "type": "!Function",
                      "description": "Always bound to `this`"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "__updateScrollObservers",
                  "description": "",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 599,
                      "column": 4
                    },
                    "end": {
                      "line": 610,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "isAttached",
                      "type": "boolean"
                    },
                    {
                      "name": "opened",
                      "type": "boolean"
                    },
                    {
                      "name": "scrollAction",
                      "type": "string="
                    }
                  ],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "__addScrollListeners",
                  "description": "",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 615,
                      "column": 4
                    },
                    "end": {
                      "line": 637,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "__removeScrollListeners",
                  "description": "",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 642,
                      "column": 4
                    },
                    "end": {
                      "line": 654,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "__isValidScrollAction",
                  "description": "",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 661,
                      "column": 4
                    },
                    "end": {
                      "line": 664,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "scrollAction",
                      "type": "string="
                    }
                  ],
                  "return": {
                    "type": "boolean"
                  },
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "__onCaptureScroll",
                  "description": "",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 669,
                      "column": 4
                    },
                    "end": {
                      "line": 691,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "__saveScrollPosition",
                  "description": "Memoizes the scroll position of the outside scrolling element.",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 697,
                      "column": 4
                    },
                    "end": {
                      "line": 708,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "__restoreScrollPosition",
                  "description": "Resets the scroll position of the outside scrolling element.",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 714,
                      "column": 4
                    },
                    "end": {
                      "line": 725,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                }
              ],
              "staticMethods": [],
              "demos": [
                {
                  "url": "demo/index.html",
                  "description": "demo"
                },
                {
                  "url": "demo/index.html",
                  "description": ""
                }
              ],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 778,
                  "column": 2
                },
                "end": {
                  "line": 782,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "Polymer.IronOverlayBehavior",
              "attributes": [
                {
                  "name": "sizing-target",
                  "description": "The element that will receive a `max-height`/`width`. By default it is\nthe same as `this`, but it can be set to a child element. This is useful,\nfor example, for implementing a scrolling region inside the element.",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 72,
                      "column": 6
                    },
                    "end": {
                      "line": 77,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "!Element",
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "fit-into",
                  "description": "The element to fit `this` into.",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 82,
                      "column": 6
                    },
                    "end": {
                      "line": 82,
                      "column": 44
                    }
                  },
                  "metadata": {},
                  "type": "Object",
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "no-overlap",
                  "description": "Will position the element around the positionTarget without overlapping\nit.",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 88,
                      "column": 6
                    },
                    "end": {
                      "line": 88,
                      "column": 32
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "position-target",
                  "description": "The element that should be used to position the element. If not set, it\nwill default to the parent node.",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 95,
                      "column": 6
                    },
                    "end": {
                      "line": 95,
                      "column": 37
                    }
                  },
                  "metadata": {},
                  "type": "!Element",
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "horizontal-align",
                  "description": "The orientation against which to align the element horizontally\nrelative to the `positionTarget`. Possible values are \"left\", \"right\",\n\"center\", \"auto\".",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 102,
                      "column": 6
                    },
                    "end": {
                      "line": 102,
                      "column": 37
                    }
                  },
                  "metadata": {},
                  "type": "string",
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "vertical-align",
                  "description": "The orientation against which to align the element vertically\nrelative to the `positionTarget`. Possible values are \"top\", \"bottom\",\n\"middle\", \"auto\".",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 109,
                      "column": 6
                    },
                    "end": {
                      "line": 109,
                      "column": 35
                    }
                  },
                  "metadata": {},
                  "type": "string",
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "dynamic-align",
                  "description": "If true, it will use `horizontalAlign` and `verticalAlign` values as\npreferred alignment and if there's not enough space, it will pick the\nvalues which minimize the cropping.",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 116,
                      "column": 6
                    },
                    "end": {
                      "line": 116,
                      "column": 35
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "horizontal-offset",
                  "description": "A pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `horizontalAlign`.\n\nIf `horizontalAlign` is \"left\" or \"center\", this offset will increase or\ndecrease the distance to the left side of the screen: a negative offset\nwill move the dropdown to the left; a positive one, to the right.\n\nConversely if `horizontalAlign` is \"right\", this offset will increase\nor decrease the distance to the right side of the screen: a negative\noffset will move the dropdown to the right; a positive one, to the left.",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 132,
                      "column": 6
                    },
                    "end": {
                      "line": 132,
                      "column": 62
                    }
                  },
                  "metadata": {},
                  "type": "number",
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "vertical-offset",
                  "description": "A pixel value that will be added to the position calculated for the\ngiven `verticalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `verticalAlign`.\n\nIf `verticalAlign` is \"top\" or \"middle\", this offset will increase or\ndecrease the distance to the top side of the screen: a negative offset\nwill move the dropdown upwards; a positive one, downwards.\n\nConversely if `verticalAlign` is \"bottom\", this offset will increase\nor decrease the distance to the bottom side of the screen: a negative\noffset will move the dropdown downwards; a positive one, upwards.",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 148,
                      "column": 6
                    },
                    "end": {
                      "line": 148,
                      "column": 60
                    }
                  },
                  "metadata": {},
                  "type": "number",
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "auto-fit-on-attach",
                  "description": "Set to true to auto-fit on attach.",
                  "sourceRange": {
                    "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
                    "start": {
                      "line": 153,
                      "column": 6
                    },
                    "end": {
                      "line": 153,
                      "column": 52
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "name": "opened",
                  "description": "True if the overlay is currently displayed.",
                  "sourceRange": {
                    "start": {
                      "line": 29,
                      "column": 6
                    },
                    "end": {
                      "line": 30,
                      "column": 81
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "canceled",
                  "description": "True if the overlay was canceled when it was last closed.",
                  "sourceRange": {
                    "start": {
                      "line": 35,
                      "column": 6
                    },
                    "end": {
                      "line": 40,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "with-backdrop",
                  "description": "Set to true to display a backdrop behind the overlay. It traps the focus\nwithin the light DOM of the overlay.",
                  "sourceRange": {
                    "start": {
                      "line": 46,
                      "column": 6
                    },
                    "end": {
                      "line": 46,
                      "column": 69
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "no-auto-focus",
                  "description": "Set to true to disable auto-focusing the overlay or child nodes with\nthe `autofocus` attribute` when the overlay is opened.",
                  "sourceRange": {
                    "start": {
                      "line": 52,
                      "column": 6
                    },
                    "end": {
                      "line": 52,
                      "column": 48
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "no-cancel-on-esc-key",
                  "description": "Set to true to disable canceling the overlay with the ESC key.",
                  "sourceRange": {
                    "start": {
                      "line": 57,
                      "column": 6
                    },
                    "end": {
                      "line": 57,
                      "column": 53
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "no-cancel-on-outside-click",
                  "description": "Set to true to disable canceling the overlay by clicking outside it.",
                  "sourceRange": {
                    "start": {
                      "line": 62,
                      "column": 6
                    },
                    "end": {
                      "line": 62,
                      "column": 59
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "closing-reason",
                  "description": "Contains the reason(s) this overlay was last closed (see\n`iron-overlay-closed`). `IronOverlayBehavior` provides the `canceled`\nreason; implementers of the behavior can provide other reasons in\naddition to `canceled`.",
                  "sourceRange": {
                    "start": {
                      "line": 70,
                      "column": 6
                    },
                    "end": {
                      "line": 74,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "Object",
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "restore-focus-on-close",
                  "description": "Set to true to enable restoring of focus when overlay is closed.",
                  "sourceRange": {
                    "start": {
                      "line": 79,
                      "column": 6
                    },
                    "end": {
                      "line": 79,
                      "column": 56
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "allow-click-through",
                  "description": "Set to true to allow clicks to go through overlays.\nWhen the user clicks outside this overlay, the click may\nclose the overlay below.",
                  "sourceRange": {
                    "start": {
                      "line": 86,
                      "column": 6
                    },
                    "end": {
                      "line": 86,
                      "column": 40
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "always-on-top",
                  "description": "Set to true to keep overlay always on top.",
                  "sourceRange": {
                    "start": {
                      "line": 91,
                      "column": 6
                    },
                    "end": {
                      "line": 91,
                      "column": 34
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "name": "scroll-action",
                  "description": "Determines which action to perform when scroll outside an opened overlay\nhappens. Possible values: lock - blocks scrolling from happening, refit -\ncomputes the new position on the overlay cancel - causes the overlay to\nclose",
                  "sourceRange": {
                    "start": {
                      "line": 99,
                      "column": 6
                    },
                    "end": {
                      "line": 99,
                      "column": 34
                    }
                  },
                  "metadata": {},
                  "type": "string",
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                }
              ],
              "events": [
                {
                  "type": "CustomEvent",
                  "name": "horizontal-offset-changed",
                  "description": "Fired when the `horizontalOffset` property changes.",
                  "metadata": {},
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "type": "CustomEvent",
                  "name": "vertical-offset-changed",
                  "description": "Fired when the `verticalOffset` property changes.",
                  "metadata": {},
                  "inheritedFrom": "Polymer.IronFitBehavior"
                },
                {
                  "type": "CustomEvent",
                  "name": "opened-changed",
                  "description": "Fired when the `opened` property changes.",
                  "metadata": {},
                  "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
                },
                {
                  "type": "CustomEvent",
                  "name": "iron-overlay-canceled",
                  "description": "iron-overlay-canceled",
                  "metadata": {}
                },
                {
                  "type": "CustomEvent",
                  "name": "iron-overlay-closed",
                  "description": "iron-overlay-closed",
                  "metadata": {}
                },
                {
                  "type": "CustomEvent",
                  "name": "iron-overlay-opened",
                  "description": "iron-overlay-opened",
                  "metadata": {}
                }
              ],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "`Use Polymer.IronValidatableBehavior` to implement an element that validates user input.\nUse the related `Polymer.IronValidatorBehavior` to add custom validation logic to an iron-input.\n\nBy default, an `<iron-form>` element validates its fields when the user presses the submit button.\nTo validate a form imperatively, call the form's `validate()` method, which in turn will\ncall `validate()` on all its children. By using `Polymer.IronValidatableBehavior`, your\ncustom element will get a public `validate()`, which\nwill return the validity of the element, and a corresponding `invalid` attribute,\nwhich can be used for styling.\n\nTo implement the custom validation logic of your element, you must override\nthe protected `_getValidity()` method of this behaviour, rather than `validate()`.\nSee [this](https://github.com/PolymerElements/iron-form/blob/master/demo/simple-element.html)\nfor an example.\n\n### Accessibility\n\nChanging the `invalid` property, either manually or by calling `validate()` will update the\n`aria-invalid` attribute.",
              "summary": "",
              "path": "components\\iron-validatable-behavior\\iron-validatable-behavior.html",
              "properties": [
                {
                  "name": "validator",
                  "type": "string",
                  "description": "Name of the validator to use.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 49,
                      "column": 6
                    },
                    "end": {
                      "line": 51,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "invalid",
                  "type": "boolean",
                  "description": "True if the last call to `validate` is invalid.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 56,
                      "column": 6
                    },
                    "end": {
                      "line": 62,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "observer": "\"_invalidChanged\""
                    }
                  },
                  "defaultValue": "false"
                }
              ],
              "methods": [
                {
                  "name": "registered",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 65,
                      "column": 4
                    },
                    "end": {
                      "line": 67,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_invalidChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 69,
                      "column": 4
                    },
                    "end": {
                      "line": 75,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_validator",
                  "description": "Recompute this every time it's needed, because we don't know if the\nunderlying IronValidatableBehaviorMeta has changed.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 79,
                      "column": 4
                    },
                    "end": {
                      "line": 82,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "hasValidator",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 87,
                      "column": 4
                    },
                    "end": {
                      "line": 89,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "boolean",
                    "desc": "True if the validator `validator` exists."
                  }
                },
                {
                  "name": "validate",
                  "description": "Returns true if the `value` is valid, and updates `invalid`. If you want\nyour element to have custom validation logic, do not override this method;\noverride `_getValidity(value)` instead.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 102,
                      "column": 4
                    },
                    "end": {
                      "line": 110,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "value",
                      "type": "Object",
                      "description": "Deprecated: The value to be validated. By default,\nit is passed to the validator's `validate()` function, if a validator is set.\nIf this argument is not specified, then the element's `value` property\nis used, if it exists."
                    }
                  ],
                  "return": {
                    "type": "boolean",
                    "desc": "True if `value` is valid."
                  }
                },
                {
                  "name": "_getValidity",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 122,
                      "column": 4
                    },
                    "end": {
                      "line": 127,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "staticMethods": [],
              "demos": [
                {
                  "url": "demo/index.html",
                  "description": "demo"
                },
                {
                  "url": "demo/index.html",
                  "description": ""
                }
              ],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 43,
                  "column": 2
                },
                "end": {
                  "line": 128,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "Polymer.IronValidatableBehavior",
              "attributes": [
                {
                  "name": "validator",
                  "description": "Name of the validator to use.",
                  "sourceRange": {
                    "start": {
                      "line": 49,
                      "column": 6
                    },
                    "end": {
                      "line": 51,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string"
                },
                {
                  "name": "invalid",
                  "description": "True if the last call to `validate` is invalid.",
                  "sourceRange": {
                    "start": {
                      "line": 56,
                      "column": 6
                    },
                    "end": {
                      "line": 62,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                }
              ],
              "events": [
                {
                  "type": "CustomEvent",
                  "name": "invalid-changed",
                  "description": "Fired when the `invalid` property changes.",
                  "metadata": {}
                }
              ],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "  Polymer.IronFormElementBehavior enables a custom element to be included\n  in an `iron-form`.\n\n  Events `iron-form-element-register` and `iron-form-element-unregister` are not fired on Polymer 2.0.\n\n  ",
              "summary": "",
              "path": "components\\iron-form-element-behavior\\iron-form-element-behavior.html",
              "properties": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "The name of this element.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 40,
                      "column": 6
                    },
                    "end": {
                      "line": 42,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "value",
                  "type": "(string | number | null | undefined)",
                  "description": "The value for this element.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 48,
                      "column": 6
                    },
                    "end": {
                      "line": 51,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true
                    }
                  }
                },
                {
                  "name": "required",
                  "type": "boolean",
                  "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 61,
                      "column": 6
                    },
                    "end": {
                      "line": 64,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "_parentForm",
                  "type": "Object",
                  "description": "The form that the element is registered to.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 69,
                      "column": 6
                    },
                    "end": {
                      "line": 71,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                }
              ],
              "methods": [
                {
                  "name": "attached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 74,
                      "column": 4
                    },
                    "end": {
                      "line": 80,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "detached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 82,
                      "column": 4
                    },
                    "end": {
                      "line": 86,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                }
              ],
              "staticMethods": [],
              "demos": [
                {
                  "url": "demo/index.html",
                  "description": "demo"
                },
                {
                  "url": "demo/index.html",
                  "description": ""
                }
              ],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 22,
                  "column": 2
                },
                "end": {
                  "line": 88,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "Polymer.IronFormElementBehavior",
              "attributes": [
                {
                  "name": "name",
                  "description": "The name of this element.",
                  "sourceRange": {
                    "start": {
                      "line": 40,
                      "column": 6
                    },
                    "end": {
                      "line": 42,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string"
                },
                {
                  "name": "value",
                  "description": "The value for this element.",
                  "sourceRange": {
                    "start": {
                      "line": 48,
                      "column": 6
                    },
                    "end": {
                      "line": 51,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "(string | number | null | undefined)"
                },
                {
                  "name": "required",
                  "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.",
                  "sourceRange": {
                    "start": {
                      "line": 61,
                      "column": 6
                    },
                    "end": {
                      "line": 64,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                }
              ],
              "events": [
                {
                  "type": "CustomEvent",
                  "name": "iron-form-element-register",
                  "description": "iron-form-element-register",
                  "metadata": {}
                },
                {
                  "type": "CustomEvent",
                  "name": "iron-form-element-unregister",
                  "description": "iron-form-element-unregister",
                  "metadata": {}
                },
                {
                  "type": "CustomEvent",
                  "name": "value-changed",
                  "description": "Fired when the `value` property changes.",
                  "metadata": {}
                }
              ],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "Use `Polymer.PaperInputBehavior` to implement inputs with `<paper-input-container>`. This\nbehavior is implemented by `<paper-input>`. It exposes a number of properties from\n`<paper-input-container>` and `<input is=\"iron-input\">` and they should be bound in your\ntemplate.\n\nThe input element can be accessed by the `inputElement` property if you need to access\nproperties or methods that are not exposed.",
              "summary": "",
              "path": "components\\paper-input\\paper-input-behavior.html",
              "properties": [
                {
                  "name": "focused",
                  "type": "boolean",
                  "description": "If true, the element currently has focus.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 25,
                      "column": 6
                    },
                    "end": {
                      "line": 31,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "readOnly": true
                    }
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "disabled",
                  "type": "boolean",
                  "description": "Set to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `<paper-input-container>`'s and the input's `disabled` property.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 68,
                      "column": 6
                    },
                    "end": {
                      "line": 71,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "_oldTabIndex",
                  "type": "(?string | undefined)",
                  "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 49,
                      "column": 6
                    },
                    "end": {
                      "line": 51,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "_boundFocusBlurHandler",
                  "type": "Function",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 53,
                      "column": 6
                    },
                    "end": {
                      "line": 58,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "__handleEventRetargeting",
                  "type": "boolean",
                  "description": "",
                  "privacy": "private",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 60,
                      "column": 6
                    },
                    "end": {
                      "line": 65,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "keyEventTarget",
                  "type": "?EventTarget",
                  "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 277,
                      "column": 6
                    },
                    "end": {
                      "line": 282,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "stopKeyboardEventPropagation",
                  "type": "boolean",
                  "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 288,
                      "column": 6
                    },
                    "end": {
                      "line": 288,
                      "column": 65
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_boundKeyHandlers",
                  "type": "Array",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 290,
                      "column": 6
                    },
                    "end": {
                      "line": 295,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "[]",
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_imperativeKeyBindings",
                  "type": "Object",
                  "description": "own properties of everything on the \"prototype\".",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 299,
                      "column": 6
                    },
                    "end": {
                      "line": 304,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "{}",
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "keyBindings",
                  "type": "!Object",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 382,
                      "column": 4
                    },
                    "end": {
                      "line": 384,
                      "column": 5
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "label",
                  "type": "string",
                  "description": "The label for this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\n`<label>`'s content and `hidden` property, e.g.\n`<label hidden$=\"[[!label]]\">[[label]]</label>` in your `template`",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 48,
                      "column": 6
                    },
                    "end": {
                      "line": 50,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "The value for this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<iron-input>`'s `bindValue`\nproperty, or the value property of your input that is `notify:true`.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 58,
                      "column": 6
                    },
                    "end": {
                      "line": 61,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true
                    }
                  }
                },
                {
                  "name": "invalid",
                  "type": "boolean",
                  "description": "Returns true if the value is invalid. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to both the\n`<paper-input-container>`'s and the input's `invalid` property.\n\nIf `autoValidate` is true, the `invalid` attribute is managed automatically,\nwhich can clobber attempts to manage it manually.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 81,
                      "column": 6
                    },
                    "end": {
                      "line": 85,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true
                    }
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "allowedPattern",
                  "type": "string",
                  "description": "Set this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `allowedPattern`\nproperty.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 93,
                      "column": 6
                    },
                    "end": {
                      "line": 95,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "The type of the input. The supported types are the\n[native input's types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_<input>_types).\nIf you're using PaperInputBehavior to implement your own paper-input-like element,\nbind this to the (Polymer 1) `<input is=\"iron-input\">`'s or (Polymer 2)\n`<iron-input>`'s `type` property.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 104,
                      "column": 6
                    },
                    "end": {
                      "line": 106,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "list",
                  "type": "string",
                  "description": "The datalist of the input (if any). This should match the id of an existing `<datalist>`.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `list` property.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 113,
                      "column": 6
                    },
                    "end": {
                      "line": 115,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "pattern",
                  "type": "string",
                  "description": "A pattern to validate the `input` with. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `pattern` property.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 122,
                      "column": 6
                    },
                    "end": {
                      "line": 124,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "required",
                  "type": "boolean",
                  "description": "Set to true to mark the input as required. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `required` property.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 131,
                      "column": 6
                    },
                    "end": {
                      "line": 134,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "errorMessage",
                  "type": "string",
                  "description": "The error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `<paper-input-error>`'s content, if using.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 141,
                      "column": 6
                    },
                    "end": {
                      "line": 143,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "charCounter",
                  "type": "boolean",
                  "description": "Set to true to show a character counter.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 148,
                      "column": 6
                    },
                    "end": {
                      "line": 151,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "noLabelFloat",
                  "type": "boolean",
                  "description": "Set to true to disable the floating label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<paper-input-container>`'s `noLabelFloat` property.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 158,
                      "column": 6
                    },
                    "end": {
                      "line": 161,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "alwaysFloatLabel",
                  "type": "boolean",
                  "description": "Set to true to always float the label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<paper-input-container>`'s `alwaysFloatLabel` property.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 168,
                      "column": 6
                    },
                    "end": {
                      "line": 171,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "autoValidate",
                  "type": "boolean",
                  "description": "Set to true to auto-validate the input value. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<paper-input-container>`'s `autoValidate` property.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 178,
                      "column": 6
                    },
                    "end": {
                      "line": 181,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "validator",
                  "type": "string",
                  "description": "Name of the validator to use. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `validator` property.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 188,
                      "column": 6
                    },
                    "end": {
                      "line": 190,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "autocomplete",
                  "type": "string",
                  "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocomplete` property.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 198,
                      "column": 6
                    },
                    "end": {
                      "line": 201,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "\"off\""
                },
                {
                  "name": "autofocus",
                  "type": "boolean",
                  "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autofocus` property.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 207,
                      "column": 6
                    },
                    "end": {
                      "line": 210,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "observer": "\"_autofocusChanged\""
                    }
                  }
                },
                {
                  "name": "inputmode",
                  "type": "string",
                  "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `inputmode` property.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 216,
                      "column": 6
                    },
                    "end": {
                      "line": 218,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "minlength",
                  "type": "number",
                  "description": "The minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `minlength` property.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 225,
                      "column": 6
                    },
                    "end": {
                      "line": 227,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "maxlength",
                  "type": "number",
                  "description": "The maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `maxlength` property.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 234,
                      "column": 6
                    },
                    "end": {
                      "line": 236,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "min",
                  "type": "string",
                  "description": "The minimum (numeric or date-time) input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `min` property.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 243,
                      "column": 6
                    },
                    "end": {
                      "line": 245,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "max",
                  "type": "string",
                  "description": "The maximum (numeric or date-time) input value.\nCan be a String (e.g. `\"2000-01-01\"`) or a Number (e.g. `2`).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `max` property.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 253,
                      "column": 6
                    },
                    "end": {
                      "line": 255,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "step",
                  "type": "string",
                  "description": "Limits the numeric or date-time increments.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `step` property.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 262,
                      "column": 6
                    },
                    "end": {
                      "line": 264,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `name` property.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 270,
                      "column": 6
                    },
                    "end": {
                      "line": 272,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "placeholder",
                  "type": "string",
                  "description": "A placeholder string in addition to the label. If this is set, the label will always float.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 277,
                      "column": 6
                    },
                    "end": {
                      "line": 281,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "\"\""
                },
                {
                  "name": "readonly",
                  "type": "boolean",
                  "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `readonly` property.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 287,
                      "column": 6
                    },
                    "end": {
                      "line": 290,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "size",
                  "type": "number",
                  "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `size` property.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 296,
                      "column": 6
                    },
                    "end": {
                      "line": 298,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "autocapitalize",
                  "type": "string",
                  "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocapitalize` property.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 306,
                      "column": 6
                    },
                    "end": {
                      "line": 309,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "\"none\""
                },
                {
                  "name": "autocorrect",
                  "type": "string",
                  "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocorrect` property.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 315,
                      "column": 6
                    },
                    "end": {
                      "line": 318,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "\"off\""
                },
                {
                  "name": "autosave",
                  "type": "string",
                  "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autosave` property,\nused with type=search.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 325,
                      "column": 6
                    },
                    "end": {
                      "line": 327,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "results",
                  "type": "number",
                  "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `results` property,\nused with type=search.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 334,
                      "column": 6
                    },
                    "end": {
                      "line": 336,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "accept",
                  "type": "string",
                  "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `accept` property,\nused with type=file.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 343,
                      "column": 6
                    },
                    "end": {
                      "line": 345,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "multiple",
                  "type": "boolean",
                  "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the`<input is=\"iron-input\">`'s `multiple` property,\nused with type=file.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 352,
                      "column": 6
                    },
                    "end": {
                      "line": 354,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                },
                {
                  "name": "_ariaDescribedBy",
                  "type": "string",
                  "description": "",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 357,
                      "column": 6
                    },
                    "end": {
                      "line": 360,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "\"\""
                },
                {
                  "name": "_ariaLabelledBy",
                  "type": "string",
                  "description": "",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 363,
                      "column": 6
                    },
                    "end": {
                      "line": 366,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "\"\""
                },
                {
                  "name": "_inputId",
                  "type": "string",
                  "description": "",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 369,
                      "column": 6
                    },
                    "end": {
                      "line": 372,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "\"\""
                },
                {
                  "name": "hostAttributes",
                  "type": "Object",
                  "description": "",
                  "privacy": "private",
                  "sourceRange": {
                    "start": {
                      "line": 387,
                      "column": 4
                    },
                    "end": {
                      "line": 389,
                      "column": 5
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                }
              ],
              "methods": [
                {
                  "name": "ready",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 75,
                      "column": 4
                    },
                    "end": {
                      "line": 78,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  },
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "_focusBlurHandler",
                  "description": "Forward focus to inputElement. Overriden from IronControlState.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 468,
                      "column": 4
                    },
                    "end": {
                      "line": 475,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event"
                    }
                  ]
                },
                {
                  "name": "_disabledChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 106,
                      "column": 4
                    },
                    "end": {
                      "line": 125,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "disabled"
                    },
                    {
                      "name": "old"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "_changedControlState",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 127,
                      "column": 4
                    },
                    "end": {
                      "line": 132,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "registered",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 317,
                      "column": 4
                    },
                    "end": {
                      "line": 319,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "attached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 424,
                      "column": 4
                    },
                    "end": {
                      "line": 434,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "detached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 325,
                      "column": 4
                    },
                    "end": {
                      "line": 327,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "addOwnKeyBinding",
                  "description": "Can be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 337,
                      "column": 4
                    },
                    "end": {
                      "line": 341,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "eventString",
                      "type": "string"
                    },
                    {
                      "name": "handlerName",
                      "type": "string"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "removeOwnKeyBindings",
                  "description": "When called, will remove all imperatively-added key bindings.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 346,
                      "column": 4
                    },
                    "end": {
                      "line": 350,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "keyboardEventMatchesKeys",
                  "description": "Returns true if a keyboard event matches `eventString`.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 359,
                      "column": 4
                    },
                    "end": {
                      "line": 367,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event",
                      "type": "KeyboardEvent"
                    },
                    {
                      "name": "eventString",
                      "type": "string"
                    }
                  ],
                  "return": {
                    "type": "boolean"
                  },
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_collectKeyBindings",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 369,
                      "column": 4
                    },
                    "end": {
                      "line": 379,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_prepKeyBindings",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 381,
                      "column": 4
                    },
                    "end": {
                      "line": 403,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_addKeyBinding",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 405,
                      "column": 4
                    },
                    "end": {
                      "line": 412,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "eventString"
                    },
                    {
                      "name": "handlerName"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_resetKeyEventListeners",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 414,
                      "column": 4
                    },
                    "end": {
                      "line": 420,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_listenKeyEventListeners",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 422,
                      "column": 4
                    },
                    "end": {
                      "line": 435,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_unlistenKeyEventListeners",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 437,
                      "column": 4
                    },
                    "end": {
                      "line": 452,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_onKeyBindingEvent",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 454,
                      "column": 4
                    },
                    "end": {
                      "line": 475,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "keyBindings"
                    },
                    {
                      "name": "event"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_triggerKeyHandler",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 477,
                      "column": 4
                    },
                    "end": {
                      "line": 486,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "keyCombo"
                    },
                    {
                      "name": "handlerName"
                    },
                    {
                      "name": "keyboardEvent"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "inputElement",
                  "description": "Returns a reference to the input element.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 395,
                      "column": 4
                    },
                    "end": {
                      "line": 407,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "!HTMLElement"
                  }
                },
                {
                  "name": "_focusableElement",
                  "description": "Returns a reference to the focusable element.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 413,
                      "column": 4
                    },
                    "end": {
                      "line": 415,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "!HTMLElement"
                  }
                },
                {
                  "name": "created",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 417,
                      "column": 4
                    },
                    "end": {
                      "line": 422,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_appendStringWithSpace",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 436,
                      "column": 4
                    },
                    "end": {
                      "line": 443,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "str"
                    },
                    {
                      "name": "more"
                    }
                  ]
                },
                {
                  "name": "_onAddonAttached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 445,
                      "column": 4
                    },
                    "end": {
                      "line": 454,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event"
                    }
                  ]
                },
                {
                  "name": "validate",
                  "description": "Validates the input element and sets an error style if needed.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 461,
                      "column": 4
                    },
                    "end": {
                      "line": 463,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "boolean"
                  }
                },
                {
                  "name": "_onShiftTabDown",
                  "description": "Handler that is called when a shift+tab keypress is detected by the menu.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 482,
                      "column": 4
                    },
                    "end": {
                      "line": 490,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event",
                      "type": "CustomEvent",
                      "description": "A key combination event."
                    }
                  ]
                },
                {
                  "name": "_handleAutoValidate",
                  "description": "If `autoValidate` is true, then validates the element.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 495,
                      "column": 4
                    },
                    "end": {
                      "line": 498,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "updateValueAndPreserveCaret",
                  "description": "Restores the cursor to its original position after updating the value.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 504,
                      "column": 4
                    },
                    "end": {
                      "line": 520,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "newValue",
                      "type": "string",
                      "description": "The value that should be saved."
                    }
                  ]
                },
                {
                  "name": "_computeAlwaysFloatLabel",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 522,
                      "column": 4
                    },
                    "end": {
                      "line": 524,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "alwaysFloatLabel"
                    },
                    {
                      "name": "placeholder"
                    }
                  ]
                },
                {
                  "name": "_updateAriaLabelledBy",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 526,
                      "column": 4
                    },
                    "end": {
                      "line": 540,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_generateInputId",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 542,
                      "column": 4
                    },
                    "end": {
                      "line": 546,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_onChange",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 548,
                      "column": 4
                    },
                    "end": {
                      "line": 559,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event"
                    }
                  ]
                },
                {
                  "name": "_autofocusChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 561,
                      "column": 4
                    },
                    "end": {
                      "line": 586,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 33,
                  "column": 2
                },
                "end": {
                  "line": 587,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "Polymer.PaperInputBehavior",
              "attributes": [
                {
                  "name": "focused",
                  "description": "If true, the element currently has focus.",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 25,
                      "column": 6
                    },
                    "end": {
                      "line": 31,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "disabled",
                  "description": "Set to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `<paper-input-container>`'s and the input's `disabled` property.",
                  "sourceRange": {
                    "start": {
                      "line": 68,
                      "column": 6
                    },
                    "end": {
                      "line": 71,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "key-event-target",
                  "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 277,
                      "column": 6
                    },
                    "end": {
                      "line": 282,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "?EventTarget",
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "stop-keyboard-event-propagation",
                  "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 288,
                      "column": 6
                    },
                    "end": {
                      "line": 288,
                      "column": 65
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "label",
                  "description": "The label for this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\n`<label>`'s content and `hidden` property, e.g.\n`<label hidden$=\"[[!label]]\">[[label]]</label>` in your `template`",
                  "sourceRange": {
                    "start": {
                      "line": 48,
                      "column": 6
                    },
                    "end": {
                      "line": 50,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string"
                },
                {
                  "name": "value",
                  "description": "The value for this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<iron-input>`'s `bindValue`\nproperty, or the value property of your input that is `notify:true`.",
                  "sourceRange": {
                    "start": {
                      "line": 58,
                      "column": 6
                    },
                    "end": {
                      "line": 61,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string"
                },
                {
                  "name": "invalid",
                  "description": "Returns true if the value is invalid. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to both the\n`<paper-input-container>`'s and the input's `invalid` property.\n\nIf `autoValidate` is true, the `invalid` attribute is managed automatically,\nwhich can clobber attempts to manage it manually.",
                  "sourceRange": {
                    "start": {
                      "line": 81,
                      "column": 6
                    },
                    "end": {
                      "line": 85,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "allowed-pattern",
                  "description": "Set this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `allowedPattern`\nproperty.",
                  "sourceRange": {
                    "start": {
                      "line": 93,
                      "column": 6
                    },
                    "end": {
                      "line": 95,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string"
                },
                {
                  "name": "type",
                  "description": "The type of the input. The supported types are the\n[native input's types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_<input>_types).\nIf you're using PaperInputBehavior to implement your own paper-input-like element,\nbind this to the (Polymer 1) `<input is=\"iron-input\">`'s or (Polymer 2)\n`<iron-input>`'s `type` property.",
                  "sourceRange": {
                    "start": {
                      "line": 104,
                      "column": 6
                    },
                    "end": {
                      "line": 106,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string"
                },
                {
                  "name": "list",
                  "description": "The datalist of the input (if any). This should match the id of an existing `<datalist>`.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `list` property.",
                  "sourceRange": {
                    "start": {
                      "line": 113,
                      "column": 6
                    },
                    "end": {
                      "line": 115,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string"
                },
                {
                  "name": "pattern",
                  "description": "A pattern to validate the `input` with. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `pattern` property.",
                  "sourceRange": {
                    "start": {
                      "line": 122,
                      "column": 6
                    },
                    "end": {
                      "line": 124,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string"
                },
                {
                  "name": "required",
                  "description": "Set to true to mark the input as required. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `required` property.",
                  "sourceRange": {
                    "start": {
                      "line": 131,
                      "column": 6
                    },
                    "end": {
                      "line": 134,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "error-message",
                  "description": "The error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `<paper-input-error>`'s content, if using.",
                  "sourceRange": {
                    "start": {
                      "line": 141,
                      "column": 6
                    },
                    "end": {
                      "line": 143,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string"
                },
                {
                  "name": "char-counter",
                  "description": "Set to true to show a character counter.",
                  "sourceRange": {
                    "start": {
                      "line": 148,
                      "column": 6
                    },
                    "end": {
                      "line": 151,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "no-label-float",
                  "description": "Set to true to disable the floating label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<paper-input-container>`'s `noLabelFloat` property.",
                  "sourceRange": {
                    "start": {
                      "line": 158,
                      "column": 6
                    },
                    "end": {
                      "line": 161,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "always-float-label",
                  "description": "Set to true to always float the label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<paper-input-container>`'s `alwaysFloatLabel` property.",
                  "sourceRange": {
                    "start": {
                      "line": 168,
                      "column": 6
                    },
                    "end": {
                      "line": 171,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "auto-validate",
                  "description": "Set to true to auto-validate the input value. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<paper-input-container>`'s `autoValidate` property.",
                  "sourceRange": {
                    "start": {
                      "line": 178,
                      "column": 6
                    },
                    "end": {
                      "line": 181,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "validator",
                  "description": "Name of the validator to use. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `validator` property.",
                  "sourceRange": {
                    "start": {
                      "line": 188,
                      "column": 6
                    },
                    "end": {
                      "line": 190,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string"
                },
                {
                  "name": "autocomplete",
                  "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocomplete` property.",
                  "sourceRange": {
                    "start": {
                      "line": 198,
                      "column": 6
                    },
                    "end": {
                      "line": 201,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string"
                },
                {
                  "name": "autofocus",
                  "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autofocus` property.",
                  "sourceRange": {
                    "start": {
                      "line": 207,
                      "column": 6
                    },
                    "end": {
                      "line": 210,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "inputmode",
                  "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `inputmode` property.",
                  "sourceRange": {
                    "start": {
                      "line": 216,
                      "column": 6
                    },
                    "end": {
                      "line": 218,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string"
                },
                {
                  "name": "minlength",
                  "description": "The minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `minlength` property.",
                  "sourceRange": {
                    "start": {
                      "line": 225,
                      "column": 6
                    },
                    "end": {
                      "line": 227,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "number"
                },
                {
                  "name": "maxlength",
                  "description": "The maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `maxlength` property.",
                  "sourceRange": {
                    "start": {
                      "line": 234,
                      "column": 6
                    },
                    "end": {
                      "line": 236,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "number"
                },
                {
                  "name": "min",
                  "description": "The minimum (numeric or date-time) input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `min` property.",
                  "sourceRange": {
                    "start": {
                      "line": 243,
                      "column": 6
                    },
                    "end": {
                      "line": 245,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string"
                },
                {
                  "name": "max",
                  "description": "The maximum (numeric or date-time) input value.\nCan be a String (e.g. `\"2000-01-01\"`) or a Number (e.g. `2`).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `max` property.",
                  "sourceRange": {
                    "start": {
                      "line": 253,
                      "column": 6
                    },
                    "end": {
                      "line": 255,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string"
                },
                {
                  "name": "step",
                  "description": "Limits the numeric or date-time increments.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `step` property.",
                  "sourceRange": {
                    "start": {
                      "line": 262,
                      "column": 6
                    },
                    "end": {
                      "line": 264,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string"
                },
                {
                  "name": "name",
                  "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `name` property.",
                  "sourceRange": {
                    "start": {
                      "line": 270,
                      "column": 6
                    },
                    "end": {
                      "line": 272,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string"
                },
                {
                  "name": "placeholder",
                  "description": "A placeholder string in addition to the label. If this is set, the label will always float.",
                  "sourceRange": {
                    "start": {
                      "line": 277,
                      "column": 6
                    },
                    "end": {
                      "line": 281,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string"
                },
                {
                  "name": "readonly",
                  "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `readonly` property.",
                  "sourceRange": {
                    "start": {
                      "line": 287,
                      "column": 6
                    },
                    "end": {
                      "line": 290,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "size",
                  "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `size` property.",
                  "sourceRange": {
                    "start": {
                      "line": 296,
                      "column": 6
                    },
                    "end": {
                      "line": 298,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "number"
                },
                {
                  "name": "autocapitalize",
                  "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocapitalize` property.",
                  "sourceRange": {
                    "start": {
                      "line": 306,
                      "column": 6
                    },
                    "end": {
                      "line": 309,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string"
                },
                {
                  "name": "autocorrect",
                  "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocorrect` property.",
                  "sourceRange": {
                    "start": {
                      "line": 315,
                      "column": 6
                    },
                    "end": {
                      "line": 318,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string"
                },
                {
                  "name": "autosave",
                  "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autosave` property,\nused with type=search.",
                  "sourceRange": {
                    "start": {
                      "line": 325,
                      "column": 6
                    },
                    "end": {
                      "line": 327,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string"
                },
                {
                  "name": "results",
                  "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `results` property,\nused with type=search.",
                  "sourceRange": {
                    "start": {
                      "line": 334,
                      "column": 6
                    },
                    "end": {
                      "line": 336,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "number"
                },
                {
                  "name": "accept",
                  "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `accept` property,\nused with type=file.",
                  "sourceRange": {
                    "start": {
                      "line": 343,
                      "column": 6
                    },
                    "end": {
                      "line": 345,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string"
                },
                {
                  "name": "multiple",
                  "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the`<input is=\"iron-input\">`'s `multiple` property,\nused with type=file.",
                  "sourceRange": {
                    "start": {
                      "line": 352,
                      "column": 6
                    },
                    "end": {
                      "line": 354,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                }
              ],
              "events": [
                {
                  "type": "CustomEvent",
                  "name": "focused-changed",
                  "description": "Fired when the `focused` property changes.",
                  "metadata": {},
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "type": "CustomEvent",
                  "name": "disabled-changed",
                  "description": "Fired when the `disabled` property changes.",
                  "metadata": {},
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "type": "CustomEvent",
                  "name": "change",
                  "description": "change",
                  "metadata": {}
                },
                {
                  "type": "CustomEvent",
                  "name": "value-changed",
                  "description": "Fired when the `value` property changes.",
                  "metadata": {}
                },
                {
                  "type": "CustomEvent",
                  "name": "invalid-changed",
                  "description": "Fired when the `invalid` property changes.",
                  "metadata": {}
                }
              ],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "Use `Polymer.PaperInputAddonBehavior` to implement an add-on for `<paper-input-container>`. A\nadd-on appears below the input, and may display information based on the input value and\nvalidity such as a character counter or an error message.",
              "summary": "",
              "path": "components\\paper-input\\paper-input-addon-behavior.html",
              "properties": [],
              "methods": [
                {
                  "name": "attached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 21,
                      "column": 4
                    },
                    "end": {
                      "line": 25,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "update",
                  "description": "The function called by `<paper-input-container>` when the input value or validity changes.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 38,
                      "column": 4
                    },
                    "end": {
                      "line": 39,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "state",
                      "type": "{invalid: boolean, inputElement: (Element | undefined), value: (string | undefined)}",
                      "description": "    inputElement: The input element.\n    value: The input value.\n    invalid: True if the input value is invalid."
                    }
                  ]
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 20,
                  "column": 2
                },
                "end": {
                  "line": 41,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "Polymer.PaperInputAddonBehavior",
              "attributes": [],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "Use `Polymer.IronCheckedElementBehavior` to implement a custom element\nthat has a `checked` property, which can be used for validation if the\nelement is also `required`. Element instances implementing this behavior\nwill also be registered for use in an `iron-form` element.",
              "summary": "",
              "path": "components\\iron-checked-element-behavior\\iron-checked-element-behavior.html",
              "properties": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "The name of this element.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
                    "start": {
                      "line": 40,
                      "column": 6
                    },
                    "end": {
                      "line": 42,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronFormElementBehavior"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Overriden from Polymer.IronFormElementBehavior",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 51,
                      "column": 6
                    },
                    "end": {
                      "line": 51,
                      "column": 67
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "observer": "\"_valueChanged\""
                    }
                  },
                  "defaultValue": "\"on\""
                },
                {
                  "name": "required",
                  "type": "boolean",
                  "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
                    "start": {
                      "line": 61,
                      "column": 6
                    },
                    "end": {
                      "line": 64,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronFormElementBehavior"
                },
                {
                  "name": "_parentForm",
                  "type": "Object",
                  "description": "The form that the element is registered to.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
                    "start": {
                      "line": 69,
                      "column": 6
                    },
                    "end": {
                      "line": 71,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronFormElementBehavior"
                },
                {
                  "name": "validator",
                  "type": "string",
                  "description": "Name of the validator to use.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
                    "start": {
                      "line": 49,
                      "column": 6
                    },
                    "end": {
                      "line": 51,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronValidatableBehavior"
                },
                {
                  "name": "invalid",
                  "type": "boolean",
                  "description": "True if the last call to `validate` is invalid.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
                    "start": {
                      "line": 56,
                      "column": 6
                    },
                    "end": {
                      "line": 62,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "observer": "\"_invalidChanged\""
                    }
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronValidatableBehavior"
                },
                {
                  "name": "checked",
                  "type": "boolean",
                  "description": "Gets or sets the state, `true` is checked and `false` is unchecked.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 36,
                      "column": 6
                    },
                    "end": {
                      "line": 42,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "observer": "\"_checkedChanged\""
                    }
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "toggles",
                  "type": "boolean",
                  "description": "If true, the button toggles the active state with each tap or press\nof the spacebar.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 48,
                      "column": 6
                    },
                    "end": {
                      "line": 48,
                      "column": 69
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "true"
                }
              ],
              "methods": [
                {
                  "name": "attached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
                    "start": {
                      "line": 74,
                      "column": 4
                    },
                    "end": {
                      "line": 80,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronFormElementBehavior"
                },
                {
                  "name": "detached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
                    "start": {
                      "line": 82,
                      "column": 4
                    },
                    "end": {
                      "line": 86,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronFormElementBehavior"
                },
                {
                  "name": "registered",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
                    "start": {
                      "line": 65,
                      "column": 4
                    },
                    "end": {
                      "line": 67,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronValidatableBehavior"
                },
                {
                  "name": "_invalidChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
                    "start": {
                      "line": 69,
                      "column": 4
                    },
                    "end": {
                      "line": 75,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronValidatableBehavior"
                },
                {
                  "name": "_validator",
                  "description": "Recompute this every time it's needed, because we don't know if the\nunderlying IronValidatableBehaviorMeta has changed.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
                    "start": {
                      "line": 79,
                      "column": 4
                    },
                    "end": {
                      "line": 82,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronValidatableBehavior"
                },
                {
                  "name": "hasValidator",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
                    "start": {
                      "line": 87,
                      "column": 4
                    },
                    "end": {
                      "line": 89,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "boolean",
                    "desc": "True if the validator `validator` exists."
                  },
                  "inheritedFrom": "Polymer.IronValidatableBehavior"
                },
                {
                  "name": "validate",
                  "description": "Returns true if the `value` is valid, and updates `invalid`. If you want\nyour element to have custom validation logic, do not override this method;\noverride `_getValidity(value)` instead.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
                    "start": {
                      "line": 102,
                      "column": 4
                    },
                    "end": {
                      "line": 110,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "value",
                      "type": "Object",
                      "description": "Deprecated: The value to be validated. By default,\nit is passed to the validator's `validate()` function, if a validator is set.\nIf this argument is not specified, then the element's `value` property\nis used, if it exists."
                    }
                  ],
                  "return": {
                    "type": "boolean",
                    "desc": "True if `value` is valid."
                  },
                  "inheritedFrom": "Polymer.IronValidatableBehavior"
                },
                {
                  "name": "_getValidity",
                  "description": "Returns false if the element is required and not checked, and true\notherwise.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 69,
                      "column": 4
                    },
                    "end": {
                      "line": 71,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "_value",
                      "type": "*=",
                      "description": "Ignored."
                    }
                  ],
                  "return": {
                    "type": "boolean",
                    "desc": "true if `required` is false or if `checked` is true."
                  }
                },
                {
                  "name": "created",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 56,
                      "column": 4
                    },
                    "end": {
                      "line": 61,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_requiredChanged",
                  "description": "Update the aria-required label when `required` is changed.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 76,
                      "column": 4
                    },
                    "end": {
                      "line": 82,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_checkedChanged",
                  "description": "Fire `iron-changed` when the checked state changes.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 87,
                      "column": 4
                    },
                    "end": {
                      "line": 90,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_valueChanged",
                  "description": "Reset value to 'on' if it is set to `undefined`.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 95,
                      "column": 4
                    },
                    "end": {
                      "line": 99,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                }
              ],
              "staticMethods": [],
              "demos": [
                {
                  "url": "demo/index.html",
                  "description": "demo"
                },
                {
                  "url": "demo/index.html",
                  "description": ""
                }
              ],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 24,
                  "column": 2
                },
                "end": {
                  "line": 100,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "Polymer.IronCheckedElementBehavior",
              "attributes": [
                {
                  "name": "name",
                  "description": "The name of this element.",
                  "sourceRange": {
                    "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
                    "start": {
                      "line": 40,
                      "column": 6
                    },
                    "end": {
                      "line": 42,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string",
                  "inheritedFrom": "Polymer.IronFormElementBehavior"
                },
                {
                  "name": "value",
                  "description": "Overriden from Polymer.IronFormElementBehavior",
                  "sourceRange": {
                    "start": {
                      "line": 51,
                      "column": 6
                    },
                    "end": {
                      "line": 51,
                      "column": 67
                    }
                  },
                  "metadata": {},
                  "type": "string"
                },
                {
                  "name": "required",
                  "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.",
                  "sourceRange": {
                    "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
                    "start": {
                      "line": 61,
                      "column": 6
                    },
                    "end": {
                      "line": 64,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronFormElementBehavior"
                },
                {
                  "name": "validator",
                  "description": "Name of the validator to use.",
                  "sourceRange": {
                    "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
                    "start": {
                      "line": 49,
                      "column": 6
                    },
                    "end": {
                      "line": 51,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string",
                  "inheritedFrom": "Polymer.IronValidatableBehavior"
                },
                {
                  "name": "invalid",
                  "description": "True if the last call to `validate` is invalid.",
                  "sourceRange": {
                    "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
                    "start": {
                      "line": 56,
                      "column": 6
                    },
                    "end": {
                      "line": 62,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronValidatableBehavior"
                },
                {
                  "name": "checked",
                  "description": "Gets or sets the state, `true` is checked and `false` is unchecked.",
                  "sourceRange": {
                    "start": {
                      "line": 36,
                      "column": 6
                    },
                    "end": {
                      "line": 42,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                },
                {
                  "name": "toggles",
                  "description": "If true, the button toggles the active state with each tap or press\nof the spacebar.",
                  "sourceRange": {
                    "start": {
                      "line": 48,
                      "column": 6
                    },
                    "end": {
                      "line": 48,
                      "column": 69
                    }
                  },
                  "metadata": {},
                  "type": "boolean"
                }
              ],
              "events": [
                {
                  "type": "CustomEvent",
                  "name": "iron-form-element-register",
                  "description": "iron-form-element-register",
                  "metadata": {},
                  "inheritedFrom": "Polymer.IronFormElementBehavior"
                },
                {
                  "type": "CustomEvent",
                  "name": "iron-form-element-unregister",
                  "description": "iron-form-element-unregister",
                  "metadata": {},
                  "inheritedFrom": "Polymer.IronFormElementBehavior"
                },
                {
                  "type": "CustomEvent",
                  "name": "value-changed",
                  "description": "Fired when the `value` property changes.",
                  "metadata": {},
                  "inheritedFrom": "Polymer.IronFormElementBehavior"
                },
                {
                  "type": "CustomEvent",
                  "name": "invalid-changed",
                  "description": "Fired when the `invalid` property changes.",
                  "metadata": {},
                  "inheritedFrom": "Polymer.IronValidatableBehavior"
                },
                {
                  "type": "CustomEvent",
                  "name": "iron-change",
                  "description": "iron-change",
                  "metadata": {}
                },
                {
                  "type": "CustomEvent",
                  "name": "checked-changed",
                  "description": "Fired when the `checked` property changes.",
                  "metadata": {}
                }
              ],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "",
              "summary": "",
              "path": "components\\paper-behaviors\\paper-button-behavior.html",
              "properties": [
                {
                  "name": "keyEventTarget",
                  "type": "?EventTarget",
                  "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 277,
                      "column": 6
                    },
                    "end": {
                      "line": 282,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "stopKeyboardEventPropagation",
                  "type": "boolean",
                  "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 288,
                      "column": 6
                    },
                    "end": {
                      "line": 288,
                      "column": 65
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_boundKeyHandlers",
                  "type": "Array",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 290,
                      "column": 6
                    },
                    "end": {
                      "line": 295,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "[]",
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_imperativeKeyBindings",
                  "type": "Object",
                  "description": "own properties of everything on the \"prototype\".",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 299,
                      "column": 6
                    },
                    "end": {
                      "line": 304,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "{}",
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "keyBindings",
                  "type": "!Object",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 100,
                      "column": 4
                    },
                    "end": {
                      "line": 104,
                      "column": 5
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "pressed",
                  "type": "boolean",
                  "description": "If true, the user is currently holding down the button.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 27,
                      "column": 6
                    },
                    "end": {
                      "line": 33,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "observer": "\"_pressedChanged\"",
                      "readOnly": true
                    }
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "toggles",
                  "type": "boolean",
                  "description": "If true, the button toggles the active state with each tap or press\nof the spacebar.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 39,
                      "column": 6
                    },
                    "end": {
                      "line": 43,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "active",
                  "type": "boolean",
                  "description": "If true, the button is a toggle and is currently in the active state.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 48,
                      "column": 6
                    },
                    "end": {
                      "line": 53,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true
                    }
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "pointerDown",
                  "type": "boolean",
                  "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 60,
                      "column": 6
                    },
                    "end": {
                      "line": 64,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true
                    }
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "receivedFocusFromKeyboard",
                  "type": "boolean",
                  "description": "True if the input device that caused the element to receive focus\nwas a keyboard.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 70,
                      "column": 6
                    },
                    "end": {
                      "line": 73,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true
                    }
                  },
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "ariaActiveAttribute",
                  "type": "string",
                  "description": "The aria attribute to be set if the button is a toggle and in the\nactive state.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 79,
                      "column": 6
                    },
                    "end": {
                      "line": 83,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "observer": "\"_ariaActiveAttributeChanged\""
                    }
                  },
                  "defaultValue": "\"aria-pressed\"",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_mouseEventRe",
                  "type": "object",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 106,
                      "column": 4
                    },
                    "end": {
                      "line": 106,
                      "column": 27
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "focused",
                  "type": "boolean",
                  "description": "If true, the element currently has focus.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 25,
                      "column": 6
                    },
                    "end": {
                      "line": 31,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "readOnly": true
                    }
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "disabled",
                  "type": "boolean",
                  "description": "If true, the user cannot interact with this element.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 36,
                      "column": 6
                    },
                    "end": {
                      "line": 42,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "observer": "\"_disabledChanged\""
                    }
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "_oldTabIndex",
                  "type": "(?string | undefined)",
                  "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 49,
                      "column": 6
                    },
                    "end": {
                      "line": 51,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "_boundFocusBlurHandler",
                  "type": "Function",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 53,
                      "column": 6
                    },
                    "end": {
                      "line": 58,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "__handleEventRetargeting",
                  "type": "boolean",
                  "description": "",
                  "privacy": "private",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 60,
                      "column": 6
                    },
                    "end": {
                      "line": 65,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "noink",
                  "type": "boolean",
                  "description": "If true, the element will not produce a ripple effect when interacted\nwith via the pointer.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "paper-ripple-behavior.html",
                    "start": {
                      "line": 30,
                      "column": 6
                    },
                    "end": {
                      "line": 30,
                      "column": 55
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "observer": "\"_noinkChanged\""
                    }
                  },
                  "inheritedFrom": "Polymer.PaperRippleBehavior"
                },
                {
                  "name": "_rippleContainer",
                  "type": "(Element | undefined)",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "paper-ripple-behavior.html",
                    "start": {
                      "line": 35,
                      "column": 6
                    },
                    "end": {
                      "line": 37,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.PaperRippleBehavior"
                },
                {
                  "name": "elevation",
                  "type": "number",
                  "description": "The z-depth of this element, from 0-5. Setting to 0 will remove the\nshadow, and each increasing number greater than 0 will be \"deeper\"\nthan the last.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 27,
                      "column": 6
                    },
                    "end": {
                      "line": 27,
                      "column": 73
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true
                    }
                  }
                },
                {
                  "name": "hostAttributes",
                  "type": "Object",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 35,
                      "column": 4
                    },
                    "end": {
                      "line": 35,
                      "column": 67
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  }
                }
              ],
              "methods": [
                {
                  "name": "registered",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 317,
                      "column": 4
                    },
                    "end": {
                      "line": 319,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "attached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 321,
                      "column": 4
                    },
                    "end": {
                      "line": 323,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "detached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 325,
                      "column": 4
                    },
                    "end": {
                      "line": 327,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "addOwnKeyBinding",
                  "description": "Can be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 337,
                      "column": 4
                    },
                    "end": {
                      "line": 341,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "eventString",
                      "type": "string"
                    },
                    {
                      "name": "handlerName",
                      "type": "string"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "removeOwnKeyBindings",
                  "description": "When called, will remove all imperatively-added key bindings.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 346,
                      "column": 4
                    },
                    "end": {
                      "line": 350,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "keyboardEventMatchesKeys",
                  "description": "Returns true if a keyboard event matches `eventString`.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 359,
                      "column": 4
                    },
                    "end": {
                      "line": 367,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event",
                      "type": "KeyboardEvent"
                    },
                    {
                      "name": "eventString",
                      "type": "string"
                    }
                  ],
                  "return": {
                    "type": "boolean"
                  },
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_collectKeyBindings",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 369,
                      "column": 4
                    },
                    "end": {
                      "line": 379,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_prepKeyBindings",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 381,
                      "column": 4
                    },
                    "end": {
                      "line": 403,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_addKeyBinding",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 405,
                      "column": 4
                    },
                    "end": {
                      "line": 412,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "eventString"
                    },
                    {
                      "name": "handlerName"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_resetKeyEventListeners",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 414,
                      "column": 4
                    },
                    "end": {
                      "line": 420,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_listenKeyEventListeners",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 422,
                      "column": 4
                    },
                    "end": {
                      "line": 435,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_unlistenKeyEventListeners",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 437,
                      "column": 4
                    },
                    "end": {
                      "line": 452,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_onKeyBindingEvent",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 454,
                      "column": 4
                    },
                    "end": {
                      "line": 475,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "keyBindings"
                    },
                    {
                      "name": "event"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_triggerKeyHandler",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 477,
                      "column": 4
                    },
                    "end": {
                      "line": 486,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "keyCombo"
                    },
                    {
                      "name": "handlerName"
                    },
                    {
                      "name": "keyboardEvent"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_tapHandler",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 108,
                      "column": 4
                    },
                    "end": {
                      "line": 115,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_focusChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 117,
                      "column": 4
                    },
                    "end": {
                      "line": 123,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "focused"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_detectKeyboardFocus",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 125,
                      "column": 4
                    },
                    "end": {
                      "line": 127,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "focused"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_userActivate",
                  "description": "'change' events",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 131,
                      "column": 4
                    },
                    "end": {
                      "line": 136,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "active"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_downHandler",
                  "description": "In addition to the functionality provided in `IronButtonState`, ensures\na ripple effect is created when the element is in a `pressed` state.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "paper-ripple-behavior.html",
                    "start": {
                      "line": 54,
                      "column": 4
                    },
                    "end": {
                      "line": 59,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event"
                    }
                  ],
                  "inheritedFrom": "Polymer.PaperRippleBehavior"
                },
                {
                  "name": "_upHandler",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 144,
                      "column": 4
                    },
                    "end": {
                      "line": 147,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_spaceKeyDownHandler",
                  "description": "In addition to `IronButtonState` behavior, when space key goes down,\ncreate a ripple down effect.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 59,
                      "column": 4
                    },
                    "end": {
                      "line": 65,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event",
                      "type": "!KeyboardEvent",
                      "description": "."
                    }
                  ]
                },
                {
                  "name": "_spaceKeyUpHandler",
                  "description": "In addition to `IronButtonState` behavior, when space key goes up,\ncreate a ripple up effect.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 73,
                      "column": 4
                    },
                    "end": {
                      "line": 78,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event",
                      "type": "!KeyboardEvent",
                      "description": "."
                    }
                  ]
                },
                {
                  "name": "_asyncClick",
                  "description": "event handler to unwind before triggering another event",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 186,
                      "column": 4
                    },
                    "end": {
                      "line": 190,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_pressedChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 194,
                      "column": 4
                    },
                    "end": {
                      "line": 196,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "pressed"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_ariaActiveAttributeChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 198,
                      "column": 4
                    },
                    "end": {
                      "line": 202,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "oldValue"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_activeChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 204,
                      "column": 4
                    },
                    "end": {
                      "line": 212,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "active"
                    },
                    {
                      "name": "ariaActiveAttribute"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_controlStateChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 214,
                      "column": 4
                    },
                    "end": {
                      "line": 220,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_changedButtonState",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 224,
                      "column": 4
                    },
                    "end": {
                      "line": 228,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "ready",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 75,
                      "column": 4
                    },
                    "end": {
                      "line": 78,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  },
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "_focusBlurHandler",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 80,
                      "column": 4
                    },
                    "end": {
                      "line": 104,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "_disabledChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 106,
                      "column": 4
                    },
                    "end": {
                      "line": 125,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "disabled"
                    },
                    {
                      "name": "old"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "_changedControlState",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 127,
                      "column": 4
                    },
                    "end": {
                      "line": 132,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "_buttonStateChanged",
                  "description": "Ensures a `<paper-ripple>` element is available when the element is\nfocused.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "paper-ripple-behavior.html",
                    "start": {
                      "line": 44,
                      "column": 4
                    },
                    "end": {
                      "line": 48,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.PaperRippleBehavior"
                },
                {
                  "name": "ensureRipple",
                  "description": "Ensures this element contains a ripple effect. For startup efficiency\nthe ripple effect is dynamically on demand when needed.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "paper-ripple-behavior.html",
                    "start": {
                      "line": 67,
                      "column": 4
                    },
                    "end": {
                      "line": 86,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "optTriggeringEvent",
                      "type": "!Event=",
                      "description": "(optional) event that triggered the\nripple."
                    }
                  ],
                  "inheritedFrom": "Polymer.PaperRippleBehavior"
                },
                {
                  "name": "getRipple",
                  "description": "Returns the `<paper-ripple>` element used by this element to create\nripple effects. The element's ripple is created on demand, when\nnecessary, and calling this method will force the\nripple to be created.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "paper-ripple-behavior.html",
                    "start": {
                      "line": 94,
                      "column": 4
                    },
                    "end": {
                      "line": 97,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.PaperRippleBehavior"
                },
                {
                  "name": "hasRipple",
                  "description": "Returns true if this element currently contains a ripple effect.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "paper-ripple-behavior.html",
                    "start": {
                      "line": 103,
                      "column": 4
                    },
                    "end": {
                      "line": 105,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "boolean"
                  },
                  "inheritedFrom": "Polymer.PaperRippleBehavior"
                },
                {
                  "name": "_createRipple",
                  "description": "Create the element's ripple effect via creating a `<paper-ripple>`.\nOverride this method to customize the ripple element.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "paper-ripple-behavior.html",
                    "start": {
                      "line": 112,
                      "column": 4
                    },
                    "end": {
                      "line": 116,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "!PaperRippleElement",
                    "desc": "Returns a `<paper-ripple>` element."
                  },
                  "inheritedFrom": "Polymer.PaperRippleBehavior"
                },
                {
                  "name": "_noinkChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "paper-ripple-behavior.html",
                    "start": {
                      "line": 118,
                      "column": 4
                    },
                    "end": {
                      "line": 122,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "noink"
                    }
                  ],
                  "inheritedFrom": "Polymer.PaperRippleBehavior"
                },
                {
                  "name": "_calculateElevation",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 37,
                      "column": 4
                    },
                    "end": {
                      "line": 47,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_computeKeyboardClass",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 49,
                      "column": 4
                    },
                    "end": {
                      "line": 51,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "receivedFocusFromKeyboard"
                    }
                  ]
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 16,
                  "column": 2
                },
                "end": {
                  "line": 79,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "Polymer.PaperButtonBehavior",
              "attributes": [
                {
                  "name": "key-event-target",
                  "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 277,
                      "column": 6
                    },
                    "end": {
                      "line": 282,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "?EventTarget",
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "stop-keyboard-event-propagation",
                  "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 288,
                      "column": 6
                    },
                    "end": {
                      "line": 288,
                      "column": 65
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "pressed",
                  "description": "If true, the user is currently holding down the button.",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 27,
                      "column": 6
                    },
                    "end": {
                      "line": 33,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "toggles",
                  "description": "If true, the button toggles the active state with each tap or press\nof the spacebar.",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 39,
                      "column": 6
                    },
                    "end": {
                      "line": 43,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "active",
                  "description": "If true, the button is a toggle and is currently in the active state.",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 48,
                      "column": 6
                    },
                    "end": {
                      "line": 53,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "pointer-down",
                  "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 60,
                      "column": 6
                    },
                    "end": {
                      "line": 64,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "received-focus-from-keyboard",
                  "description": "True if the input device that caused the element to receive focus\nwas a keyboard.",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 70,
                      "column": 6
                    },
                    "end": {
                      "line": 73,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "aria-active-attribute",
                  "description": "The aria attribute to be set if the button is a toggle and in the\nactive state.",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 79,
                      "column": 6
                    },
                    "end": {
                      "line": 83,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "focused",
                  "description": "If true, the element currently has focus.",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 25,
                      "column": 6
                    },
                    "end": {
                      "line": 31,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "disabled",
                  "description": "If true, the user cannot interact with this element.",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 36,
                      "column": 6
                    },
                    "end": {
                      "line": 42,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "noink",
                  "description": "If true, the element will not produce a ripple effect when interacted\nwith via the pointer.",
                  "sourceRange": {
                    "file": "paper-ripple-behavior.html",
                    "start": {
                      "line": 30,
                      "column": 6
                    },
                    "end": {
                      "line": 30,
                      "column": 55
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.PaperRippleBehavior"
                },
                {
                  "name": "elevation",
                  "description": "The z-depth of this element, from 0-5. Setting to 0 will remove the\nshadow, and each increasing number greater than 0 will be \"deeper\"\nthan the last.",
                  "sourceRange": {
                    "start": {
                      "line": 27,
                      "column": 6
                    },
                    "end": {
                      "line": 27,
                      "column": 73
                    }
                  },
                  "metadata": {},
                  "type": "number"
                }
              ],
              "events": [
                {
                  "type": "CustomEvent",
                  "name": "active-changed",
                  "description": "Fired when the `active` property changes.",
                  "metadata": {},
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "type": "CustomEvent",
                  "name": "focused-changed",
                  "description": "Fired when the `focused` property changes.",
                  "metadata": {},
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "type": "CustomEvent",
                  "name": "disabled-changed",
                  "description": "Fired when the `disabled` property changes.",
                  "metadata": {},
                  "inheritedFrom": "Polymer.IronControlState"
                }
              ],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "Use `Polymer.PaperCheckedElementBehavior` to implement a custom element\nthat has a `checked` property similar to `Polymer.IronCheckedElementBehavior`\nand is compatible with having a ripple effect.",
              "summary": "",
              "path": "components\\paper-behaviors\\paper-checked-element-behavior.html",
              "properties": [
                {
                  "name": "keyEventTarget",
                  "type": "?EventTarget",
                  "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 277,
                      "column": 6
                    },
                    "end": {
                      "line": 282,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "stopKeyboardEventPropagation",
                  "type": "boolean",
                  "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 288,
                      "column": 6
                    },
                    "end": {
                      "line": 288,
                      "column": 65
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_boundKeyHandlers",
                  "type": "Array",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 290,
                      "column": 6
                    },
                    "end": {
                      "line": 295,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "[]",
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_imperativeKeyBindings",
                  "type": "Object",
                  "description": "own properties of everything on the \"prototype\".",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 299,
                      "column": 6
                    },
                    "end": {
                      "line": 304,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "{}",
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "keyBindings",
                  "type": "!Object",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 100,
                      "column": 4
                    },
                    "end": {
                      "line": 104,
                      "column": 5
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "pressed",
                  "type": "boolean",
                  "description": "If true, the user is currently holding down the button.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 27,
                      "column": 6
                    },
                    "end": {
                      "line": 33,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "observer": "\"_pressedChanged\"",
                      "readOnly": true
                    }
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "toggles",
                  "type": "boolean",
                  "description": "If true, the button toggles the active state with each tap or press\nof the spacebar.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-checked-element-behavior\\iron-checked-element-behavior.html",
                    "start": {
                      "line": 48,
                      "column": 6
                    },
                    "end": {
                      "line": 48,
                      "column": 69
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "true",
                  "inheritedFrom": "Polymer.IronCheckedElementBehavior"
                },
                {
                  "name": "active",
                  "type": "boolean",
                  "description": "If true, the button is a toggle and is currently in the active state.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 48,
                      "column": 6
                    },
                    "end": {
                      "line": 53,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true
                    }
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "pointerDown",
                  "type": "boolean",
                  "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 60,
                      "column": 6
                    },
                    "end": {
                      "line": 64,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true
                    }
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "receivedFocusFromKeyboard",
                  "type": "boolean",
                  "description": "True if the input device that caused the element to receive focus\nwas a keyboard.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 70,
                      "column": 6
                    },
                    "end": {
                      "line": 73,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true
                    }
                  },
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "ariaActiveAttribute",
                  "type": "string",
                  "description": "The aria attribute to be set if the button is a toggle and in the\nactive state.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 79,
                      "column": 6
                    },
                    "end": {
                      "line": 83,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "observer": "\"_ariaActiveAttributeChanged\""
                    }
                  },
                  "defaultValue": "\"aria-pressed\"",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_mouseEventRe",
                  "type": "object",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 106,
                      "column": 4
                    },
                    "end": {
                      "line": 106,
                      "column": 27
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "focused",
                  "type": "boolean",
                  "description": "If true, the element currently has focus.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 25,
                      "column": 6
                    },
                    "end": {
                      "line": 31,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "readOnly": true
                    }
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "disabled",
                  "type": "boolean",
                  "description": "If true, the user cannot interact with this element.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 36,
                      "column": 6
                    },
                    "end": {
                      "line": 42,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "observer": "\"_disabledChanged\""
                    }
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "_oldTabIndex",
                  "type": "(?string | undefined)",
                  "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 49,
                      "column": 6
                    },
                    "end": {
                      "line": 51,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "_boundFocusBlurHandler",
                  "type": "Function",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 53,
                      "column": 6
                    },
                    "end": {
                      "line": 58,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "__handleEventRetargeting",
                  "type": "boolean",
                  "description": "",
                  "privacy": "private",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 60,
                      "column": 6
                    },
                    "end": {
                      "line": 65,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "noink",
                  "type": "boolean",
                  "description": "If true, the element will not produce a ripple effect when interacted\nwith via the pointer.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "paper-ripple-behavior.html",
                    "start": {
                      "line": 30,
                      "column": 6
                    },
                    "end": {
                      "line": 30,
                      "column": 55
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "observer": "\"_noinkChanged\""
                    }
                  },
                  "inheritedFrom": "Polymer.PaperRippleBehavior"
                },
                {
                  "name": "_rippleContainer",
                  "type": "(Element | undefined)",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "paper-ripple-behavior.html",
                    "start": {
                      "line": 35,
                      "column": 6
                    },
                    "end": {
                      "line": 37,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.PaperRippleBehavior"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "The name of this element.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
                    "start": {
                      "line": 40,
                      "column": 6
                    },
                    "end": {
                      "line": 42,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronFormElementBehavior"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Overriden from Polymer.IronFormElementBehavior",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-checked-element-behavior\\iron-checked-element-behavior.html",
                    "start": {
                      "line": 51,
                      "column": 6
                    },
                    "end": {
                      "line": 51,
                      "column": 67
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "observer": "\"_valueChanged\""
                    }
                  },
                  "defaultValue": "\"on\"",
                  "inheritedFrom": "Polymer.IronCheckedElementBehavior"
                },
                {
                  "name": "required",
                  "type": "boolean",
                  "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
                    "start": {
                      "line": 61,
                      "column": 6
                    },
                    "end": {
                      "line": 64,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronFormElementBehavior"
                },
                {
                  "name": "_parentForm",
                  "type": "Object",
                  "description": "The form that the element is registered to.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
                    "start": {
                      "line": 69,
                      "column": 6
                    },
                    "end": {
                      "line": 71,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronFormElementBehavior"
                },
                {
                  "name": "validator",
                  "type": "string",
                  "description": "Name of the validator to use.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
                    "start": {
                      "line": 49,
                      "column": 6
                    },
                    "end": {
                      "line": 51,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {}
                  },
                  "inheritedFrom": "Polymer.IronValidatableBehavior"
                },
                {
                  "name": "invalid",
                  "type": "boolean",
                  "description": "True if the last call to `validate` is invalid.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
                    "start": {
                      "line": 56,
                      "column": 6
                    },
                    "end": {
                      "line": 62,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "observer": "\"_invalidChanged\""
                    }
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronValidatableBehavior"
                },
                {
                  "name": "checked",
                  "type": "boolean",
                  "description": "Gets or sets the state, `true` is checked and `false` is unchecked.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-checked-element-behavior\\iron-checked-element-behavior.html",
                    "start": {
                      "line": 36,
                      "column": 6
                    },
                    "end": {
                      "line": 42,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "observer": "\"_checkedChanged\""
                    }
                  },
                  "defaultValue": "false",
                  "inheritedFrom": "Polymer.IronCheckedElementBehavior"
                }
              ],
              "methods": [
                {
                  "name": "registered",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
                    "start": {
                      "line": 65,
                      "column": 4
                    },
                    "end": {
                      "line": 67,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronValidatableBehavior"
                },
                {
                  "name": "attached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
                    "start": {
                      "line": 74,
                      "column": 4
                    },
                    "end": {
                      "line": 80,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronFormElementBehavior"
                },
                {
                  "name": "detached",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
                    "start": {
                      "line": 82,
                      "column": 4
                    },
                    "end": {
                      "line": 86,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronFormElementBehavior"
                },
                {
                  "name": "addOwnKeyBinding",
                  "description": "Can be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 337,
                      "column": 4
                    },
                    "end": {
                      "line": 341,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "eventString",
                      "type": "string"
                    },
                    {
                      "name": "handlerName",
                      "type": "string"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "removeOwnKeyBindings",
                  "description": "When called, will remove all imperatively-added key bindings.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 346,
                      "column": 4
                    },
                    "end": {
                      "line": 350,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "keyboardEventMatchesKeys",
                  "description": "Returns true if a keyboard event matches `eventString`.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 359,
                      "column": 4
                    },
                    "end": {
                      "line": 367,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event",
                      "type": "KeyboardEvent"
                    },
                    {
                      "name": "eventString",
                      "type": "string"
                    }
                  ],
                  "return": {
                    "type": "boolean"
                  },
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_collectKeyBindings",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 369,
                      "column": 4
                    },
                    "end": {
                      "line": 379,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_prepKeyBindings",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 381,
                      "column": 4
                    },
                    "end": {
                      "line": 403,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_addKeyBinding",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 405,
                      "column": 4
                    },
                    "end": {
                      "line": 412,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "eventString"
                    },
                    {
                      "name": "handlerName"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_resetKeyEventListeners",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 414,
                      "column": 4
                    },
                    "end": {
                      "line": 420,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_listenKeyEventListeners",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 422,
                      "column": 4
                    },
                    "end": {
                      "line": 435,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_unlistenKeyEventListeners",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 437,
                      "column": 4
                    },
                    "end": {
                      "line": 452,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_onKeyBindingEvent",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 454,
                      "column": 4
                    },
                    "end": {
                      "line": 475,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "keyBindings"
                    },
                    {
                      "name": "event"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_triggerKeyHandler",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 477,
                      "column": 4
                    },
                    "end": {
                      "line": 486,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "keyCombo"
                    },
                    {
                      "name": "handlerName"
                    },
                    {
                      "name": "keyboardEvent"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "_tapHandler",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 108,
                      "column": 4
                    },
                    "end": {
                      "line": 115,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_focusChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 117,
                      "column": 4
                    },
                    "end": {
                      "line": 123,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "focused"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_detectKeyboardFocus",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 125,
                      "column": 4
                    },
                    "end": {
                      "line": 127,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "focused"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_userActivate",
                  "description": "'change' events",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 131,
                      "column": 4
                    },
                    "end": {
                      "line": 136,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "active"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_downHandler",
                  "description": "In addition to the functionality provided in `IronButtonState`, ensures\na ripple effect is created when the element is in a `pressed` state.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "paper-ripple-behavior.html",
                    "start": {
                      "line": 54,
                      "column": 4
                    },
                    "end": {
                      "line": 59,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event"
                    }
                  ],
                  "inheritedFrom": "Polymer.PaperRippleBehavior"
                },
                {
                  "name": "_upHandler",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 144,
                      "column": 4
                    },
                    "end": {
                      "line": 147,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_spaceKeyDownHandler",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 152,
                      "column": 4
                    },
                    "end": {
                      "line": 164,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event",
                      "type": "!KeyboardEvent",
                      "description": "."
                    }
                  ],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_spaceKeyUpHandler",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 169,
                      "column": 4
                    },
                    "end": {
                      "line": 182,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event",
                      "type": "!KeyboardEvent",
                      "description": "."
                    }
                  ],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_asyncClick",
                  "description": "event handler to unwind before triggering another event",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 186,
                      "column": 4
                    },
                    "end": {
                      "line": 190,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_pressedChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 194,
                      "column": 4
                    },
                    "end": {
                      "line": 196,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "pressed"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_ariaActiveAttributeChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 198,
                      "column": 4
                    },
                    "end": {
                      "line": 202,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "oldValue"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_activeChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 204,
                      "column": 4
                    },
                    "end": {
                      "line": 212,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "active"
                    },
                    {
                      "name": "ariaActiveAttribute"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_controlStateChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 214,
                      "column": 4
                    },
                    "end": {
                      "line": 220,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "_changedButtonState",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 224,
                      "column": 4
                    },
                    "end": {
                      "line": 228,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "ready",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 75,
                      "column": 4
                    },
                    "end": {
                      "line": 78,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  },
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "_focusBlurHandler",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 80,
                      "column": 4
                    },
                    "end": {
                      "line": 104,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "event"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "_disabledChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 106,
                      "column": 4
                    },
                    "end": {
                      "line": 125,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "disabled"
                    },
                    {
                      "name": "old"
                    }
                  ],
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "_changedControlState",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 127,
                      "column": 4
                    },
                    "end": {
                      "line": 132,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "_buttonStateChanged",
                  "description": "Synchronizes the element's `active` and `checked` state.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 39,
                      "column": 4
                    },
                    "end": {
                      "line": 47,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "ensureRipple",
                  "description": "Ensures this element contains a ripple effect. For startup efficiency\nthe ripple effect is dynamically on demand when needed.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "paper-ripple-behavior.html",
                    "start": {
                      "line": 67,
                      "column": 4
                    },
                    "end": {
                      "line": 86,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "optTriggeringEvent",
                      "type": "!Event=",
                      "description": "(optional) event that triggered the\nripple."
                    }
                  ],
                  "inheritedFrom": "Polymer.PaperRippleBehavior"
                },
                {
                  "name": "getRipple",
                  "description": "Returns the `<paper-ripple>` element used by this element to create\nripple effects. The element's ripple is created on demand, when\nnecessary, and calling this method will force the\nripple to be created.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "paper-ripple-behavior.html",
                    "start": {
                      "line": 94,
                      "column": 4
                    },
                    "end": {
                      "line": 97,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.PaperRippleBehavior"
                },
                {
                  "name": "hasRipple",
                  "description": "Returns true if this element currently contains a ripple effect.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "paper-ripple-behavior.html",
                    "start": {
                      "line": 103,
                      "column": 4
                    },
                    "end": {
                      "line": 105,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "boolean"
                  },
                  "inheritedFrom": "Polymer.PaperRippleBehavior"
                },
                {
                  "name": "_createRipple",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "paper-inky-focus-behavior.html",
                    "start": {
                      "line": 33,
                      "column": 4
                    },
                    "end": {
                      "line": 39,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.PaperInkyFocusBehavior"
                },
                {
                  "name": "_noinkChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "paper-ripple-behavior.html",
                    "start": {
                      "line": 118,
                      "column": 4
                    },
                    "end": {
                      "line": 122,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "noink"
                    }
                  ],
                  "inheritedFrom": "Polymer.PaperRippleBehavior"
                },
                {
                  "name": "_focusedChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "paper-inky-focus-behavior.html",
                    "start": {
                      "line": 24,
                      "column": 4
                    },
                    "end": {
                      "line": 31,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "receivedFocusFromKeyboard"
                    }
                  ],
                  "inheritedFrom": "Polymer.PaperInkyFocusBehavior"
                },
                {
                  "name": "_invalidChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
                    "start": {
                      "line": 69,
                      "column": 4
                    },
                    "end": {
                      "line": 75,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronValidatableBehavior"
                },
                {
                  "name": "_validator",
                  "description": "Recompute this every time it's needed, because we don't know if the\nunderlying IronValidatableBehaviorMeta has changed.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
                    "start": {
                      "line": 79,
                      "column": 4
                    },
                    "end": {
                      "line": 82,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronValidatableBehavior"
                },
                {
                  "name": "hasValidator",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
                    "start": {
                      "line": 87,
                      "column": 4
                    },
                    "end": {
                      "line": 89,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "boolean",
                    "desc": "True if the validator `validator` exists."
                  },
                  "inheritedFrom": "Polymer.IronValidatableBehavior"
                },
                {
                  "name": "validate",
                  "description": "Returns true if the `value` is valid, and updates `invalid`. If you want\nyour element to have custom validation logic, do not override this method;\noverride `_getValidity(value)` instead.",
                  "privacy": "public",
                  "sourceRange": {
                    "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
                    "start": {
                      "line": 102,
                      "column": 4
                    },
                    "end": {
                      "line": 110,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "value",
                      "type": "Object",
                      "description": "Deprecated: The value to be validated. By default,\nit is passed to the validator's `validate()` function, if a validator is set.\nIf this argument is not specified, then the element's `value` property\nis used, if it exists."
                    }
                  ],
                  "return": {
                    "type": "boolean",
                    "desc": "True if `value` is valid."
                  },
                  "inheritedFrom": "Polymer.IronValidatableBehavior"
                },
                {
                  "name": "_getValidity",
                  "description": "Returns false if the element is required and not checked, and true\notherwise.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-checked-element-behavior\\iron-checked-element-behavior.html",
                    "start": {
                      "line": 69,
                      "column": 4
                    },
                    "end": {
                      "line": 71,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "_value",
                      "type": "*=",
                      "description": "Ignored."
                    }
                  ],
                  "return": {
                    "type": "boolean",
                    "desc": "true if `required` is false or if `checked` is true."
                  },
                  "inheritedFrom": "Polymer.IronCheckedElementBehavior"
                },
                {
                  "name": "created",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-checked-element-behavior\\iron-checked-element-behavior.html",
                    "start": {
                      "line": 56,
                      "column": 4
                    },
                    "end": {
                      "line": 61,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronCheckedElementBehavior"
                },
                {
                  "name": "_requiredChanged",
                  "description": "Update the aria-required label when `required` is changed.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-checked-element-behavior\\iron-checked-element-behavior.html",
                    "start": {
                      "line": 76,
                      "column": 4
                    },
                    "end": {
                      "line": 82,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronCheckedElementBehavior"
                },
                {
                  "name": "_checkedChanged",
                  "description": "Synchronizes the element's checked state with its ripple effect.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 25,
                      "column": 4
                    },
                    "end": {
                      "line": 34,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "_valueChanged",
                  "description": "Reset value to 'on' if it is set to `undefined`.",
                  "privacy": "protected",
                  "sourceRange": {
                    "file": "..\\iron-checked-element-behavior\\iron-checked-element-behavior.html",
                    "start": {
                      "line": 95,
                      "column": 4
                    },
                    "end": {
                      "line": 99,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "inheritedFrom": "Polymer.IronCheckedElementBehavior"
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 21,
                  "column": 2
                },
                "end": {
                  "line": 48,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "Polymer.PaperCheckedElementBehavior",
              "attributes": [
                {
                  "name": "key-event-target",
                  "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 277,
                      "column": 6
                    },
                    "end": {
                      "line": 282,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "?EventTarget",
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "stop-keyboard-event-propagation",
                  "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
                  "sourceRange": {
                    "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
                    "start": {
                      "line": 288,
                      "column": 6
                    },
                    "end": {
                      "line": 288,
                      "column": 65
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronA11yKeysBehavior"
                },
                {
                  "name": "pressed",
                  "description": "If true, the user is currently holding down the button.",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 27,
                      "column": 6
                    },
                    "end": {
                      "line": 33,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "toggles",
                  "description": "If true, the button toggles the active state with each tap or press\nof the spacebar.",
                  "sourceRange": {
                    "file": "..\\iron-checked-element-behavior\\iron-checked-element-behavior.html",
                    "start": {
                      "line": 48,
                      "column": 6
                    },
                    "end": {
                      "line": 48,
                      "column": 69
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronCheckedElementBehavior"
                },
                {
                  "name": "active",
                  "description": "If true, the button is a toggle and is currently in the active state.",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 48,
                      "column": 6
                    },
                    "end": {
                      "line": 53,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "pointer-down",
                  "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 60,
                      "column": 6
                    },
                    "end": {
                      "line": 64,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "received-focus-from-keyboard",
                  "description": "True if the input device that caused the element to receive focus\nwas a keyboard.",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 70,
                      "column": 6
                    },
                    "end": {
                      "line": 73,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "aria-active-attribute",
                  "description": "The aria attribute to be set if the button is a toggle and in the\nactive state.",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-button-state.html",
                    "start": {
                      "line": 79,
                      "column": 6
                    },
                    "end": {
                      "line": 83,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string",
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "name": "focused",
                  "description": "If true, the element currently has focus.",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 25,
                      "column": 6
                    },
                    "end": {
                      "line": 31,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "disabled",
                  "description": "If true, the user cannot interact with this element.",
                  "sourceRange": {
                    "file": "..\\iron-behaviors\\iron-control-state.html",
                    "start": {
                      "line": 36,
                      "column": 6
                    },
                    "end": {
                      "line": 42,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "name": "noink",
                  "description": "If true, the element will not produce a ripple effect when interacted\nwith via the pointer.",
                  "sourceRange": {
                    "file": "paper-ripple-behavior.html",
                    "start": {
                      "line": 30,
                      "column": 6
                    },
                    "end": {
                      "line": 30,
                      "column": 55
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.PaperRippleBehavior"
                },
                {
                  "name": "name",
                  "description": "The name of this element.",
                  "sourceRange": {
                    "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
                    "start": {
                      "line": 40,
                      "column": 6
                    },
                    "end": {
                      "line": 42,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string",
                  "inheritedFrom": "Polymer.IronFormElementBehavior"
                },
                {
                  "name": "value",
                  "description": "Overriden from Polymer.IronFormElementBehavior",
                  "sourceRange": {
                    "file": "..\\iron-checked-element-behavior\\iron-checked-element-behavior.html",
                    "start": {
                      "line": 51,
                      "column": 6
                    },
                    "end": {
                      "line": 51,
                      "column": 67
                    }
                  },
                  "metadata": {},
                  "type": "string",
                  "inheritedFrom": "Polymer.IronCheckedElementBehavior"
                },
                {
                  "name": "required",
                  "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.",
                  "sourceRange": {
                    "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
                    "start": {
                      "line": 61,
                      "column": 6
                    },
                    "end": {
                      "line": 64,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronFormElementBehavior"
                },
                {
                  "name": "validator",
                  "description": "Name of the validator to use.",
                  "sourceRange": {
                    "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
                    "start": {
                      "line": 49,
                      "column": 6
                    },
                    "end": {
                      "line": 51,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "string",
                  "inheritedFrom": "Polymer.IronValidatableBehavior"
                },
                {
                  "name": "invalid",
                  "description": "True if the last call to `validate` is invalid.",
                  "sourceRange": {
                    "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
                    "start": {
                      "line": 56,
                      "column": 6
                    },
                    "end": {
                      "line": 62,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronValidatableBehavior"
                },
                {
                  "name": "checked",
                  "description": "Gets or sets the state, `true` is checked and `false` is unchecked.",
                  "sourceRange": {
                    "file": "..\\iron-checked-element-behavior\\iron-checked-element-behavior.html",
                    "start": {
                      "line": 36,
                      "column": 6
                    },
                    "end": {
                      "line": 42,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "type": "boolean",
                  "inheritedFrom": "Polymer.IronCheckedElementBehavior"
                }
              ],
              "events": [
                {
                  "type": "CustomEvent",
                  "name": "active-changed",
                  "description": "Fired when the `active` property changes.",
                  "metadata": {},
                  "inheritedFrom": "Polymer.IronButtonState"
                },
                {
                  "type": "CustomEvent",
                  "name": "focused-changed",
                  "description": "Fired when the `focused` property changes.",
                  "metadata": {},
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "type": "CustomEvent",
                  "name": "disabled-changed",
                  "description": "Fired when the `disabled` property changes.",
                  "metadata": {},
                  "inheritedFrom": "Polymer.IronControlState"
                },
                {
                  "type": "CustomEvent",
                  "name": "iron-form-element-register",
                  "description": "iron-form-element-register",
                  "metadata": {},
                  "inheritedFrom": "Polymer.IronFormElementBehavior"
                },
                {
                  "type": "CustomEvent",
                  "name": "iron-form-element-unregister",
                  "description": "iron-form-element-unregister",
                  "metadata": {},
                  "inheritedFrom": "Polymer.IronFormElementBehavior"
                },
                {
                  "type": "CustomEvent",
                  "name": "value-changed",
                  "description": "Fired when the `value` property changes.",
                  "metadata": {},
                  "inheritedFrom": "Polymer.IronFormElementBehavior"
                },
                {
                  "type": "CustomEvent",
                  "name": "invalid-changed",
                  "description": "Fired when the `invalid` property changes.",
                  "metadata": {},
                  "inheritedFrom": "Polymer.IronValidatableBehavior"
                },
                {
                  "type": "CustomEvent",
                  "name": "iron-change",
                  "description": "iron-change",
                  "metadata": {},
                  "inheritedFrom": "Polymer.IronCheckedElementBehavior"
                },
                {
                  "type": "CustomEvent",
                  "name": "checked-changed",
                  "description": "Fired when the `checked` property changes.",
                  "metadata": {},
                  "inheritedFrom": "Polymer.IronCheckedElementBehavior"
                }
              ],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            }
          ]
        }
      },
      "classes": [
        {
          "description": "",
          "summary": "Collapse multiple callbacks into one invocation after a timer.",
          "path": "components\\polymer\\lib\\utils\\debounce.html",
          "properties": [],
          "methods": [
            {
              "name": "setConfig",
              "description": "Sets the scheduler; that is, a module with the Async interface,\na callback and optional arguments to be passed to the run function\nfrom the async module.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 36,
                  "column": 4
                },
                "end": {
                  "line": 43,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "asyncModule",
                  "type": "!AsyncInterface",
                  "description": "Object with Async interface."
                },
                {
                  "name": "callback",
                  "type": "function ()",
                  "description": "Callback to run."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "cancel",
              "description": "Cancels an active debouncer and returns a reference to itself.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 49,
                  "column": 4
                },
                "end": {
                  "line": 54,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "flush",
              "description": "Flushes an active debouncer and returns a reference to itself.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 60,
                  "column": 4
                },
                "end": {
                  "line": 65,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "isActive",
              "description": "Returns true if the debouncer is active.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 71,
                  "column": 4
                },
                "end": {
                  "line": 73,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "boolean",
                "desc": "True if active."
              }
            }
          ],
          "staticMethods": [
            {
              "name": "debounce",
              "description": "Creates a debouncer if no debouncer is passed as a parameter\nor it cancels an active debouncer otherwise. The following\nexample shows how a debouncer can be called multiple times within a\nmicrotask and \"debounced\" such that the provided callback function is\ncalled once. Add this method to a custom element:\n\n_debounceWork() {\n  this._debounceJob = Polymer.Debouncer.debounce(this._debounceJob,\n      Polymer.Async.microTask, () => {\n    this._doWork();\n  });\n}\n\nIf the `_debounceWork` method is called multiple times within the same\nmicrotask, the `_doWork` function will be called only once at the next\nmicrotask checkpoint.\n\nNote: In testing it is often convenient to avoid asynchrony. To accomplish\nthis with a debouncer, you can use `Polymer.enqueueDebouncer` and\n`Polymer.flush`. For example, extend the above example by adding\n`Polymer.enqueueDebouncer(this._debounceJob)` at the end of the\n`_debounceWork` method. Then in a test, call `Polymer.flush` to ensure\nthe debouncer has completed.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 104,
                  "column": 4
                },
                "end": {
                  "line": 112,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "debouncer",
                  "type": "Debouncer?",
                  "description": "Debouncer object."
                },
                {
                  "name": "asyncModule",
                  "type": "!AsyncInterface",
                  "description": "Object with Async interface"
                },
                {
                  "name": "callback",
                  "type": "function ()",
                  "description": "Callback to run."
                }
              ],
              "return": {
                "type": "!Debouncer",
                "desc": "Returns a debouncer object."
              }
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 21,
              "column": 2
            },
            "end": {
              "line": 113,
              "column": 3
            }
          },
          "privacy": "public",
          "name": "Polymer.Debouncer"
        },
        {
          "description": "Class that listens for changes (additions or removals) to\n\"flattened nodes\" on a given `node`. The list of flattened nodes consists\nof a node's children and, for any children that are `<slot>` elements,\nthe expanded flattened list of `assignedNodes`.\nFor example, if the observed node has children `<a></a><slot></slot><b></b>`\nand the `<slot>` has one `<div>` assigned to it, then the flattened\nnodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n`<slot>` elements assigned to it, these are flattened as well.\n\nThe provided `callback` is called whenever any change to this list\nof flattened nodes occurs, where an addition or removal of a node is\nconsidered a change. The `callback` is called with one argument, an object\ncontaining an array of any `addedNodes` and `removedNodes`.\n\nNote: the callback is called asynchronous to any changes\nat a microtask checkpoint. This is because observation is performed using\n`MutationObserver` and the `<slot>` element's `slotchange` event which\nare asynchronous.\n\nAn example:\n```js\nclass TestSelfObserve extends Polymer.Element {\n  static get is() { return 'test-self-observe';}\n  connectedCallback() {\n    super.connectedCallback();\n    this._observer = new Polymer.FlattenedNodesObserver(this, (info) => {\n      this.info = info;\n    });\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this._observer.disconnect();\n  }\n}\ncustomElements.define(TestSelfObserve.is, TestSelfObserve);\n```",
          "summary": "Class that listens for changes (additions or removals) to\n\"flattened nodes\" on a given `node`.",
          "path": "components\\polymer\\lib\\utils\\flattened-nodes-observer.html",
          "properties": [
            {
              "name": "_shadyChildrenObserver",
              "type": "MutationObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 108,
                  "column": 6
                },
                "end": {
                  "line": 108,
                  "column": 33
                }
              },
              "metadata": {},
              "defaultValue": "null"
            },
            {
              "name": "_nativeChildrenObserver",
              "type": "MutationObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 113,
                  "column": 6
                },
                "end": {
                  "line": 113,
                  "column": 34
                }
              },
              "metadata": {},
              "defaultValue": "null"
            },
            {
              "name": "_target",
              "type": "Element",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 119,
                  "column": 6
                },
                "end": {
                  "line": 119,
                  "column": 18
                }
              },
              "metadata": {},
              "defaultValue": "target"
            },
            {
              "name": "_boundSchedule",
              "type": "function ()",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 128,
                  "column": 25
                }
              },
              "metadata": {},
              "defaultValue": "() => {\n    this._schedule();\n}"
            }
          ],
          "methods": [
            {
              "name": "connect",
              "description": "Activates an observer. This method is automatically called when\na `FlattenedNodesObserver` is created. It should only be called to\nre-activate an observer that has been deactivated via the `disconnect` method.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 142,
                  "column": 4
                },
                "end": {
                  "line": 161,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "disconnect",
              "description": "Deactivates the flattened nodes observer. After calling this method\nthe observer callback will not be called when changes to flattened nodes\noccur. The `connect` method may be subsequently called to reactivate\nthe observer.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 171,
                  "column": 4
                },
                "end": {
                  "line": 185,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_schedule",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 191,
                  "column": 4
                },
                "end": {
                  "line": 196,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_processMutations",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 203,
                  "column": 4
                },
                "end": {
                  "line": 206,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "mutations",
                  "type": "Array.<MutationRecord>",
                  "description": "Mutations signaled by the mutation observer"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_processSlotMutations",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 213,
                  "column": 4
                },
                "end": {
                  "line": 225,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "mutations",
                  "type": "Array.<MutationRecord>",
                  "description": "Mutations signaled by the mutation observer"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "flush",
              "description": "Flushes the observer causing any pending changes to be immediately\ndelivered the observer callback. By default these changes are delivered\nasynchronously at the next microtask checkpoint.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 235,
                  "column": 4
                },
                "end": {
                  "line": 276,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "boolean",
                "desc": "Returns true if any pending changes caused the observer\ncallback to run."
              }
            },
            {
              "name": "_listenSlots",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 283,
                  "column": 4
                },
                "end": {
                  "line": 290,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "nodeList",
                  "type": "(!Array.<(Element | Node)> | !NodeList.<Node>)",
                  "description": "Nodes that could change"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_unlistenSlots",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 297,
                  "column": 4
                },
                "end": {
                  "line": 304,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "nodeList",
                  "type": "(!Array.<(Element | Node)> | !NodeList.<Node>)",
                  "description": "Nodes that could change"
                }
              ],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [
            {
              "name": "getFlattenedNodes",
              "description": "Returns the list of flattened nodes for the given `node`.\nThis list consists of a node's children and, for any children\nthat are `<slot>` elements, the expanded flattened list of `assignedNodes`.\nFor example, if the observed node has children `<a></a><slot></slot><b></b>`\nand the `<slot>` has one `<div>` assigned to it, then the flattened\nnodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n`<slot>` elements assigned to it, these are flattened as well.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 82,
                  "column": 4
                },
                "end": {
                  "line": 96,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "(HTMLElement | HTMLSlotElement)",
                  "description": "The node for which to return the list of flattened nodes."
                }
              ],
              "return": {
                "type": "Array",
                "desc": "The list of flattened nodes for the given `node`."
              }
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 68,
              "column": 2
            },
            "end": {
              "line": 306,
              "column": 3
            }
          },
          "privacy": "public",
          "name": "Polymer.FlattenedNodesObserver"
        },
        {
          "description": "Node API wrapper class returned from `Polymer.dom.(target)` when\n`target` is a `Node`.",
          "summary": "",
          "path": "components\\polymer\\lib\\legacy\\polymer.dom.html",
          "properties": [],
          "methods": [
            {
              "name": "observeNodes",
              "description": "Returns an instance of `Polymer.FlattenedNodesObserver` that\nlistens for node changes on this element.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 61,
                  "column": 4
                },
                "end": {
                  "line": 63,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "callback",
                  "type": "function (!Element, {target: !Element, addedNodes: !Array.<!Element>, removedNodes: !Array.<!Element>}): void",
                  "description": "Called when direct or distributed children\n  of this element changes"
                }
              ],
              "return": {
                "type": "!Polymer.FlattenedNodesObserver",
                "desc": "Observer instance"
              }
            },
            {
              "name": "unobserveNodes",
              "description": "Disconnects an observer previously created via `observeNodes`",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 72,
                  "column": 4
                },
                "end": {
                  "line": 74,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "observerHandle",
                  "type": "!Polymer.FlattenedNodesObserver",
                  "description": "Observer instance\n  to disconnect."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "notifyObserver",
              "description": "Provided as a backwards-compatible API only.  This method does nothing.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 80,
                  "column": 4
                },
                "end": {
                  "line": 80,
                  "column": 23
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "deepContains",
              "description": "Returns true if the provided node is contained with this element's\nlight-DOM children or shadow root, including any nested shadow roots\nof children therein.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 91,
                  "column": 4
                },
                "end": {
                  "line": 103,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to test"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the given `node` is contained within\n  this element's light or shadow DOM."
              }
            },
            {
              "name": "getOwnerRoot",
              "description": "Returns the root node of this node.  Equivalent to `getRoodNode()`.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 113,
                  "column": 4
                },
                "end": {
                  "line": 115,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "Node",
                "desc": "Top most element in the dom tree in which the node\nexists. If the node is connected to a document this is either a\nshadowRoot or the document; otherwise, it may be the node\nitself or a node or document fragment containing it."
              }
            },
            {
              "name": "getDistributedNodes",
              "description": "For slot elements, returns the nodes assigned to the slot; otherwise\nan empty array. It is equivalent to `<slot>.addignedNodes({flatten:true})`.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 123,
                  "column": 4
                },
                "end": {
                  "line": 127,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "!Array.<!Node>",
                "desc": "Array of assigned nodes"
              }
            },
            {
              "name": "getDestinationInsertionPoints",
              "description": "Returns an array of all slots this element was distributed to.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 134,
                  "column": 4
                },
                "end": {
                  "line": 142,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "!Array.<!HTMLSlotElement>",
                "desc": "Description"
              }
            },
            {
              "name": "importNode",
              "description": "Calls `importNode` on the `ownerDocument` for this node.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 152,
                  "column": 4
                },
                "end": {
                  "line": 156,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to import"
                },
                {
                  "name": "deep",
                  "type": "boolean",
                  "description": "True if the node should be cloned deeply during\n  import"
                }
              ],
              "return": {
                "type": "Node",
                "desc": "Clone of given node imported to this owner document"
              }
            },
            {
              "name": "getEffectiveChildNodes",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 162,
                  "column": 4
                },
                "end": {
                  "line": 164,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "!Array.<!Node>",
                "desc": "Returns a flattened list of all child nodes and\nnodes assigned to child slots."
              }
            },
            {
              "name": "queryDistributedElements",
              "description": "Returns a filtered list of flattened child elements for this element based\non the given selector.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 173,
                  "column": 4
                },
                "end": {
                  "line": 183,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selector",
                  "type": "string",
                  "description": "Selector to filter nodes against"
                }
              ],
              "return": {
                "type": "!Array.<!HTMLElement>",
                "desc": "List of flattened child elements"
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 2
            },
            "end": {
              "line": 195,
              "column": 3
            }
          },
          "privacy": "public",
          "name": "Polymer.DomApi"
        }
      ]
    },
    {
      "name": "Assert",
      "description": "### .isNotNaN\nAsserts that value is not NaN\n\n   assert.isNotNaN(4, '4 is not NaN');",
      "summary": "",
      "sourceRange": {
        "file": "components\\chai\\chai.js",
        "start": {
          "line": 2608,
          "column": 2
        },
        "end": {
          "line": 2610,
          "column": 4
        }
      }
    },
    {
      "name": "Utils",
      "description": "### .getPathValue(path, object)\n\nThis allows the retrieval of values in an\nobject given a string path.\n\n    var obj = {\n        prop1: {\n            arr: ['a', 'b', 'c']\n          , str: 'Hello'\n        }\n      , prop2: {\n            arr: [ { nested: 'Universe' } ]\n          , str: 'Hello again!'\n        }\n    }\n\nThe following would be the results.\n\n    getPathValue('prop1.str', obj); // Hello\n    getPathValue('prop1.att[2]', obj); // b\n    getPathValue('prop2.arr[0].nested', obj); // Universe",
      "summary": "",
      "sourceRange": {
        "file": "components\\chai\\chai.js",
        "start": {
          "line": 4605,
          "column": 0
        },
        "end": {
          "line": 4608,
          "column": 2
        }
      }
    }
  ],
  "elements": [
    {
      "description": "",
      "summary": "",
      "path": "components\\polymer\\lib\\utils\\templatize.html",
      "properties": [
        {
          "name": "__dataClientsReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1147,
              "column": 8
            },
            "end": {
              "line": 1147,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPendingClients",
          "type": "Array",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1149,
              "column": 8
            },
            "end": {
              "line": 1149,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataToNotify",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1151,
              "column": 8
            },
            "end": {
              "line": 1151,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataLinkedPaths",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1153,
              "column": 8
            },
            "end": {
              "line": 1153,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHasPaths",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1155,
              "column": 8
            },
            "end": {
              "line": 1155,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataCompoundStorage",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1157,
              "column": 8
            },
            "end": {
              "line": 1157,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHost",
          "type": "Polymer_PropertyEffects",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1159,
              "column": 8
            },
            "end": {
              "line": 1159,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataTemp",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1161,
              "column": 8
            },
            "end": {
              "line": 1161,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataClientsInitialized",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1163,
              "column": 8
            },
            "end": {
              "line": 1163,
              "column": 38
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__data",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1165,
              "column": 8
            },
            "end": {
              "line": 1165,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPending",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1167,
              "column": 8
            },
            "end": {
              "line": 1167,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataOld",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1169,
              "column": 8
            },
            "end": {
              "line": 1169,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__computeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1171,
              "column": 8
            },
            "end": {
              "line": 1171,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__reflectEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1173,
              "column": 8
            },
            "end": {
              "line": 1173,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__notifyEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1175,
              "column": 8
            },
            "end": {
              "line": 1175,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__propagateEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1177,
              "column": 8
            },
            "end": {
              "line": 1177,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__observeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1179,
              "column": 8
            },
            "end": {
              "line": 1179,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__readOnly",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1181,
              "column": 8
            },
            "end": {
              "line": 1181,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__templateInfo",
          "type": "!TemplateInfo",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1183,
              "column": 8
            },
            "end": {
              "line": 1183,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        }
      ],
      "methods": [
        {
          "name": "_stampTemplate",
          "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 2423,
              "column": 6
            },
            "end": {
              "line": 2448,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to stamp"
            }
          ],
          "return": {
            "type": "!StampedTemplate",
            "desc": "Cloned template content"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addMethodEventListenerToNode",
          "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\template-stamp.html",
            "start": {
              "line": 452,
              "column": 6
            },
            "end": {
              "line": 457,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!Node",
              "description": "Node to add listener on"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of method"
            },
            {
              "name": "context",
              "type": "*=",
              "description": "Context the method will be called on (defaults\n  to `node`)"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "Generated handler function"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_addEventListenerToNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 6
            },
            "end": {
              "line": 151,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!Node",
              "description": "Node to add event listener to"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "function (!Event): void",
              "description": "Listener function to add"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_removeEventListenerFromNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\template-stamp.html",
            "start": {
              "line": 479,
              "column": 6
            },
            "end": {
              "line": 481,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to remove event listener from"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "function (!Event): void",
              "description": "Listener function to remove"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_createPropertyAccessor",
          "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\properties-changed.html",
            "start": {
              "line": 106,
              "column": 8
            },
            "end": {
              "line": 115,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_addPropertyToAttributeMap",
          "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\properties-changed.html",
            "start": {
              "line": 124,
              "column": 8
            },
            "end": {
              "line": 132,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            }
          ],
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_definePropertyAccessor",
          "description": "Overrides PropertiesChanged implementation to save existing prototype\nproperty value so that it can be reset.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-accessors.html",
            "start": {
              "line": 288,
              "column": 6
            },
            "end": {
              "line": 291,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created\n\nWhen calling on a prototype, any overwritten values are saved in\n`__dataProto`, and it is up to the subclasser to decide how/when\nto set those properties back into the accessor.  When calling on an\ninstance, the overwritten value is set via `_setPendingProperty`,\nand the user should call `_invalidateProperties` or `_flushProperties`\nfor the values to take effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "ready",
          "description": "Overrides `PropertyAccessors` so that property accessor\nside effects are not enabled until after client dom is fully ready.\nAlso calls `_flushClients` callback to ensure client dom is enabled\nthat was not enabled as a result of flushing properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1658,
              "column": 6
            },
            "end": {
              "line": 1674,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_initializeProperties",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1193,
              "column": 6
            },
            "end": {
              "line": 1206,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_initializeInstanceProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n`_setProperty`'s `shouldNotify: true`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1231,
              "column": 6
            },
            "end": {
              "line": 1240,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the instance"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setProperty",
          "description": "Overrides base implementation to ensure all accessors set `shouldNotify`\nto true, for per-property notification tracking.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1513,
              "column": 6
            },
            "end": {
              "line": 1517,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_getProperty",
          "description": "Returns the value for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\properties-changed.html",
            "start": {
              "line": 247,
              "column": 8
            },
            "end": {
              "line": 249,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of property"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value for the given property"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_setPendingProperty",
          "description": "Overrides the `PropertiesChanged` implementation to introduce special\ndirty check logic depending on the property & value being set:\n\n1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n   Stored in `__dataTemp`, dirty checked against `__dataTemp`\n2. Object set to simple property (e.g. 'prop': {...})\n   Stored in `__dataTemp` and `__data`, dirty checked against\n   `__dataTemp` by default implementation of `_shouldPropertyChange`\n3. Primitive value set to simple property (e.g. 'prop': 42)\n   Stored in `__data`, dirty checked against `__data`\n\nThe dirty-check is important to prevent cycles due to two-way\nnotification, but paths and objects are only dirty checked against any\nprevious value set during this turn via a \"temporary cache\" that is\ncleared when the last `_propertiesChanged` exits. This is so:\na. any cached array paths (e.g. 'array.3.prop') may be invalidated\n   due to array mutations like shift/unshift/splice; this is fine\n   since path changes are dirty-checked at user entry points like `set`\nb. dirty-checking for objects only lasts one turn to allow the user\n   to mutate the object in-place and re-set it with the same identity\n   and have all sub-properties re-propagated in a subsequent turn.\n\nThe temp cache is not necessarily sufficient to prevent invalid array\npaths, since a splice can happen during the same turn (with pathological\nuser code); we could introduce a \"fixup\" for temporarily cached array\npaths if needed: https://github.com/Polymer/polymer/issues/4227",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1473,
              "column": 6
            },
            "end": {
              "line": 1502,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "True if property should fire notification\n  event (applies only for `notify: true` properties)"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property changed"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_invalidateProperties",
          "description": "Overrides `PropertyAccessor`'s default async queuing of\n`_propertiesChanged`: if `__dataReady` is false (has not yet been\nmanually flushed), the function no-ops; otherwise flushes\n`_propertiesChanged` synchronously.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1528,
              "column": 6
            },
            "end": {
              "line": 1532,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enableProperties",
          "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\properties-changed.html",
            "start": {
              "line": 313,
              "column": 8
            },
            "end": {
              "line": 322,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_flushProperties",
          "description": "Overrides superclass implementation.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1556,
              "column": 6
            },
            "end": {
              "line": 1560,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_shouldPropertiesChange",
          "description": "Called in `_flushProperties` to determine if `_propertiesChanged`\nshould be called. The default implementation returns true if\nproperties are pending. Override to customize when\n`_propertiesChanged` is called.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\properties-changed.html",
            "start": {
              "line": 356,
              "column": 8
            },
            "end": {
              "line": 358,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentProps",
              "type": "!Object",
              "description": "Bag of all current accessor values"
            },
            {
              "name": "changedProps",
              "type": "!Object",
              "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
            },
            {
              "name": "oldProps",
              "type": "!Object",
              "description": "Bag of previous values for each property\n  in `changedProps`"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "true if changedProps is truthy"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_propertiesChanged",
          "description": "Implements `PropertyAccessors`'s properties changed callback.\n\nRuns each class of effects for the batch of changed properties in\na specific order (compute, propagate, reflect, observe, notify).",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1689,
              "column": 6
            },
            "end": {
              "line": 1722,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentProps",
              "type": "!Object",
              "description": "Bag of all current accessor values"
            },
            {
              "name": "changedProps",
              "type": "!Object",
              "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
            },
            {
              "name": "oldProps",
              "type": "!Object",
              "description": "Bag of previous values for each property\n  in `changedProps`"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\properties-changed.html",
            "start": {
              "line": 393,
              "column": 8
            },
            "end": {
              "line": 400,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "value",
              "type": "*",
              "description": "New property value"
            },
            {
              "name": "old",
              "type": "*",
              "description": "Previous property value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "attributeChangedCallback",
          "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\mixins\\properties-changed.html",
            "start": {
              "line": 412,
              "column": 8
            },
            "end": {
              "line": 419,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of attribute that changed"
            },
            {
              "name": "old",
              "type": "?string",
              "description": "Old attribute value"
            },
            {
              "name": "value",
              "type": "?string",
              "description": "New attribute value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_attributeToProperty",
          "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\properties-changed.html",
            "start": {
              "line": 433,
              "column": 8
            },
            "end": {
              "line": 440,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to deserialize."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "of the attribute."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_propertyToAttribute",
          "description": "Serializes a property to its associated attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\properties-changed.html",
            "start": {
              "line": 452,
              "column": 8
            },
            "end": {
              "line": 458,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name to reflect."
            },
            {
              "name": "attribute",
              "type": "string=",
              "description": "Attribute name to reflect to."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Property value to refect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_valueToNodeAttribute",
          "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\properties-changed.html",
            "start": {
              "line": 473,
              "column": 8
            },
            "end": {
              "line": 480,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Element to set attribute to."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to serialize."
            },
            {
              "name": "attribute",
              "type": "string",
              "description": "Attribute name to serialize to."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_serializeValue",
          "description": "Overrides PropertiesChanged implemention to serialize objects as JSON.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-accessors.html",
            "start": {
              "line": 205,
              "column": 6
            },
            "end": {
              "line": 222,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "*",
              "description": "Property value to serialize."
            }
          ],
          "return": {
            "type": "(string | undefined)",
            "desc": "String serialized from the provided property value."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_deserializeValue",
          "description": "Converts a string to a typed JavaScript value.\n\nThis method is called by Polymer when reading HTML attribute values to\nJS properties.  Users may override this method on Polymer element\nprototypes to provide deserialization for custom `type`s.  Note,\nthe `type` argument is the value of the `type` field provided in the\n`properties` configuration object for a given property, and is\nby convention the constructor for the type to deserialize.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-accessors.html",
            "start": {
              "line": 239,
              "column": 6
            },
            "end": {
              "line": 270,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "?string",
              "description": "Attribute value to deserialize."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "Type to deserialize the string to."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Typed value deserialized from the provided string."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_initializeProtoProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1217,
              "column": 6
            },
            "end": {
              "line": 1221,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the prototype"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_ensureAttribute",
          "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-accessors.html",
            "start": {
              "line": 192,
              "column": 6
            },
            "end": {
              "line": 197,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to ensure is set."
            },
            {
              "name": "value",
              "type": "string",
              "description": "of the attribute."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_hasAccessor",
          "description": "Returns true if this library created an accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-accessors.html",
            "start": {
              "line": 299,
              "column": 6
            },
            "end": {
              "line": 301,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if an accessor was created"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_isPropertyPending",
          "description": "Returns true if the specified property has a pending change.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-accessors.html",
            "start": {
              "line": 310,
              "column": 6
            },
            "end": {
              "line": 312,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if property has a pending change"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_addPropertyEffect",
          "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1255,
              "column": 6
            },
            "end": {
              "line": 1263,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removePropertyEffect",
          "description": "Removes the given property effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1273,
              "column": 6
            },
            "end": {
              "line": 1279,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property the effect was associated with"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object to remove"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasPropertyEffect",
          "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1290,
              "column": 6
            },
            "end": {
              "line": 1293,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "type",
              "type": "string=",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReadOnlyEffect",
          "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1303,
              "column": 6
            },
            "end": {
              "line": 1305,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasNotifyEffect",
          "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1315,
              "column": 6
            },
            "end": {
              "line": 1317,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReflectEffect",
          "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1327,
              "column": 6
            },
            "end": {
              "line": 1329,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasComputedEffect",
          "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1339,
              "column": 6
            },
            "end": {
              "line": 1341,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingPropertyOrPath",
          "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1373,
              "column": 6
            },
            "end": {
              "line": 1405,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(number | string)>)",
              "description": "Path to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "Set to true if this change should\n cause a property notification event dispatch"
            },
            {
              "name": "isPathNotification",
              "type": "boolean=",
              "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setUnmanagedPropertyToNode",
          "description": "Overrides default property-effects implementation to intercept\ntextContent bindings while children are \"hidden\" and cache in\nprivate storage for later retrieval.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 213,
              "column": 6
            },
            "end": {
              "line": 220,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!Node",
              "description": "The node to set a property on"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "The property to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to set"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_enqueueClient",
          "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1543,
              "column": 6
            },
            "end": {
              "line": 1548,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "client",
              "type": "Object",
              "description": "PropertyEffects client to enqueue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_flushClients",
          "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1569,
              "column": 6
            },
            "end": {
              "line": 1580,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__enableOrFlushClients",
          "description": "(c) the stamped dom enables.",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1594,
              "column": 6
            },
            "end": {
              "line": 1607,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_readyClients",
          "description": "Perform any initial setup on client dom. Called before the first\n`_flushProperties` call on client dom and before any element\nobservers are called.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1617,
              "column": 6
            },
            "end": {
              "line": 1619,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "setProperties",
          "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1636,
              "column": 6
            },
            "end": {
              "line": 1647,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
            },
            {
              "name": "setReadOnly",
              "type": "boolean=",
              "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_propagatePropertyChanges",
          "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1734,
              "column": 6
            },
            "end": {
              "line": 1744,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProps",
              "type": "Object",
              "description": "Bag of changed properties"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "linkPaths",
          "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1755,
              "column": 6
            },
            "end": {
              "line": 1760,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "to",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Target path to link."
            },
            {
              "name": "from",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Source path to link."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unlinkPaths",
          "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1772,
              "column": 6
            },
            "end": {
              "line": 1777,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Target path to unlink."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifySplices",
          "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1809,
              "column": 6
            },
            "end": {
              "line": 1813,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "splices",
              "type": "Array",
              "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "get",
          "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1834,
              "column": 6
            },
            "end": {
              "line": 1836,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "set",
          "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1859,
              "column": 6
            },
            "end": {
              "line": 1869,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set at the specified path."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "push",
          "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1885,
              "column": 6
            },
            "end": {
              "line": 1894,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to push onto array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "pop",
          "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1909,
              "column": 6
            },
            "end": {
              "line": 1918,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "splice",
          "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1937,
              "column": 6
            },
            "end": {
              "line": 1974,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to array."
            },
            {
              "name": "start",
              "type": "number",
              "description": "Index from which to start removing/inserting."
            },
            {
              "name": "deleteCount",
              "type": "number",
              "description": "Number of items to remove."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert into array."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Array of removed items."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "shift",
          "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 1989,
              "column": 6
            },
            "end": {
              "line": 1998,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unshift",
          "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 2014,
              "column": 6
            },
            "end": {
              "line": 2022,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert info array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifyPath",
          "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 2037,
              "column": 6
            },
            "end": {
              "line": 2054,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Value at the path (optional)."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReadOnlyProperty",
          "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 2067,
              "column": 6
            },
            "end": {
              "line": 2074,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createPropertyObserver",
          "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 2088,
              "column": 6
            },
            "end": {
              "line": 2098,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "method",
              "type": "(string | function (*, *))",
              "description": "Function or name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createMethodObserver",
          "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 2111,
              "column": 6
            },
            "end": {
              "line": 2117,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean | Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createNotifyingProperty",
          "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 2128,
              "column": 6
            },
            "end": {
              "line": 2136,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReflectedProperty",
          "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 2147,
              "column": 6
            },
            "end": {
              "line": 2160,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createComputedProperty",
          "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 2174,
              "column": 6
            },
            "end": {
              "line": 2180,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean | Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_bindTemplate",
          "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 2357,
              "column": 6
            },
            "end": {
              "line": 2380,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            },
            {
              "name": "instanceBinding",
              "type": "boolean=",
              "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removeBoundDom",
          "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 2459,
              "column": 6
            },
            "end": {
              "line": 2480,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "!StampedTemplate",
              "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_configureProperties",
          "description": "Configure the given `props` by calling `_setPendingProperty`. Also\nsets any properties stored in `__hostProps`.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 6
            },
            "end": {
              "line": 109,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Object of property name-value pairs to set."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "forwardHostProp",
          "description": "Forwards a host property to this instance.  This method should be\ncalled on instances from the `options.forwardHostProp` callback\nto propagate changes of host properties to each instance.\n\nNote this method enqueues the change, which are flushed as a batch.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 6
            },
            "end": {
              "line": 125,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop",
              "type": "string",
              "description": "Property or path name"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value of the property to forward"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_showHideChildren",
          "description": "Shows or hides the template instance top level child elements. For\ntext nodes, `textContent` is removed while \"hidden\" and replaced when\n\"shown.\"",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 161,
              "column": 6
            },
            "end": {
              "line": 201,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hide",
              "type": "boolean",
              "description": "Set to true to hide the children;\nset to false to show them."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "dispatchEvent",
          "description": "Stub of HTMLElement's `dispatchEvent`, so that effects that may\ndispatch events safely no-op.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 250,
              "column": 7
            },
            "end": {
              "line": 252,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "Event",
              "description": "Event to dispatch"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Always true."
          }
        }
      ],
      "staticMethods": [
        {
          "name": "_parseTemplate",
          "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\template-stamp.html",
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to parse"
            },
            {
              "name": "outerTemplateInfo",
              "type": "TemplateInfo=",
              "description": "Template metadata from the outer\n  template, for parsing nested templates"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Parsed template metadata"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateContent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\template-stamp.html",
            "start": {
              "line": 210,
              "column": 6
            },
            "end": {
              "line": 212,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template"
            },
            {
              "name": "templateInfo"
            },
            {
              "name": "nodeInfo"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNode",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 2499,
              "column": 6
            },
            "end": {
              "line": 2513,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateChildNodes",
          "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\template-stamp.html",
            "start": {
              "line": 258,
              "column": 6
            },
            "end": {
              "line": 295,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "root",
              "type": "Node",
              "description": "Root node whose `childNodes` will be parsed"
            },
            {
              "name": "templateInfo",
              "type": "!TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "!NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNestedTemplate",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 2591,
              "column": 6
            },
            "end": {
              "line": 2601,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateNodeAttributes",
          "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\template-stamp.html",
            "start": {
              "line": 333,
              "column": 6
            },
            "end": {
              "line": 342,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNodeAttribute",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 2534,
              "column": 6
            },
            "end": {
              "line": 2575,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name"
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_contentForTemplate",
          "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\template-stamp.html",
            "start": {
              "line": 388,
              "column": 6
            },
            "end": {
              "line": 391,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template to retrieve `content` for"
            }
          ],
          "return": {
            "type": "DocumentFragment",
            "desc": "Content fragment"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "createProperties",
          "description": "Creates property accessors for the given property names.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\properties-changed.html",
            "start": {
              "line": 58,
              "column": 8
            },
            "end": {
              "line": 66,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "!Object",
              "description": "Object whose keys are names of accessors."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "attributeNameForProperty",
          "description": "Returns an attribute name that corresponds to the given property.\nBy default, converts camel to dash case, e.g. `fooBar` to `foo-bar`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-accessors.html",
            "start": {
              "line": 143,
              "column": 6
            },
            "end": {
              "line": 145,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property to convert"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Attribute name corresponding to the given property."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "typeForProperty",
          "description": "Override point to provide a type to which to deserialize a value to\na given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\properties-changed.html",
            "start": {
              "line": 88,
              "column": 8
            },
            "end": {
              "line": 88,
              "column": 40
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of property"
            }
          ],
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "createPropertiesForAttributes",
          "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\mixins\\property-accessors.html",
            "start": {
              "line": 128,
              "column": 6
            },
            "end": {
              "line": 133,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "addPropertyEffect",
          "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 2220,
              "column": 6
            },
            "end": {
              "line": 2222,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createPropertyObserver",
          "description": "Creates a single-property observer for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 2234,
              "column": 6
            },
            "end": {
              "line": 2236,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "method",
              "type": "(string | function (*, *))",
              "description": "Function or name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createMethodObserver",
          "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 2251,
              "column": 6
            },
            "end": {
              "line": 2253,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean | Object)=",
              "description": "Boolean or object map indicating"
            }
          ],
          "return": {
            "type": "void",
            "desc": "whether method names should be included as a dependency to the effect."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createNotifyingProperty",
          "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 2263,
              "column": 6
            },
            "end": {
              "line": 2265,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReadOnlyProperty",
          "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 2283,
              "column": 6
            },
            "end": {
              "line": 2285,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReflectedProperty",
          "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 2295,
              "column": 6
            },
            "end": {
              "line": 2297,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createComputedProperty",
          "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 2313,
              "column": 6
            },
            "end": {
              "line": 2315,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean | Object)=",
              "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "bindTemplate",
          "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 2329,
              "column": 6
            },
            "end": {
              "line": 2331,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addTemplatePropertyEffect",
          "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 2395,
              "column": 6
            },
            "end": {
              "line": 2401,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Template metadata to add effect to"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseBindings",
          "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 2636,
              "column": 6
            },
            "end": {
              "line": 2701,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text",
              "type": "string",
              "description": "Text to parse from attribute or textContent"
            },
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Current template metadata"
            }
          ],
          "return": {
            "type": "Array.<!BindingPart>",
            "desc": "Array of binding part metadata"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_evaluateBinding",
          "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\mixins\\property-effects.html",
            "start": {
              "line": 2717,
              "column": 6
            },
            "end": {
              "line": 2734,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inst",
              "type": "this",
              "description": "Element that should be used as scope for\n  binding dependencies"
            },
            {
              "name": "part",
              "type": "BindingPart",
              "description": "Binding part metadata"
            },
            {
              "name": "path",
              "type": "string",
              "description": "Property/path that triggered this effect"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of current property changes"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value the binding part evaluated to"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 68,
          "column": 4
        },
        "end": {
          "line": 253,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "base",
      "name": "TemplateInstanceBase",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "mixins": [
        "Polymer.PropertyEffects"
      ]
    },
    {
      "description": "`iron-media-query` can be used to data bind to a CSS media query.\nThe `query` property is a bare CSS media query.\nThe `query-matches` property is a boolean representing whether the page matches that media query.\n\nExample:\n\n    <iron-media-query query=\"(min-width: 600px)\" query-matches=\"{{queryMatches}}\"></iron-media-query>",
      "summary": "",
      "path": "components\\iron-media-query\\iron-media-query.html",
      "properties": [
        {
          "name": "queryMatches",
          "type": "boolean",
          "description": "The Boolean return value of the media query.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 6
            },
            "end": {
              "line": 43,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "query",
          "type": "string",
          "description": "The CSS media query to evaluate.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"queryChanged\""
            }
          }
        },
        {
          "name": "full",
          "type": "boolean",
          "description": "If true, the query attribute is assumed to be a complete media query\nstring rather than a single media feature.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 57,
              "column": 6
            },
            "end": {
              "line": 60,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_boundMQHandler",
          "type": "function (MediaQueryList)",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 6
            },
            "end": {
              "line": 69,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_mq",
          "type": "MediaQueryList",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 74,
              "column": 6
            },
            "end": {
              "line": 76,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null"
        }
      ],
      "methods": [
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 82,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 4
            },
            "end": {
              "line": 86,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_add",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_remove",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 99,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "queryChanged",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 101,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "queryHandler",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 4
            },
            "end": {
              "line": 117,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mq"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 29,
          "column": 10
        },
        "end": {
          "line": 119,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "query-matches",
          "description": "The Boolean return value of the media query.",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 6
            },
            "end": {
              "line": 43,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "query",
          "description": "The CSS media query to evaluate.",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "full",
          "description": "If true, the query attribute is assumed to be a complete media query\nstring rather than a single media feature.",
          "sourceRange": {
            "start": {
              "line": 57,
              "column": 6
            },
            "end": {
              "line": 60,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "query-matches-changed",
          "description": "Fired when the `queryMatches` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-media-query"
    },
    {
      "description": "app-drawer-layout is a wrapper element that positions an app-drawer and other content. When\nthe viewport width is smaller than `responsiveWidth`, this element changes to narrow layout.\nIn narrow layout, the drawer will be stacked on top of the main content. The drawer will slide\nin/out to hide/reveal the main content.\n\nBy default the drawer is aligned to the start, which is left in LTR layouts:\n\n```html\n<app-drawer-layout>\n  <app-drawer slot=\"drawer\">\n    drawer content\n  </app-drawer>\n  <div>\n    main content\n  </div>\n</app-drawer-layout>\n```\n\nAlign the drawer at the end:\n\n```html\n<app-drawer-layout>\n  <app-drawer slot=\"drawer\" align=\"end\">\n     drawer content\n  </app-drawer>\n  <div>\n    main content\n  </div>\n</app-drawer-layout>\n```\n\nWith an app-header-layout:\n\n```html\n<app-drawer-layout>\n  <app-drawer slot=\"drawer\">\n    drawer-content\n  </app-drawer>\n  <app-header-layout>\n    <app-header slot=\"header\">\n      <app-toolbar>\n        <div main-title>App name</div>\n      </app-toolbar>\n    </app-header>\n\n    main content\n\n  </app-header-layout>\n</app-drawer-layout>\n```\n\nAdd the `drawer-toggle` attribute to elements inside `app-drawer-layout` that toggle the drawer on click events:\n\n```html\n<app-drawer-layout>\n  <app-drawer slot=\"drawer\">\n    drawer-content\n  </app-drawer>\n  <app-header-layout>\n    <app-header slot=\"header\">\n      <app-toolbar>\n        <paper-icon-button icon=\"menu\" drawer-toggle></paper-icon-button>\n        <div main-title>App name</div>\n      </app-toolbar>\n    </app-header>\n\n    main content\n\n  </app-header-layout>\n</app-drawer-layout>\n```\n\n*NOTE:** With app-layout 2.0, the `drawer-toggle` element needs to be manually hidden\nwhen app-drawer-layout is not in narrow layout. To add this, add the following CSS rule where\napp-drawer-layout is used:\n\n```css\napp-drawer-layout:not([narrow]) [drawer-toggle] {\n  display: none;\n}\n```\n\nAdd the `fullbleed` attribute to app-drawer-layout to make it fit the size of its container:\n\n```html\n<app-drawer-layout fullbleed>\n  <app-drawer slot=\"drawer\">\n     drawer content\n  </app-drawer>\n  <div>\n    main content\n  </div>\n</app-drawer-layout>\n```\n\n### Styling\n\nCustom property                          | Description                          | Default\n-----------------------------------------|--------------------------------------|---------\n`--app-drawer-width`                     | Width of the drawer                  | 256px\n`--app-drawer-layout-content-transition` | Transition for the content container | none\n\n*NOTE:** If you use <app-drawer> with <app-drawer-layout> and specify a value for\n`--app-drawer-width`, that value must be accessible by both elements. This can be done by\ndefining the value on the `:host` that contains <app-drawer-layout> (or `html` if outside\na shadow root):\n\n```css\n:host {\n  --app-drawer-width: 300px;\n}\n```",
      "summary": "",
      "path": "components\\app-layout\\app-drawer-layout\\app-drawer-layout.html",
      "properties": [
        {
          "name": "_parentResizable",
          "type": "Object",
          "description": "The closest ancestor element that implements `IronResizableBehavior`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_parentResizableChanged\""
            }
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyingDescendant",
          "type": "boolean",
          "description": "True if this element is currently notifying its descendant elements of\nresize.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "forceNarrow",
          "type": "boolean",
          "description": "If true, ignore `responsiveWidth` setting and force the narrow layout.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 8
            },
            "end": {
              "line": 197,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "responsiveWidth",
          "type": "string",
          "description": "If the viewport's width is smaller than this value, the panel will change to narrow\nlayout. In the mode the drawer will be closed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 203,
              "column": 8
            },
            "end": {
              "line": 206,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"640px\""
        },
        {
          "name": "narrow",
          "type": "boolean",
          "description": "Returns true if it is in narrow layout. This is useful if you need to show/hide\nelements based on the layout.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 212,
              "column": 8
            },
            "end": {
              "line": 217,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          }
        },
        {
          "name": "openedWhenNarrow",
          "type": "boolean",
          "description": "If true, the drawer will initially be opened when in narrow layout mode.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 222,
              "column": 8
            },
            "end": {
              "line": 225,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_drawerPosition",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 227,
              "column": 8
            },
            "end": {
              "line": 229,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "drawer",
          "type": "Function",
          "description": "A reference to the app-drawer element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 245,
              "column": 6
            },
            "end": {
              "line": 247,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        }
      ],
      "methods": [
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 249,
              "column": 6
            },
            "end": {
              "line": 255,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 74,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "notifyResize",
          "description": "Can be called to manually notify a resizable and its descendant\nresizables of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "assignParentResizable",
          "description": "Used to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 98,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "stopResizeNotificationsFor",
          "description": "Used to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "resizerShouldNotify",
          "description": "This method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 59
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "A candidate descendant element that\nimplements `IronResizableBehavior`."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the `element` should be notified of resize."
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onDescendantIronResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 126,
              "column": 4
            },
            "end": {
              "line": 138,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_fireResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 140,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onIronRequestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 147,
              "column": 4
            },
            "end": {
              "line": 162,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_parentResizableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 164,
              "column": 4
            },
            "end": {
              "line": 168,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyDescendant",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 170,
              "column": 4
            },
            "end": {
              "line": 181,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descendant"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_requestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 183,
              "column": 4
            },
            "end": {
              "line": 211,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_appResetLayoutHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-layout-behavior\\app-layout-behavior.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 36,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "Polymer.AppLayoutBehavior"
        },
        {
          "name": "_updateLayoutStates",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 267,
              "column": 6
            },
            "end": {
              "line": 289,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "resetLayout",
          "description": "Resets the layout. If you changed the size of this element via CSS\nyou can notify the changes by either firing the `iron-resize` event\nor calling `resetLayout` directly.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\app-layout-behavior\\app-layout-behavior.html",
            "start": {
              "line": 49,
              "column": 4
            },
            "end": {
              "line": 65,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.AppLayoutBehavior"
        },
        {
          "name": "_notifyLayoutChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-layout-behavior\\app-layout-behavior.html",
            "start": {
              "line": 67,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.AppLayoutBehavior"
        },
        {
          "name": "_notifyDescendantResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-layout-behavior\\app-layout-behavior.html",
            "start": {
              "line": 77,
              "column": 4
            },
            "end": {
              "line": 86,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.AppLayoutBehavior"
        },
        {
          "name": "_clickHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 257,
              "column": 6
            },
            "end": {
              "line": 265,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_narrowChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 291,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onQueryMatchesChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 296,
              "column": 6
            },
            "end": {
              "line": 298,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "_computeMediaQuery",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 300,
              "column": 6
            },
            "end": {
              "line": 302,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "forceNarrow"
            },
            {
              "name": "responsiveWidth"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "app-drawer-layout/demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 183,
          "column": 12
        },
        "end": {
          "line": 303,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "force-narrow",
          "description": "If true, ignore `responsiveWidth` setting and force the narrow layout.",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 8
            },
            "end": {
              "line": 197,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "responsive-width",
          "description": "If the viewport's width is smaller than this value, the panel will change to narrow\nlayout. In the mode the drawer will be closed.",
          "sourceRange": {
            "start": {
              "line": 203,
              "column": 8
            },
            "end": {
              "line": 206,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "narrow",
          "description": "Returns true if it is in narrow layout. This is useful if you need to show/hide\nelements based on the layout.",
          "sourceRange": {
            "start": {
              "line": 212,
              "column": 8
            },
            "end": {
              "line": 217,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "opened-when-narrow",
          "description": "If true, the drawer will initially be opened when in narrow layout mode.",
          "sourceRange": {
            "start": {
              "line": 222,
              "column": 8
            },
            "end": {
              "line": 225,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "narrow-changed",
          "description": "Fired when the `narrow` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "drawer",
          "range": {
            "file": "components/app-layout/app-drawer-layout/app-drawer-layout.html",
            "start": {
              "line": 171,
              "column": 4
            },
            "end": {
              "line": 171,
              "column": 47
            }
          }
        },
        {
          "description": "",
          "name": "",
          "range": {
            "file": "components/app-layout/app-drawer-layout/app-drawer-layout.html",
            "start": {
              "line": 174,
              "column": 6
            },
            "end": {
              "line": 174,
              "column": 19
            }
          }
        }
      ],
      "tagname": "app-drawer-layout"
    },
    {
      "description": "The `<iron-flex-layout>` component provides simple ways to use\n[CSS flexible box layout](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes),\nalso known as flexbox. This component provides two different ways to use flexbox:\n\n1. [Layout classes](https://github.com/PolymerElements/iron-flex-layout/tree/master/iron-flex-layout-classes.html).\nThe layout class stylesheet provides a simple set of class-based flexbox rules, that\nlet you specify layout properties directly in markup. You must include this file\nin every element that needs to use them.\n\n    Sample use:\n\n    ```\n    <custom-element-demo>\n      <template>\n        <script src=\"../webcomponentsjs/webcomponents-lite.js\"></script>\n        <next-code-block></next-code-block>\n      </template>\n    </custom-element-demo>\n    ```\n\n    ```html\n    <link rel=\"import\" href=\"iron-flex-layout-classes.html\">\n    <style is=\"custom-style\" include=\"iron-flex iron-flex-alignment\"></style>\n    <style>\n      .test { width: 100px; }\n    </style>\n    <div class=\"layout horizontal center-center\">\n      <div class=\"test\">horizontal layout center alignment</div>\n    </div>\n    ```\n\n2. [Custom CSS mixins](https://github.com/PolymerElements/iron-flex-layout/blob/master/iron-flex-layout.html).\nThe mixin stylesheet includes custom CSS mixins that can be applied inside a CSS rule using the `@apply` function.\n\nPlease note that the old [/deep/ layout classes](https://github.com/PolymerElements/iron-flex-layout/tree/master/classes)\nare deprecated, and should not be used. To continue using layout properties\ndirectly in markup, please switch to using the new `dom-module`-based\n[layout classes](https://github.com/PolymerElements/iron-flex-layout/tree/master/iron-flex-layout-classes.html).\nPlease note that the new version does not use `/deep/`, and therefore requires you\nto import the `dom-modules` in every element that needs to use them.\n\nA complete [guide](https://elements.polymer-project.org/guides/flex-layout) to `<iron-flex-layout>` is available.",
      "summary": "",
      "path": "components\\iron-flex-layout\\iron-flex-layout.html",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": "demo"
        },
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 59,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-flex-layout"
    },
    {
      "description": "app-drawer is a navigation drawer that can slide in from the left or right.\n\nExample:\n\nAlign the drawer at the start, which is left in LTR layouts (default):\n\n```html\n<app-drawer opened></app-drawer>\n```\n\nAlign the drawer at the end:\n\n```html\n<app-drawer align=\"end\" opened></app-drawer>\n```\n\nTo make the contents of the drawer scrollable, create a wrapper for the scroll\ncontent, and apply height and overflow styles to it.\n\n```html\n<app-drawer>\n  <div style=\"height: 100%; overflow: auto;\"></div>\n</app-drawer>\n```\n\n### Styling\n\nCustom property                  | Description                            | Default\n---------------------------------|----------------------------------------|--------------------\n`--app-drawer-width`             | Width of the drawer                    | 256px\n`--app-drawer-content-container` | Mixin for the drawer content container | {}\n`--app-drawer-scrim-background`  | Background for the scrim               | rgba(0, 0, 0, 0.5)\n\n*NOTE:** If you use `<app-drawer>` with `<app-drawer-layout>` and specify a value for\n`--app-drawer-width`, that value must be accessible by both elements. This can be done by\ndefining the value on the `:host` that contains `<app-drawer-layout>` (or `html` if outside\na shadow root):\n\n```css\n:host {\n  --app-drawer-width: 300px;\n}\n```",
      "summary": "",
      "path": "components\\app-layout\\app-drawer\\app-drawer.html",
      "properties": [
        {
          "name": "opened",
          "type": "boolean",
          "description": "The opened state of the drawer.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 192,
              "column": 8
            },
            "end": {
              "line": 197,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "persistent",
          "type": "boolean",
          "description": "The drawer does not have a scrim and cannot be swiped close.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 202,
              "column": 8
            },
            "end": {
              "line": 206,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "transitionDuration",
          "type": "number",
          "description": "The transition duration of the drawer in milliseconds.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 211,
              "column": 8
            },
            "end": {
              "line": 214,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "200"
        },
        {
          "name": "align",
          "type": "string",
          "description": "The alignment of the drawer on the screen ('left', 'right', 'start' or 'end').\n'start' computes to left and 'end' to right in LTR layout and vice versa in RTL\nlayout.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 8
            },
            "end": {
              "line": 224,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"left\""
        },
        {
          "name": "position",
          "type": "string",
          "description": "The computed, read-only position of the drawer on the screen ('left' or 'right').",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 229,
              "column": 8
            },
            "end": {
              "line": 233,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "swipeOpen",
          "type": "boolean",
          "description": "Create an area at the edge of the screen to swipe open the drawer.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 8
            },
            "end": {
              "line": 242,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "noFocusTrap",
          "type": "boolean",
          "description": "Trap keyboard focus when the drawer is opened and not persistent.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 247,
              "column": 8
            },
            "end": {
              "line": 250,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "disableSwipe",
          "type": "boolean",
          "description": "Disables swiping on the drawer.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 255,
              "column": 8
            },
            "end": {
              "line": 258,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_translateOffset",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 268,
              "column": 6
            },
            "end": {
              "line": 268,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_trackDetails",
          "type": "object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 270,
              "column": 6
            },
            "end": {
              "line": 270,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_drawerState",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 272,
              "column": 6
            },
            "end": {
              "line": 272,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_boundEscKeydownHandler",
          "type": "object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 274,
              "column": 6
            },
            "end": {
              "line": 274,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_firstTabStop",
          "type": "object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 276,
              "column": 6
            },
            "end": {
              "line": 276,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_lastTabStop",
          "type": "object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 278,
              "column": 6
            },
            "end": {
              "line": 278,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_MIN_FLING_THRESHOLD",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 656,
              "column": 6
            },
            "end": {
              "line": 656,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_MIN_TRANSITION_VELOCITY",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 658,
              "column": 6
            },
            "end": {
              "line": 658,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_FLING_TIMING_FUNCTION",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 660,
              "column": 6
            },
            "end": {
              "line": 660,
              "column": 64
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_FLING_INITIAL_SLOPE",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 662,
              "column": 6
            },
            "end": {
              "line": 662,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_DRAWER_STATE",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 664,
              "column": 6
            },
            "end": {
              "line": 671,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 280,
              "column": 6
            },
            "end": {
              "line": 291,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 293,
              "column": 6
            },
            "end": {
              "line": 295,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "open",
          "description": "Opens the drawer.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 300,
              "column": 6
            },
            "end": {
              "line": 302,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "close",
          "description": "Closes the drawer.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 307,
              "column": 6
            },
            "end": {
              "line": 309,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "toggle",
          "description": "Toggles the drawer open and close.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 314,
              "column": 6
            },
            "end": {
              "line": 316,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "getWidth",
          "description": "Gets the width of the drawer.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 323,
              "column": 6
            },
            "end": {
              "line": 325,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "number",
            "desc": "The width of the drawer in pixels."
          }
        },
        {
          "name": "_isRTL",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 327,
              "column": 6
            },
            "end": {
              "line": 329,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_resetPosition",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 331,
              "column": 6
            },
            "end": {
              "line": 341,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_escKeydownHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 343,
              "column": 6
            },
            "end": {
              "line": 350,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "_track",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 352,
              "column": 6
            },
            "end": {
              "line": 371,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "_trackStart",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 373,
              "column": 6
            },
            "end": {
              "line": 389,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "_trackMove",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 391,
              "column": 6
            },
            "end": {
              "line": 400,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "_trackEnd",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 402,
              "column": 6
            },
            "end": {
              "line": 438,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "_calculateVelocity",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 440,
              "column": 6
            },
            "end": {
              "line": 466,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            },
            {
              "name": "trackDetails"
            }
          ]
        },
        {
          "name": "_flingDrawer",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 468,
              "column": 6
            },
            "end": {
              "line": 510,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            },
            {
              "name": "trackDetails"
            }
          ]
        },
        {
          "name": "_styleTransitionDuration",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 512,
              "column": 6
            },
            "end": {
              "line": 516,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "duration"
            }
          ]
        },
        {
          "name": "_styleTransitionTimingFunction",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 518,
              "column": 6
            },
            "end": {
              "line": 521,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "timingFunction"
            }
          ]
        },
        {
          "name": "_translateDrawer",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 523,
              "column": 6
            },
            "end": {
              "line": 535,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "x"
            }
          ]
        },
        {
          "name": "_resetDrawerTranslate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 537,
              "column": 6
            },
            "end": {
              "line": 540,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_resetDrawerState",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 542,
              "column": 6
            },
            "end": {
              "line": 576,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "resetLayout",
          "description": "Resets the layout.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 583,
              "column": 6
            },
            "end": {
              "line": 585,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_setKeyboardFocusTrap",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 587,
              "column": 6
            },
            "end": {
              "line": 625,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_tabKeydownHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 627,
              "column": 6
            },
            "end": {
              "line": 646,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "_openedPersistentChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 648,
              "column": 6
            },
            "end": {
              "line": 654,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "opened"
            },
            {
              "name": "persistent"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "app-drawer/demo/left-drawer.html",
          "description": "Simple Left Drawer"
        },
        {
          "url": "app-drawer/demo/right-drawer.html",
          "description": "Right Drawer with Icons"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 185,
          "column": 12
        },
        "end": {
          "line": 684,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "opened",
          "description": "The opened state of the drawer.",
          "sourceRange": {
            "start": {
              "line": 192,
              "column": 8
            },
            "end": {
              "line": 197,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "persistent",
          "description": "The drawer does not have a scrim and cannot be swiped close.",
          "sourceRange": {
            "start": {
              "line": 202,
              "column": 8
            },
            "end": {
              "line": 206,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "transition-duration",
          "description": "The transition duration of the drawer in milliseconds.",
          "sourceRange": {
            "start": {
              "line": 211,
              "column": 8
            },
            "end": {
              "line": 214,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "align",
          "description": "The alignment of the drawer on the screen ('left', 'right', 'start' or 'end').\n'start' computes to left and 'end' to right in LTR layout and vice versa in RTL\nlayout.",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 8
            },
            "end": {
              "line": 224,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "position",
          "description": "The computed, read-only position of the drawer on the screen ('left' or 'right').",
          "sourceRange": {
            "start": {
              "line": 229,
              "column": 8
            },
            "end": {
              "line": 233,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "swipe-open",
          "description": "Create an area at the edge of the screen to swipe open the drawer.",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 8
            },
            "end": {
              "line": 242,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "no-focus-trap",
          "description": "Trap keyboard focus when the drawer is opened and not persistent.",
          "sourceRange": {
            "start": {
              "line": 247,
              "column": 8
            },
            "end": {
              "line": 250,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "disable-swipe",
          "description": "Disables swiping on the drawer.",
          "sourceRange": {
            "start": {
              "line": 255,
              "column": 8
            },
            "end": {
              "line": 258,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "app-drawer-transitioned",
          "description": "app-drawer-transitioned",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "app-reset-layout",
          "description": "app-reset-layout",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "opened-changed",
          "description": "Fired when the `opened` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "components/app-layout/app-drawer/app-drawer.html",
            "start": {
              "line": 179,
              "column": 6
            },
            "end": {
              "line": 179,
              "column": 19
            }
          }
        }
      ],
      "tagname": "app-drawer"
    },
    {
      "description": "app-header-layout is a wrapper element that positions an app-header and other content. This\nelement uses the document scroll by default, but it can also define its own scrolling region.\n\nUsing the document scroll:\n\n```html\n<app-header-layout>\n  <app-header slot=\"header\" fixed condenses effects=\"waterfall\">\n    <app-toolbar>\n      <div main-title>App name</div>\n    </app-toolbar>\n  </app-header>\n  <div>\n    main content\n  </div>\n</app-header-layout>\n```\n\nUsing an own scrolling region:\n\n```html\n<app-header-layout has-scrolling-region style=\"width: 300px; height: 400px;\">\n  <app-header slot=\"header\" fixed condenses effects=\"waterfall\">\n    <app-toolbar>\n      <div main-title>App name</div>\n    </app-toolbar>\n  </app-header>\n  <div>\n    main content\n  </div>\n</app-header-layout>\n```\n\nAdd the `fullbleed` attribute to app-header-layout to make it fit the size of its container:\n\n```html\n<app-header-layout fullbleed>\n ...\n</app-header-layout>\n```",
      "summary": "",
      "path": "components\\app-layout\\app-header-layout\\app-header-layout.html",
      "properties": [
        {
          "name": "_parentResizable",
          "type": "Object",
          "description": "The closest ancestor element that implements `IronResizableBehavior`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_parentResizableChanged\""
            }
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyingDescendant",
          "type": "boolean",
          "description": "True if this element is currently notifying its descendant elements of\nresize.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "hasScrollingRegion",
          "type": "boolean",
          "description": "If true, the current element will have its own scrolling region.\nOtherwise, it will use the document scroll to control the header.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 158,
              "column": 8
            },
            "end": {
              "line": 162,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "header",
          "type": "Function",
          "description": "A reference to the app-header element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 6
            },
            "end": {
              "line": 176,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        }
      ],
      "methods": [
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-layout-behavior\\app-layout-behavior.html",
            "start": {
              "line": 26,
              "column": 4
            },
            "end": {
              "line": 28,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.AppLayoutBehavior"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 74,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "notifyResize",
          "description": "Can be called to manually notify a resizable and its descendant\nresizables of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "assignParentResizable",
          "description": "Used to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 98,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "stopResizeNotificationsFor",
          "description": "Used to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "resizerShouldNotify",
          "description": "This method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 59
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "A candidate descendant element that\nimplements `IronResizableBehavior`."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the `element` should be notified of resize."
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onDescendantIronResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 126,
              "column": 4
            },
            "end": {
              "line": 138,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_fireResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 140,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onIronRequestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 147,
              "column": 4
            },
            "end": {
              "line": 162,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_parentResizableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 164,
              "column": 4
            },
            "end": {
              "line": 168,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyDescendant",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 170,
              "column": 4
            },
            "end": {
              "line": 181,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descendant"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_requestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 183,
              "column": 4
            },
            "end": {
              "line": 211,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_appResetLayoutHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-layout-behavior\\app-layout-behavior.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 36,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "Polymer.AppLayoutBehavior"
        },
        {
          "name": "_updateLayoutStates",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 178,
              "column": 6
            },
            "end": {
              "line": 216,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "resetLayout",
          "description": "Resets the layout. If you changed the size of this element via CSS\nyou can notify the changes by either firing the `iron-resize` event\nor calling `resetLayout` directly.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\app-layout-behavior\\app-layout-behavior.html",
            "start": {
              "line": 49,
              "column": 4
            },
            "end": {
              "line": 65,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.AppLayoutBehavior"
        },
        {
          "name": "_notifyLayoutChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-layout-behavior\\app-layout-behavior.html",
            "start": {
              "line": 67,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.AppLayoutBehavior"
        },
        {
          "name": "_notifyDescendantResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-layout-behavior\\app-layout-behavior.html",
            "start": {
              "line": 77,
              "column": 4
            },
            "end": {
              "line": 86,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.AppLayoutBehavior"
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "app-header-layout/demo/simple.html",
          "description": "Simple Demo"
        },
        {
          "url": "app-header-layout/demo/scrolling-region.html",
          "description": "Scrolling Region"
        },
        {
          "url": "app-header-layout/demo/music.html",
          "description": "Music Demo"
        },
        {
          "url": "app-header-layout/demo/footer.html",
          "description": "Footer Demo"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 146,
          "column": 12
        },
        "end": {
          "line": 218,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "has-scrolling-region",
          "description": "If true, the current element will have its own scrolling region.\nOtherwise, it will use the document scroll to control the header.",
          "sourceRange": {
            "start": {
              "line": 158,
              "column": 8
            },
            "end": {
              "line": 162,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "header",
          "range": {
            "file": "components/app-layout/app-header-layout/app-header-layout.html",
            "start": {
              "line": 136,
              "column": 6
            },
            "end": {
              "line": 136,
              "column": 49
            }
          }
        },
        {
          "description": "",
          "name": "",
          "range": {
            "file": "components/app-layout/app-header-layout/app-header-layout.html",
            "start": {
              "line": 139,
              "column": 8
            },
            "end": {
              "line": 139,
              "column": 21
            }
          }
        }
      ],
      "tagname": "app-header-layout"
    },
    {
      "description": "app-header is container element for app-toolbars at the top of the screen that can have scroll\neffects. By default, an app-header moves away from the viewport when scrolling down and\nif using `reveals`, the header slides back when scrolling back up. For example:\n\n```html\n<app-header reveals>\n  <app-toolbar>\n    <div main-title>App name</div>\n  </app-toolbar>\n</app-header>\n```\n\napp-header can also condense when scrolling down. To achieve this behavior, the header\nmust have a larger height than the `sticky` element in the light DOM. For example:\n\n```html\n<app-header style=\"height: 96px;\" condenses fixed>\n  <app-toolbar style=\"height: 64px;\">\n    <div main-title>App name</div>\n  </app-toolbar>\n</app-header>\n```\n\nIn this case the header is initially `96px` tall, and it shrinks to `64px` when scrolling down.\nThat is what is meant by \"condensing\".\n\n### Sticky element\n\nThe element that is positioned fixed to top of the header's `scrollTarget` when a threshold\nis reached, similar to `position: sticky` in CSS. This element **must** be an immediate\nchild of app-header. By default, the `sticky` element is the first `app-toolbar that\nis an immediate child of app-header.\n\n```html\n<app-header condenses>\n  <app-toolbar> Sticky element </app-toolbar>\n</app-header>\n```\n\n#### Customizing the sticky element\n\n```html\n<app-header condenses>\n  <app-toolbar></app-toolbar>\n  <app-toolbar sticky> Sticky element </app-toolbar>\n</app-header>\n```\n\n### Scroll target\n\nThe app-header's `scrollTarget` property allows to customize the scrollable element to which\nthe header responds when the user scrolls. By default, app-header uses the document as\nthe scroll target, but you can customize this property by setting the id of the element, e.g.\n\n```html\n<div id=\"scrollingRegion\" style=\"overflow-y: auto;\">\n  <app-header scroll-target=\"scrollingRegion\">\n  </app-header>\n</div>\n```\n\nIn this case, the `scrollTarget` property points to the outer div element. Alternatively,\nyou can set this property programmatically:\n\n```js\nappHeader.scrollTarget = document.querySelector(\"#scrollingRegion\");\n```\n\n## Backgrounds\napp-header has two background layers that can be used for styling when the header is condensed\nor when the scrollable element is scrolled to the top.\n\n## Scroll effects\n\nScroll effects are _optional_ visual effects applied in app-header based on scroll position. For example,\nThe [Material Design scrolling techniques](https://www.google.com/design/spec/patterns/scrolling-techniques.html)\nrecommends effects that can be installed via the `effects` property. e.g.\n\n```html\n<app-header effects=\"waterfall\">\n  <app-toolbar>App name</app-toolbar>\n</app-header>\n```\n\n#### Importing the effects\n\nTo use the scroll effects, you must explicitly import them in addition to `app-header`:\n\n```html\n<link rel=\"import\" href=\"/bower_components/app-layout/app-scroll-effects/app-scroll-effects.html\">\n```\n\n#### List of effects\n\n**blend-background**\nFades in/out two background elements by applying CSS opacity based on scroll position.\nYou can use this effect to smoothly change the background color or image of the header.\nFor example, using the mixin `--app-header-background-rear-layer` lets you assign a different\nbackground when the header is condensed:\n\n```css\napp-header {\n  background-color: red;\n  --app-header-background-rear-layer: {\n    /* The header is blue when condensed */\n    background-color: blue;\n  };\n}\n```\n\n**fade-background**\nUpon scrolling past a threshold, this effect will trigger an opacity transition to\nfade in/out the backgrounds. Compared to the `blend-background` effect,\nthis effect doesn't interpolate the opacity based on scroll position.\n\n\n**parallax-background**\nA simple parallax effect that vertically translates the backgrounds based on a fraction\nof the scroll position. For example:\n\n```css\napp-header {\n  --app-header-background-front-layer: {\n    background-image: url(...);\n  };\n}\n```\n```html\n<app-header style=\"height: 300px;\" effects=\"parallax-background\">\n  <app-toolbar>App name</app-toolbar>\n</app-header>\n```\n\nThe fraction determines how far the background moves relative to the scroll position.\nThis value can be assigned via the `scalar` config value and it is typically a value\nbetween 0 and 1 inclusive. If `scalar=0`, the background doesn't move away from the header.\n\n**resize-title**\nProgressively interpolates the size of the title from the element with the `main-title` attribute\nto the element with the `condensed-title` attribute as the header condenses. For example:\n\n```html\n<app-header condenses reveals effects=\"resize-title\">\n  <app-toolbar>\n      <h4 condensed-title>App name</h4>\n  </app-toolbar>\n  <app-toolbar>\n      <h1 main-title>App name</h1>\n  </app-toolbar>\n</app-header>\n```\n\n**resize-snapped-title**\nUpon scrolling past a threshold, this effect fades in/out the titles using opacity transitions.\nSimilarly to `resize-title`, the `main-title` and `condensed-title` elements must be placed in the\nlight DOM.\n\n**waterfall**\nToggles the shadow property in app-header to create a sense of depth (as recommended in the\nMD spec) between the header and the underneath content. You can change the shadow by\ncustomizing the `--app-header-shadow` mixin. For example:\n\n```css\napp-header {\n  --app-header-shadow: {\n    box-shadow: inset 0px 5px 2px -3px rgba(0, 0, 0, 0.2);\n  };\n}\n```\n\n```html\n<app-header condenses reveals effects=\"waterfall\">\n  <app-toolbar>\n      <h1 main-title>App name</h1>\n  </app-toolbar>\n</app-header>\n```\n\n**material**\nInstalls the waterfall, resize-title, blend-background and parallax-background effects.\n\n### Content attributes\n\nAttribute | Description         | Default\n----------|---------------------|----------------------------------------\n`sticky` | Element that remains at the top when the header condenses. | The first app-toolbar in the light DOM.\n\n\n## Styling\n\nMixin | Description | Default\n------|-------------|----------\n`--app-header-background-front-layer` | Applies to the front layer of the background. | {}\n`--app-header-background-rear-layer` | Applies to the rear layer of the background. | {}\n`--app-header-shadow` | Applies to the shadow. | {}",
      "summary": "",
      "path": "components\\app-layout\\app-header\\app-header.html",
      "properties": [
        {
          "name": "scrollTarget",
          "type": "HTMLElement",
          "description": "Specifies the element that will handle the scroll event\non the behalf of the current element. This is typically a reference to an\nelement, but there are a few more posibilities:\n\n### Elements id\n\n```html\n<div id=\"scrollable-element\" style=\"overflow: auto;\">\n <x-element scroll-target=\"scrollable-element\">\n   <!-- Content-->\n </x-element>\n</div>\n```\nIn this case, the `scrollTarget` will point to the outer div element.\n\n### Document scrolling\n\nFor document scrolling, you can use the reserved word `document`:\n\n```html\n<x-element scroll-target=\"document\">\n  <!-- Content -->\n</x-element>\n```\n\n### Elements reference\n\n```js\nappHeader.scrollTarget = document.querySelector('#scrollable-element');\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 63,
              "column": 6
            },
            "end": {
              "line": 68,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_shouldHaveListener",
          "type": "boolean",
          "description": "True if the event listener should be installed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 76,
              "column": 4
            },
            "end": {
              "line": 76,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "effects",
          "type": "string",
          "description": "A space-separated list of the effects names that will be triggered when the user scrolls.\ne.g. `waterfall parallax-background` installs the `waterfall` and `parallax-background`.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 112,
              "column": 6
            },
            "end": {
              "line": 114,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "effectsConfig",
          "type": "Object",
          "description": "An object that configurates the effects installed via the `effects` property. e.g.\n```js\n element.effectsConfig = {\n  \"blend-background\": {\n    \"startsAt\": 0.5\n  }\n};\n```\nEvery effect has at least two config properties: `startsAt` and `endsAt`.\nThese properties indicate when the event should start and end respectively\nand relative to the overall element progress. So for example, if `blend-background`\nstarts at `0.5`, the effect will only start once the current element reaches 0.5\nof its progress. In this context, the progress is a value in the range of `[0, 1]`\nthat indicates where this element is on the screen relative to the viewport.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 132,
              "column": 6
            },
            "end": {
              "line": 137,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "Disables CSS transitions and scroll effects on the element.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 142,
              "column": 6
            },
            "end": {
              "line": 146,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "threshold",
          "type": "number",
          "description": "Allows to set a `scrollTop` threshold. When greater than 0, `thresholdTriggered`\nis true only when the scroll target's `scrollTop` has reached this value.\n\nFor example, if `threshold = 100`, `thresholdTriggered` is true when the `scrollTop`\nis at least `100`.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 155,
              "column": 6
            },
            "end": {
              "line": 158,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "thresholdTriggered",
          "type": "boolean",
          "description": "True if the `scrollTop` threshold (set in `scrollTopThreshold`) has\nbeen reached.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 164,
              "column": 6
            },
            "end": {
              "line": 169,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "_effectsRunFn",
          "type": "Array.<Function>",
          "description": "List of effects handlers that will take place during scroll.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 213,
              "column": 4
            },
            "end": {
              "line": 213,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "_effects",
          "type": "Array.<Object>",
          "description": "List of the effects definitions installed via the `effects` property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 220,
              "column": 4
            },
            "end": {
              "line": 220,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "_parentResizable",
          "type": "Object",
          "description": "The closest ancestor element that implements `IronResizableBehavior`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_parentResizableChanged\""
            }
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyingDescendant",
          "type": "boolean",
          "description": "True if this element is currently notifying its descendant elements of\nresize.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "condenses",
          "type": "boolean",
          "description": "If true, the header will automatically collapse when scrolling down.\nThat is, the `sticky` element remains visible when the header is fully condensed\nwhereas the rest of the elements will collapse below `sticky` element.\n\nBy default, the `sticky` element is the first toolbar in the light DOM:\n\n```html\n<app-header condenses>\n  <app-toolbar>This toolbar remains on top</app-toolbar>\n  <app-toolbar></app-toolbar>\n  <app-toolbar></app-toolbar>\n</app-header>\n```\n\nAdditionally, you can specify which toolbar or element remains visible in condensed mode\nby adding the `sticky` attribute to that element. For example: if we want the last\ntoolbar to remain visible, we can add the `sticky` attribute to it.\n\n```html\n<app-header condenses>\n  <app-toolbar></app-toolbar>\n  <app-toolbar></app-toolbar>\n  <app-toolbar sticky>This toolbar remains on top</app-toolbar>\n</app-header>\n```\n\nNote the `sticky` element must be a direct child of `app-header`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 351,
              "column": 8
            },
            "end": {
              "line": 354,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "fixed",
          "type": "boolean",
          "description": "Mantains the header fixed at the top so it never moves away.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 359,
              "column": 8
            },
            "end": {
              "line": 362,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "reveals",
          "type": "boolean",
          "description": "Slides back the header when scrolling back up.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 367,
              "column": 8
            },
            "end": {
              "line": 370,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "shadow",
          "type": "boolean",
          "description": "Displays a shadow below the header.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 375,
              "column": 8
            },
            "end": {
              "line": 379,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_height",
          "type": "number",
          "description": "A cached offsetHeight of the current element.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 391,
              "column": 6
            },
            "end": {
              "line": 391,
              "column": 16
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_dHeight",
          "type": "number",
          "description": "The distance in pixels the header will be translated to when scrolling.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 398,
              "column": 6
            },
            "end": {
              "line": 398,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_stickyElTop",
          "type": "number",
          "description": "The offsetTop of `_stickyEl`",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 405,
              "column": 6
            },
            "end": {
              "line": 405,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_stickyElRef",
          "type": "HTMLElement",
          "description": "A reference to the element that remains visible when the header condenses.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 412,
              "column": 6
            },
            "end": {
              "line": 412,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_top",
          "type": "number",
          "description": "The header's top value used for the `transformY`",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 419,
              "column": 6
            },
            "end": {
              "line": 419,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_progress",
          "type": "number",
          "description": "The current scroll progress.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 426,
              "column": 6
            },
            "end": {
              "line": 426,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_wasScrollingDown",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 428,
              "column": 6
            },
            "end": {
              "line": 428,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_initScrollTop",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 429,
              "column": 6
            },
            "end": {
              "line": 429,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_initTimestamp",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 430,
              "column": 6
            },
            "end": {
              "line": 430,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_lastTimestamp",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 431,
              "column": 6
            },
            "end": {
              "line": 431,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_lastScrollTop",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 432,
              "column": 6
            },
            "end": {
              "line": 432,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_maxHeaderTop",
          "type": "number",
          "description": "The distance the header is allowed to move away.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 439,
              "column": 6
            },
            "end": {
              "line": 441,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        },
        {
          "name": "_stickyEl",
          "type": "Function",
          "description": "Returns a reference to the sticky element.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 448,
              "column": 6
            },
            "end": {
              "line": 465,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_scrollTargetChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 78,
              "column": 4
            },
            "end": {
              "line": 103,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "scrollTarget"
            },
            {
              "name": "isAttached"
            }
          ],
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_scrollHandler",
          "description": "Overrides the `_scrollHandler`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 365,
              "column": 4
            },
            "end": {
              "line": 373,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "_defaultScrollTarget",
          "description": "The default scroll target. Consumers of this behavior may want to customize\nthe default scroll target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 119,
              "column": 4
            },
            "end": {
              "line": 121,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_doc",
          "description": "Shortcut for the document element",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 128,
              "column": 4
            },
            "end": {
              "line": 130,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_scrollTop",
          "description": "Sets the number of pixels that the content of an element is scrolled\nupward.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 166,
              "column": 4
            },
            "end": {
              "line": 172,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "top"
            }
          ],
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_scrollLeft",
          "description": "Sets the number of pixels that the content of an element is scrolled to the\nleft.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 180,
              "column": 4
            },
            "end": {
              "line": 186,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "left"
            }
          ],
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "scroll",
          "description": "Scrolls the content to a particular place.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 196,
              "column": 4
            },
            "end": {
              "line": 214,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "leftOrOptions",
              "type": "(number | !{left: number, top: number})",
              "description": "The left position or scroll options"
            },
            {
              "name": "top",
              "type": "number=",
              "description": "The top position"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_scrollTargetWidth",
          "description": "Gets the width of the scroll target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 221,
              "column": 4
            },
            "end": {
              "line": 227,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_scrollTargetHeight",
          "description": "Gets the height of the scroll target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 234,
              "column": 4
            },
            "end": {
              "line": 240,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_isValidScrollTarget",
          "description": "Returns true if the scroll target is a valid HTMLElement.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 247,
              "column": 4
            },
            "end": {
              "line": 249,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean"
          },
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_toggleScrollListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 251,
              "column": 4
            },
            "end": {
              "line": 264,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "yes"
            },
            {
              "name": "scrollTarget"
            }
          ],
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "toggleScrollListener",
          "description": "Enables or disables the scroll event listener.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 271,
              "column": 4
            },
            "end": {
              "line": 274,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "yes",
              "type": "boolean",
              "description": "True to add the event, False to remove it."
            }
          ],
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_updateScrollState",
          "description": "Updates the scroll state.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 509,
              "column": 6
            },
            "end": {
              "line": 567,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "scrollTop",
              "type": "number"
            },
            {
              "name": "forceUpdate",
              "type": "boolean=",
              "description": "(default: false)"
            }
          ]
        },
        {
          "name": "isOnScreen",
          "description": "Returns true if the current element is on the screen.\nThat is, visible in the current viewport.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 595,
              "column": 6
            },
            "end": {
              "line": 597,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean"
          }
        },
        {
          "name": "isContentBelow",
          "description": "Returns true if there's content below the current element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 605,
              "column": 6
            },
            "end": {
              "line": 608,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean"
          }
        },
        {
          "name": "_clampedScrollTop",
          "description": "The clamped value of `_scrollTop`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 226,
              "column": 4
            },
            "end": {
              "line": 228,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 74,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "createEffect",
          "description": "Creates an effect object from an effect's name that can be used to run\neffects programmatically.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 255,
              "column": 4
            },
            "end": {
              "line": 263,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "effectName",
              "type": "string",
              "description": "The effect's name registered via `Polymer.AppLayout.registerEffect`."
            },
            {
              "name": "effectConfig",
              "type": "Object=",
              "description": "The effect config object. (Optional)"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "An effect object with the following functions:\n\n * `effect.setUp()`, Sets up the requirements for the effect.\n      This function is called automatically before the `effect` function returns.\n * `effect.run(progress, y)`, Runs the effect given a `progress`.\n * `effect.tearDown()`, Cleans up any DOM nodes or element references used by the effect.\n\nExample:\n```js\nvar parallax = element.createEffect('parallax-background');\n// runs the effect\nparallax.run(0.5, 0);\n```"
          },
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "_effectsChanged",
          "description": "Called when `effects` or `effectsConfig` changes.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 268,
              "column": 4
            },
            "end": {
              "line": 286,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "effects"
            },
            {
              "name": "effectsConfig"
            },
            {
              "name": "isAttached"
            }
          ],
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "_layoutIfDirty",
          "description": "Forces layout",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 291,
              "column": 4
            },
            "end": {
              "line": 293,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "_boundEffect",
          "description": "Returns an effect object bound to the current context.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 301,
              "column": 4
            },
            "end": {
              "line": 318,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "effectDef",
              "type": "Object"
            },
            {
              "name": "effectsConfig",
              "type": "Object=",
              "description": "The effect config object if the effect accepts config values. (Optional)"
            }
          ],
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "_setUpEffect",
          "description": "Sets up the effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 323,
              "column": 4
            },
            "end": {
              "line": 333,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "_tearDownEffects",
          "description": "Tears down the effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 338,
              "column": 4
            },
            "end": {
              "line": 346,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "_runEffects",
          "description": "Runs the effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 354,
              "column": 4
            },
            "end": {
              "line": 360,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "p",
              "type": "number",
              "description": "The progress"
            },
            {
              "name": "y",
              "type": "number",
              "description": "The top position of the current element relative to the viewport."
            }
          ],
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "_getDOMRef",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 641,
              "column": 6
            },
            "end": {
              "line": 658,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            }
          ]
        },
        {
          "name": "_getUndefinedMsg",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 385,
              "column": 4
            },
            "end": {
              "line": 388,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "effectName"
            }
          ],
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-layout-behavior\\app-layout-behavior.html",
            "start": {
              "line": 26,
              "column": 4
            },
            "end": {
              "line": 28,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.AppLayoutBehavior"
        },
        {
          "name": "notifyResize",
          "description": "Can be called to manually notify a resizable and its descendant\nresizables of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "assignParentResizable",
          "description": "Used to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 98,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "stopResizeNotificationsFor",
          "description": "Used to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "resizerShouldNotify",
          "description": "This method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 59
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "A candidate descendant element that\nimplements `IronResizableBehavior`."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the `element` should be notified of resize."
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onDescendantIronResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 126,
              "column": 4
            },
            "end": {
              "line": 138,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_fireResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 140,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onIronRequestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 147,
              "column": 4
            },
            "end": {
              "line": 162,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_parentResizableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 164,
              "column": 4
            },
            "end": {
              "line": 168,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyDescendant",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 170,
              "column": 4
            },
            "end": {
              "line": 181,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descendant"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_requestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 183,
              "column": 4
            },
            "end": {
              "line": 211,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_appResetLayoutHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-layout-behavior\\app-layout-behavior.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 36,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "Polymer.AppLayoutBehavior"
        },
        {
          "name": "_updateLayoutStates",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 472,
              "column": 6
            },
            "end": {
              "line": 501,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "resetLayout",
          "description": "Resets the layout. If you changed the size of this element via CSS\nyou can notify the changes by either firing the `iron-resize` event\nor calling `resetLayout` directly.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\app-layout-behavior\\app-layout-behavior.html",
            "start": {
              "line": 49,
              "column": 4
            },
            "end": {
              "line": 65,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.AppLayoutBehavior"
        },
        {
          "name": "_notifyLayoutChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-layout-behavior\\app-layout-behavior.html",
            "start": {
              "line": 67,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.AppLayoutBehavior"
        },
        {
          "name": "_notifyDescendantResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-layout-behavior\\app-layout-behavior.html",
            "start": {
              "line": 77,
              "column": 4
            },
            "end": {
              "line": 86,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.AppLayoutBehavior"
        },
        {
          "name": "_configChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 467,
              "column": 6
            },
            "end": {
              "line": 470,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_mayMove",
          "description": "Returns true if the current header is allowed to move as the user scrolls.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 574,
              "column": 6
            },
            "end": {
              "line": 576,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean"
          }
        },
        {
          "name": "willCondense",
          "description": "Returns true if the current header will condense based on the size of the header\nand the `consenses` property.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 584,
              "column": 6
            },
            "end": {
              "line": 586,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean"
          }
        },
        {
          "name": "_transformHeader",
          "description": "Transforms the header.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 615,
              "column": 6
            },
            "end": {
              "line": 621,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "y",
              "type": "number"
            }
          ]
        },
        {
          "name": "_clamp",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 623,
              "column": 6
            },
            "end": {
              "line": 625,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "v"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            }
          ]
        },
        {
          "name": "_ensureBgContainers",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 627,
              "column": 6
            },
            "end": {
              "line": 639,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "getScrollState",
          "description": "Returns an object containing the progress value of the scroll effects\nand the top position of the header.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 667,
              "column": 6
            },
            "end": {
              "line": 669,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Object"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "app-header/demo/blend-background-1.html",
          "description": "Blend Background Image"
        },
        {
          "url": "app-header/demo/blend-background-2.html",
          "description": "Blend 2 Background Images"
        },
        {
          "url": "app-header/demo/blend-background-3.html",
          "description": "Blend Background Colors"
        },
        {
          "url": "app-header/demo/contacts.html",
          "description": "Contacts Demo"
        },
        {
          "url": "app-header/demo/give.html",
          "description": "Resize Snapped Title Demo"
        },
        {
          "url": "app-header/demo/music.html",
          "description": "Reveals Demo"
        },
        {
          "url": "app-header/demo/no-effects.html",
          "description": "Condenses and Reveals Demo"
        },
        {
          "url": "app-header/demo/notes.html",
          "description": "Fixed with Dynamic Shadow Demo"
        },
        {
          "url": "app-header/demo/custom-sticky-element-1.html",
          "description": "Custom Sticky Element Demo 1"
        },
        {
          "url": "app-header/demo/custom-sticky-element-2.html",
          "description": "Custom Sticky Element Demo 2"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 313,
          "column": 12
        },
        "end": {
          "line": 670,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "scroll-target",
          "description": "Specifies the element that will handle the scroll event\non the behalf of the current element. This is typically a reference to an\nelement, but there are a few more posibilities:\n\n### Elements id\n\n```html\n<div id=\"scrollable-element\" style=\"overflow: auto;\">\n <x-element scroll-target=\"scrollable-element\">\n   <!-- Content-->\n </x-element>\n</div>\n```\nIn this case, the `scrollTarget` will point to the outer div element.\n\n### Document scrolling\n\nFor document scrolling, you can use the reserved word `document`:\n\n```html\n<x-element scroll-target=\"document\">\n  <!-- Content -->\n</x-element>\n```\n\n### Elements reference\n\n```js\nappHeader.scrollTarget = document.querySelector('#scrollable-element');\n```",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 63,
              "column": 6
            },
            "end": {
              "line": 68,
              "column": 7
            }
          },
          "metadata": {},
          "type": "HTMLElement",
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "effects",
          "description": "A space-separated list of the effects names that will be triggered when the user scrolls.\ne.g. `waterfall parallax-background` installs the `waterfall` and `parallax-background`.",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 112,
              "column": 6
            },
            "end": {
              "line": 114,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "effects-config",
          "description": "An object that configurates the effects installed via the `effects` property. e.g.\n```js\n element.effectsConfig = {\n  \"blend-background\": {\n    \"startsAt\": 0.5\n  }\n};\n```\nEvery effect has at least two config properties: `startsAt` and `endsAt`.\nThese properties indicate when the event should start and end respectively\nand relative to the overall element progress. So for example, if `blend-background`\nstarts at `0.5`, the effect will only start once the current element reaches 0.5\nof its progress. In this context, the progress is a value in the range of `[0, 1]`\nthat indicates where this element is on the screen relative to the viewport.",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 132,
              "column": 6
            },
            "end": {
              "line": 137,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "disabled",
          "description": "Disables CSS transitions and scroll effects on the element.",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 142,
              "column": 6
            },
            "end": {
              "line": 146,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "threshold",
          "description": "Allows to set a `scrollTop` threshold. When greater than 0, `thresholdTriggered`\nis true only when the scroll target's `scrollTop` has reached this value.\n\nFor example, if `threshold = 100`, `thresholdTriggered` is true when the `scrollTop`\nis at least `100`.",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 155,
              "column": 6
            },
            "end": {
              "line": 158,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "threshold-triggered",
          "description": "True if the `scrollTop` threshold (set in `scrollTopThreshold`) has\nbeen reached.",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 164,
              "column": 6
            },
            "end": {
              "line": 169,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "condenses",
          "description": "If true, the header will automatically collapse when scrolling down.\nThat is, the `sticky` element remains visible when the header is fully condensed\nwhereas the rest of the elements will collapse below `sticky` element.\n\nBy default, the `sticky` element is the first toolbar in the light DOM:\n\n```html\n<app-header condenses>\n  <app-toolbar>This toolbar remains on top</app-toolbar>\n  <app-toolbar></app-toolbar>\n  <app-toolbar></app-toolbar>\n</app-header>\n```\n\nAdditionally, you can specify which toolbar or element remains visible in condensed mode\nby adding the `sticky` attribute to that element. For example: if we want the last\ntoolbar to remain visible, we can add the `sticky` attribute to it.\n\n```html\n<app-header condenses>\n  <app-toolbar></app-toolbar>\n  <app-toolbar></app-toolbar>\n  <app-toolbar sticky>This toolbar remains on top</app-toolbar>\n</app-header>\n```\n\nNote the `sticky` element must be a direct child of `app-header`.",
          "sourceRange": {
            "start": {
              "line": 351,
              "column": 8
            },
            "end": {
              "line": 354,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "fixed",
          "description": "Mantains the header fixed at the top so it never moves away.",
          "sourceRange": {
            "start": {
              "line": 359,
              "column": 8
            },
            "end": {
              "line": 362,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "reveals",
          "description": "Slides back the header when scrolling back up.",
          "sourceRange": {
            "start": {
              "line": 367,
              "column": 8
            },
            "end": {
              "line": 370,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "shadow",
          "description": "Displays a shadow below the header.",
          "sourceRange": {
            "start": {
              "line": 375,
              "column": 8
            },
            "end": {
              "line": 379,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "threshold-triggered-changed",
          "description": "Fired when the `thresholdTriggered` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "components/app-layout/app-header/app-header.html",
            "start": {
              "line": 308,
              "column": 6
            },
            "end": {
              "line": 308,
              "column": 29
            }
          }
        }
      ],
      "tagname": "app-header"
    },
    {
      "description": "app-toolbar is a horizontal toolbar containing items that can be used for\nlabel, navigation, search and actions.\n\n### Example\n\nAdd a title to the toolbar.\n\n```html\n<app-toolbar>\n  <div main-title>App name</div>\n</app-toolbar>\n```\n\nAdd a button to the left and right side of the toolbar.\n\n```html\n<app-toolbar>\n  <paper-icon-button icon=\"menu\"></paper-icon-button>\n  <div main-title>App name</div>\n  <paper-icon-button icon=\"search\"></paper-icon-button>\n</app-toolbar>\n```\n\nYou can use the attributes `top-item` or `bottom-item` to completely fit an element\nto the top or bottom of the toolbar respectively.\n\n### Content attributes\n\nAttribute            | Description\n---------------------|---------------------------------------------------------\n`main-title`         | The main title element.\n`condensed-title`    | The title element if used inside a condensed app-header.\n`spacer`             | Adds a left margin of `64px`.\n`bottom-item`        | Sticks the element to the bottom of the toolbar.\n`top-item`           | Sticks the element to the top of the toolbar.\n\n### Styling\n\nCustom property              | Description                  | Default\n-----------------------------|------------------------------|-----------------------\n`--app-toolbar-font-size`    | Toolbar font size            | 20px",
      "summary": "",
      "path": "components\\app-layout\\app-toolbar\\app-toolbar.html",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [
        {
          "url": "app-toolbar/demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 114,
          "column": 12
        },
        "end": {
          "line": 116,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "components/app-layout/app-toolbar/app-toolbar.html",
            "start": {
              "line": 109,
              "column": 4
            },
            "end": {
              "line": 109,
              "column": 17
            }
          }
        }
      ],
      "tagname": "app-toolbar"
    },
    {
      "description": "iron-request can be used to perform XMLHttpRequests.\n\n    <iron-request id=\"xhr\"></iron-request>\n    ...\n    this.$.xhr.send({url: url, body: params});",
      "summary": "",
      "path": "components\\iron-ajax\\iron-request.html",
      "properties": [
        {
          "name": "hostAttributes",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "xhr",
          "type": "XMLHttpRequest",
          "description": "A reference to the XMLHttpRequest instance used to generate the\nnetwork request.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 37,
              "column": 6
            },
            "end": {
              "line": 44,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          }
        },
        {
          "name": "response",
          "type": "*",
          "description": "A reference to the parsed response body, if the `xhr` has completely\nresolved.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 6
            },
            "end": {
              "line": 60,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "status",
          "type": "number",
          "description": "A reference to the status code, if the `xhr` has completely resolved.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 6
            },
            "end": {
              "line": 70,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "statusText",
          "type": "string",
          "description": "A reference to the status text, if the `xhr` has completely resolved.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 6
            },
            "end": {
              "line": 80,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "completes",
          "type": "Promise",
          "description": "A promise that resolves when the `xhr` response comes back, or rejects\nif there is an error before the `xhr` completes.\nThe resolve callback is called with the original request as an argument.\nBy default, the reject callback is called with an `Error` as an argument.\nIf `rejectWithRequest` is true, the reject callback is called with an\nobject with two keys: `request`, the original request, and `error`, the\nerror object.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 93,
              "column": 6
            },
            "end": {
              "line": 103,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          }
        },
        {
          "name": "progress",
          "type": "Object",
          "description": "An object that contains progress information emitted by the XHR if\navailable.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 111,
              "column": 6
            },
            "end": {
              "line": 118,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "defaultValue": "{}"
        },
        {
          "name": "aborted",
          "type": "boolean",
          "description": "Aborted will be true if an abort of the request is attempted.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 6
            },
            "end": {
              "line": 128,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "errored",
          "type": "boolean",
          "description": "Errored will be true if the browser fired an error event from the\nXHR object (mainly network errors).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 6
            },
            "end": {
              "line": 139,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "timedOut",
          "type": "boolean",
          "description": "TimedOut will be true if the XHR threw a timeout event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 6
            },
            "end": {
              "line": 149,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "succeeded",
          "type": "Function",
          "description": "Succeeded is true if the request succeeded. The request succeeded if it\nloaded without error, wasn't aborted, and the status code is ≥ 200, and\n< 300, or if the status code is 0.\n\nThe status code 0 is accepted as a success because some schemes - e.g.\nfile:// - don't provide status codes.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 162,
              "column": 4
            },
            "end": {
              "line": 172,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        }
      ],
      "methods": [
        {
          "name": "send",
          "description": "Sends an HTTP request to the server and returns a promise (see the `completes`\nproperty for details).\n\nThe handling of the `body` parameter will vary based on the Content-Type\nheader. See the docs for iron-ajax's `body` property for details.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 204,
              "column": 4
            },
            "end": {
              "line": 338,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "options",
              "type": "{url: string, method: (string | undefined), async: (boolean | undefined), body: (ArrayBuffer | ArrayBufferView | Blob | Document | FormData | null | string | undefined | Object), headers: (Object | undefined), handleAs: (string | undefined), jsonPrefix: (string | undefined), withCredentials: (boolean | undefined), timeout: (Number | undefined), rejectWithRequest: (boolean | undefined)}",
              "description": "  - url The url to which the request is sent.\n  - method The HTTP method to use, default is GET.\n  - async By default, all requests are sent asynchronously. To send synchronous requests,\n        set to false.\n  -  body The content for the request body for POST method.\n  -  headers HTTP request headers.\n  -  handleAs The response type. Default is 'text'.\n  -  withCredentials Whether or not to send credentials on the request. Default is false.\n  -  timeout - Timeout for request, in milliseconds.\n  -  rejectWithRequest Set to true to include the request object with promise rejections."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "parseResponse",
          "description": "Attempts to parse the response body of the XHR. If parsing succeeds,\nthe value returned will be deserialized based on the `responseType`\nset on the XHR.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 348,
              "column": 4
            },
            "end": {
              "line": 401,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "*",
            "desc": "The parsed response,\nor undefined if there was an empty response or parsing failed."
          }
        },
        {
          "name": "abort",
          "description": "Aborts the request.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 406,
              "column": 4
            },
            "end": {
              "line": 409,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_encodeBodyObject",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 418,
              "column": 4
            },
            "end": {
              "line": 430,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "body",
              "type": "*",
              "description": "The given body of the request to try and encode."
            },
            {
              "name": "contentType",
              "type": "?string",
              "description": "The given content type, to infer an encoding\n    from."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Either the encoded body as a string, if successful,\n    or the unaltered body object if no encoding could be inferred."
          }
        },
        {
          "name": "_wwwFormUrlEncode",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 436,
              "column": 4
            },
            "end": {
              "line": 449,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to encode as x-www-form-urlencoded."
            }
          ],
          "return": {
            "type": "string",
            "desc": "."
          }
        },
        {
          "name": "_wwwFormUrlEncodePiece",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 455,
              "column": 4
            },
            "end": {
              "line": 464,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str",
              "type": "*",
              "description": "A key or value to encode as x-www-form-urlencoded."
            }
          ],
          "return": {
            "type": "string",
            "desc": "."
          }
        },
        {
          "name": "_updateStatus",
          "description": "Updates the status code and status text.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 469,
              "column": 4
            },
            "end": {
              "line": 472,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 22,
          "column": 10
        },
        "end": {
          "line": 473,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "xhr",
          "description": "A reference to the XMLHttpRequest instance used to generate the\nnetwork request.",
          "sourceRange": {
            "start": {
              "line": 37,
              "column": 6
            },
            "end": {
              "line": 44,
              "column": 7
            }
          },
          "metadata": {},
          "type": "XMLHttpRequest"
        },
        {
          "name": "response",
          "description": "A reference to the parsed response body, if the `xhr` has completely\nresolved.",
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 6
            },
            "end": {
              "line": 60,
              "column": 7
            }
          },
          "metadata": {},
          "type": "*"
        },
        {
          "name": "status",
          "description": "A reference to the status code, if the `xhr` has completely resolved.",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 6
            },
            "end": {
              "line": 70,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "status-text",
          "description": "A reference to the status text, if the `xhr` has completely resolved.",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 6
            },
            "end": {
              "line": 80,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "completes",
          "description": "A promise that resolves when the `xhr` response comes back, or rejects\nif there is an error before the `xhr` completes.\nThe resolve callback is called with the original request as an argument.\nBy default, the reject callback is called with an `Error` as an argument.\nIf `rejectWithRequest` is true, the reject callback is called with an\nobject with two keys: `request`, the original request, and `error`, the\nerror object.",
          "sourceRange": {
            "start": {
              "line": 93,
              "column": 6
            },
            "end": {
              "line": 103,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Promise"
        },
        {
          "name": "progress",
          "description": "An object that contains progress information emitted by the XHR if\navailable.",
          "sourceRange": {
            "start": {
              "line": 111,
              "column": 6
            },
            "end": {
              "line": 118,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "aborted",
          "description": "Aborted will be true if an abort of the request is attempted.",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 6
            },
            "end": {
              "line": 128,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "errored",
          "description": "Errored will be true if the browser fired an error event from the\nXHR object (mainly network errors).",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 6
            },
            "end": {
              "line": 139,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "timed-out",
          "description": "TimedOut will be true if the XHR threw a timeout event.",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 6
            },
            "end": {
              "line": 149,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "xhr-changed",
          "description": "Fired when the `xhr` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "response-changed",
          "description": "Fired when the `response` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "status-changed",
          "description": "Fired when the `status` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "status-text-changed",
          "description": "Fired when the `statusText` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "completes-changed",
          "description": "Fired when the `completes` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "progress-changed",
          "description": "Fired when the `progress` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "aborted-changed",
          "description": "Fired when the `aborted` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "errored-changed",
          "description": "Fired when the `errored` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "timed-out-changed",
          "description": "Fired when the `timedOut` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-request"
    },
    {
      "description": "The `iron-ajax` element exposes network request functionality.\n\n    <iron-ajax\n        auto\n        url=\"https://www.googleapis.com/youtube/v3/search\"\n        params='{\"part\":\"snippet\", \"q\":\"polymer\", \"key\": \"YOUTUBE_API_KEY\", \"type\": \"video\"}'\n        handle-as=\"json\"\n        on-response=\"handleResponse\"\n        debounce-duration=\"300\"></iron-ajax>\n\nWith `auto` set to `true`, the element performs a request whenever\nits `url`, `params` or `body` properties are changed. Automatically generated\nrequests will be debounced in the case that multiple attributes are changed\nsequentially.\n\nNote: The `params` attribute must be double quoted JSON.\n\nYou can trigger a request explicitly by calling `generateRequest` on the\nelement.",
      "summary": "",
      "path": "components\\iron-ajax\\iron-ajax.html",
      "properties": [
        {
          "name": "hostAttributes",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "url",
          "type": "string",
          "description": "The URL target of the request.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 6
            },
            "end": {
              "line": 97,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "params",
          "type": "Object",
          "description": "An object that contains query parameters to be appended to the\nspecified `url` when generating a request. If you wish to set the body\ncontent when making a POST request, you should use the `body` property\ninstead.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 105,
              "column": 6
            },
            "end": {
              "line": 110,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "method",
          "type": "string",
          "description": "The HTTP method to use such as 'GET', 'POST', 'PUT', or 'DELETE'.\nDefault is 'GET'.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 6
            },
            "end": {
              "line": 119,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"GET\""
        },
        {
          "name": "headers",
          "type": "Object",
          "description": "HTTP request headers to send.\n\nExample:\n\n    <iron-ajax\n        auto\n        url=\"http://somesite.com\"\n        headers='{\"X-Requested-With\": \"XMLHttpRequest\"}'\n        handle-as=\"json\"></iron-ajax>\n\nNote: setting a `Content-Type` header here will override the value\nspecified by the `contentType` property of this element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 6
            },
            "end": {
              "line": 140,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "contentType",
          "type": "string",
          "description": "Content type to use when sending data. If the `contentType` property\nis set and a `Content-Type` header is specified in the `headers`\nproperty, the `headers` property value will take precedence.\n\nVaries the handling of the `body` param.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 6
            },
            "end": {
              "line": 152,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null"
        },
        {
          "name": "body",
          "type": "Object",
          "description": "Body content to send with the request, typically used with \"POST\"\nrequests.\n\nIf body is a string it will be sent unmodified.\n\nIf Content-Type is set to a value listed below, then\nthe body will be encoded accordingly.\n\n   * `content-type=\"application/json\"`\n     * body is encoded like `{\"foo\":\"bar baz\",\"x\":1}`\n   * `content-type=\"application/x-www-form-urlencoded\"`\n     * body is encoded like `foo=bar+baz&x=1`\n\nOtherwise the body will be passed to the browser unmodified, and it\nwill handle any encoding (e.g. for FormData, Blob, ArrayBuffer).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 173,
              "column": 6
            },
            "end": {
              "line": 176,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null"
        },
        {
          "name": "sync",
          "type": "boolean",
          "description": "Toggle whether XHR is synchronous or asynchronous. Don't change this\nto true unless You Know What You Are Doing™.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 182,
              "column": 6
            },
            "end": {
              "line": 185,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "handleAs",
          "type": "string",
          "description": "Specifies what data to store in the `response` property, and\nto deliver as `event.detail.response` in `response` events.\n\nOne of:\n\n   `text`: uses `XHR.responseText`.\n\n   `xml`: uses `XHR.responseXML`.\n\n   `json`: uses `XHR.responseText` parsed as JSON.\n\n   `arraybuffer`: uses `XHR.response`.\n\n   `blob`: uses `XHR.response`.\n\n   `document`: uses `XHR.response`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"json\""
        },
        {
          "name": "withCredentials",
          "type": "boolean",
          "description": "Set the withCredentials flag on the request.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 213,
              "column": 6
            },
            "end": {
              "line": 216,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "timeout",
          "type": "number",
          "description": "Set the timeout flag on the request.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 6
            },
            "end": {
              "line": 224,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "auto",
          "type": "boolean",
          "description": "If true, automatically performs an Ajax request when either `url` or\n`params` changes.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 230,
              "column": 6
            },
            "end": {
              "line": 233,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "verbose",
          "type": "boolean",
          "description": "If true, error messages will automatically be logged to the console.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 6
            },
            "end": {
              "line": 241,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "lastRequest",
          "type": "(Object | undefined)",
          "description": "The most recent request made by this iron-ajax element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 248,
              "column": 6
            },
            "end": {
              "line": 252,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          }
        },
        {
          "name": "lastProgress",
          "type": "(Object | undefined)",
          "description": "The `progress` property of this element's `lastRequest`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 259,
              "column": 6
            },
            "end": {
              "line": 263,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          }
        },
        {
          "name": "loading",
          "type": "boolean",
          "description": "True while lastRequest is in flight.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 268,
              "column": 6
            },
            "end": {
              "line": 272,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          }
        },
        {
          "name": "lastResponse",
          "type": "Object",
          "description": "lastRequest's response.\n\nNote that lastResponse and lastError are set when lastRequest finishes,\nso if loading is true, then lastResponse and lastError will correspond\nto the result of the previous request.\n\nThe type of the response is determined by the value of `handleAs` at\nthe time that the request was generated.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 286,
              "column": 6
            },
            "end": {
              "line": 290,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          }
        },
        {
          "name": "lastError",
          "type": "Object",
          "description": "lastRequest's error, if any.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 297,
              "column": 6
            },
            "end": {
              "line": 301,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          }
        },
        {
          "name": "activeRequests",
          "type": "Array",
          "description": "An Array of all in-flight requests originating from this iron-ajax\nelement.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 307,
              "column": 6
            },
            "end": {
              "line": 314,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "defaultValue": "[]"
        },
        {
          "name": "debounceDuration",
          "type": "number",
          "description": "Length of time in milliseconds to debounce multiple automatically generated requests.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 319,
              "column": 6
            },
            "end": {
              "line": 323,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "jsonPrefix",
          "type": "string",
          "description": "Prefix to be stripped from a JSON response before parsing it.\n\nIn order to prevent an attack using CSRF with Array responses\n(http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx/)\nmany backends will mitigate this by prefixing all JSON response bodies\nwith a string that would be nonsensical to a JavaScript parser.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 334,
              "column": 6
            },
            "end": {
              "line": 337,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\""
        },
        {
          "name": "bubbles",
          "type": "boolean",
          "description": "By default, iron-ajax's events do not bubble. Setting this attribute will cause its\nrequest and response events as well as its iron-ajax-request, -response,  and -error\nevents to bubble to the window object. The vanilla error event never bubbles when\nusing shadow dom even if this.bubbles is true because a scoped flag is not passed with\nit (first link) and because the shadow dom spec did not used to allow certain events,\nincluding events named error, to leak outside of shadow trees (second link).\nhttps://www.w3.org/TR/shadow-dom/#scoped-flag\nhttps://www.w3.org/TR/2015/WD-shadow-dom-20151215/#events-that-are-not-leaked-into-ancestor-trees",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 349,
              "column": 6
            },
            "end": {
              "line": 352,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "rejectWithRequest",
          "type": "boolean",
          "description": "Changes the [`completes`](iron-request#property-completes) promise chain \nfrom `generateRequest` to reject with an object\ncontaining the original request, as well an error message.\nIf false (default), the promise rejects with an error message only.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 360,
              "column": 6
            },
            "end": {
              "line": 363,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_boundHandleResponse",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 365,
              "column": 6
            },
            "end": {
              "line": 370,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "queryString",
          "type": "Function",
          "description": "The query string that should be appended to the `url`, serialized from\nthe current value of `params`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 388,
              "column": 4
            },
            "end": {
              "line": 409,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        },
        {
          "name": "requestUrl",
          "type": "Function",
          "description": "The `url` with query string (if `params` are specified), suitable for\nproviding to an `iron-request` instance.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 417,
              "column": 4
            },
            "end": {
              "line": 427,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        },
        {
          "name": "requestHeaders",
          "type": "Function",
          "description": "An object that maps header names to header values, first applying the\nthe value of `Content-Type` and then overlaying the headers specified\nin the `headers` property.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 436,
              "column": 4
            },
            "end": {
              "line": 454,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        }
      ],
      "methods": [
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 378,
              "column": 4
            },
            "end": {
              "line": 380,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onProgressChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 456,
              "column": 4
            },
            "end": {
              "line": 458,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "toRequestOptions",
          "description": "Request options suitable for generating an `iron-request` instance based\non the current state of the `iron-ajax` instance's properties.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 474,
              "column": 4
            },
            "end": {
              "line": 487,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "{url: string, method: (string | undefined), async: (boolean | undefined), body: (ArrayBuffer | ArrayBufferView | Blob | Document | FormData | null | string | undefined | Object), headers: (Object | undefined), handleAs: (string | undefined), jsonPrefix: (string | undefined), withCredentials: (boolean | undefined)}"
          }
        },
        {
          "name": "generateRequest",
          "description": "Performs an AJAX request to the specified URL.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 494,
              "column": 4
            },
            "end": {
              "line": 549,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!IronRequestElement"
          }
        },
        {
          "name": "_handleResponse",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 551,
              "column": 4
            },
            "end": {
              "line": 565,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request"
            }
          ]
        },
        {
          "name": "_handleError",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 567,
              "column": 4
            },
            "end": {
              "line": 600,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request"
            },
            {
              "name": "error"
            }
          ]
        },
        {
          "name": "_discardRequest",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 602,
              "column": 4
            },
            "end": {
              "line": 608,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request"
            }
          ]
        },
        {
          "name": "_requestOptionsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 610,
              "column": 4
            },
            "end": {
              "line": 620,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 41,
          "column": 10
        },
        "end": {
          "line": 622,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "url",
          "description": "The URL target of the request.",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 6
            },
            "end": {
              "line": 97,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "params",
          "description": "An object that contains query parameters to be appended to the\nspecified `url` when generating a request. If you wish to set the body\ncontent when making a POST request, you should use the `body` property\ninstead.",
          "sourceRange": {
            "start": {
              "line": 105,
              "column": 6
            },
            "end": {
              "line": 110,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "method",
          "description": "The HTTP method to use such as 'GET', 'POST', 'PUT', or 'DELETE'.\nDefault is 'GET'.",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 6
            },
            "end": {
              "line": 119,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "headers",
          "description": "HTTP request headers to send.\n\nExample:\n\n    <iron-ajax\n        auto\n        url=\"http://somesite.com\"\n        headers='{\"X-Requested-With\": \"XMLHttpRequest\"}'\n        handle-as=\"json\"></iron-ajax>\n\nNote: setting a `Content-Type` header here will override the value\nspecified by the `contentType` property of this element.",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 6
            },
            "end": {
              "line": 140,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "content-type",
          "description": "Content type to use when sending data. If the `contentType` property\nis set and a `Content-Type` header is specified in the `headers`\nproperty, the `headers` property value will take precedence.\n\nVaries the handling of the `body` param.",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 6
            },
            "end": {
              "line": 152,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "body",
          "description": "Body content to send with the request, typically used with \"POST\"\nrequests.\n\nIf body is a string it will be sent unmodified.\n\nIf Content-Type is set to a value listed below, then\nthe body will be encoded accordingly.\n\n   * `content-type=\"application/json\"`\n     * body is encoded like `{\"foo\":\"bar baz\",\"x\":1}`\n   * `content-type=\"application/x-www-form-urlencoded\"`\n     * body is encoded like `foo=bar+baz&x=1`\n\nOtherwise the body will be passed to the browser unmodified, and it\nwill handle any encoding (e.g. for FormData, Blob, ArrayBuffer).",
          "sourceRange": {
            "start": {
              "line": 173,
              "column": 6
            },
            "end": {
              "line": 176,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "sync",
          "description": "Toggle whether XHR is synchronous or asynchronous. Don't change this\nto true unless You Know What You Are Doing™.",
          "sourceRange": {
            "start": {
              "line": 182,
              "column": 6
            },
            "end": {
              "line": 185,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "handle-as",
          "description": "Specifies what data to store in the `response` property, and\nto deliver as `event.detail.response` in `response` events.\n\nOne of:\n\n   `text`: uses `XHR.responseText`.\n\n   `xml`: uses `XHR.responseXML`.\n\n   `json`: uses `XHR.responseText` parsed as JSON.\n\n   `arraybuffer`: uses `XHR.response`.\n\n   `blob`: uses `XHR.response`.\n\n   `document`: uses `XHR.response`.",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "with-credentials",
          "description": "Set the withCredentials flag on the request.",
          "sourceRange": {
            "start": {
              "line": 213,
              "column": 6
            },
            "end": {
              "line": 216,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "timeout",
          "description": "Set the timeout flag on the request.",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 6
            },
            "end": {
              "line": 224,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "auto",
          "description": "If true, automatically performs an Ajax request when either `url` or\n`params` changes.",
          "sourceRange": {
            "start": {
              "line": 230,
              "column": 6
            },
            "end": {
              "line": 233,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "verbose",
          "description": "If true, error messages will automatically be logged to the console.",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 6
            },
            "end": {
              "line": 241,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "last-request",
          "description": "The most recent request made by this iron-ajax element.",
          "sourceRange": {
            "start": {
              "line": 248,
              "column": 6
            },
            "end": {
              "line": 252,
              "column": 7
            }
          },
          "metadata": {},
          "type": "(Object | undefined)"
        },
        {
          "name": "last-progress",
          "description": "The `progress` property of this element's `lastRequest`.",
          "sourceRange": {
            "start": {
              "line": 259,
              "column": 6
            },
            "end": {
              "line": 263,
              "column": 7
            }
          },
          "metadata": {},
          "type": "(Object | undefined)"
        },
        {
          "name": "loading",
          "description": "True while lastRequest is in flight.",
          "sourceRange": {
            "start": {
              "line": 268,
              "column": 6
            },
            "end": {
              "line": 272,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "last-response",
          "description": "lastRequest's response.\n\nNote that lastResponse and lastError are set when lastRequest finishes,\nso if loading is true, then lastResponse and lastError will correspond\nto the result of the previous request.\n\nThe type of the response is determined by the value of `handleAs` at\nthe time that the request was generated.",
          "sourceRange": {
            "start": {
              "line": 286,
              "column": 6
            },
            "end": {
              "line": 290,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "last-error",
          "description": "lastRequest's error, if any.",
          "sourceRange": {
            "start": {
              "line": 297,
              "column": 6
            },
            "end": {
              "line": 301,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "active-requests",
          "description": "An Array of all in-flight requests originating from this iron-ajax\nelement.",
          "sourceRange": {
            "start": {
              "line": 307,
              "column": 6
            },
            "end": {
              "line": 314,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "debounce-duration",
          "description": "Length of time in milliseconds to debounce multiple automatically generated requests.",
          "sourceRange": {
            "start": {
              "line": 319,
              "column": 6
            },
            "end": {
              "line": 323,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "json-prefix",
          "description": "Prefix to be stripped from a JSON response before parsing it.\n\nIn order to prevent an attack using CSRF with Array responses\n(http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx/)\nmany backends will mitigate this by prefixing all JSON response bodies\nwith a string that would be nonsensical to a JavaScript parser.",
          "sourceRange": {
            "start": {
              "line": 334,
              "column": 6
            },
            "end": {
              "line": 337,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "bubbles",
          "description": "By default, iron-ajax's events do not bubble. Setting this attribute will cause its\nrequest and response events as well as its iron-ajax-request, -response,  and -error\nevents to bubble to the window object. The vanilla error event never bubbles when\nusing shadow dom even if this.bubbles is true because a scoped flag is not passed with\nit (first link) and because the shadow dom spec did not used to allow certain events,\nincluding events named error, to leak outside of shadow trees (second link).\nhttps://www.w3.org/TR/shadow-dom/#scoped-flag\nhttps://www.w3.org/TR/2015/WD-shadow-dom-20151215/#events-that-are-not-leaked-into-ancestor-trees",
          "sourceRange": {
            "start": {
              "line": 349,
              "column": 6
            },
            "end": {
              "line": 352,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "reject-with-request",
          "description": "Changes the [`completes`](iron-request#property-completes) promise chain \nfrom `generateRequest` to reject with an object\ncontaining the original request, as well an error message.\nIf false (default), the promise rejects with an error message only.",
          "sourceRange": {
            "start": {
              "line": 360,
              "column": 6
            },
            "end": {
              "line": 363,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "error",
          "description": "error",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "iron-ajax-error",
          "description": "iron-ajax-error",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "iron-ajax-presend",
          "description": "iron-ajax-presend",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "iron-ajax-request",
          "description": "iron-ajax-request",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "iron-ajax-response",
          "description": "iron-ajax-response",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "request",
          "description": "request",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "response",
          "description": "response",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "last-request-changed",
          "description": "Fired when the `lastRequest` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "last-progress-changed",
          "description": "Fired when the `lastProgress` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "loading-changed",
          "description": "Fired when the `loading` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "last-response-changed",
          "description": "Fired when the `lastResponse` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "last-error-changed",
          "description": "Fired when the `lastError` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "active-requests-changed",
          "description": "Fired when the `activeRequests` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "debounce-duration-changed",
          "description": "Fired when the `debounceDuration` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-ajax"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-doc-viewer\\iron-doc-nav.html",
      "properties": [
        {
          "name": "descriptor",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 8
            },
            "end": {
              "line": 128,
              "column": 66
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_descriptorChanged\""
            }
          }
        },
        {
          "name": "path",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 130,
              "column": 8
            },
            "end": {
              "line": 130,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "baseHref",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 8
            },
            "end": {
              "line": 132,
              "column": 44
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"#\""
        },
        {
          "name": "_sections",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 8
            },
            "end": {
              "line": 134,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "_descriptorChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 137,
              "column": 6
            },
            "end": {
              "line": 165,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descriptor"
            }
          ]
        },
        {
          "name": "_select",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 167,
              "column": 6
            },
            "end": {
              "line": 169,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "_isSelected",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 171,
              "column": 6
            },
            "end": {
              "line": 173,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ]
        },
        {
          "name": "_isExpanded",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 175,
              "column": 6
            },
            "end": {
              "line": 179,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "path"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 124,
          "column": 12
        },
        "end": {
          "line": 180,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "descriptor",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 8
            },
            "end": {
              "line": 128,
              "column": 66
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "path",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 130,
              "column": 8
            },
            "end": {
              "line": 130,
              "column": 20
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "base-href",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 8
            },
            "end": {
              "line": 132,
              "column": 44
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-doc-nav"
    },
    {
      "description": "The `iron-location` element manages binding to and from the current URL.\n\niron-location is the first, and lowest level element in the Polymer team's\nrouting system. This is a beta release of iron-location as we continue work\non higher level elements, and as such iron-location may undergo breaking\nchanges.\n\n#### Properties\n\nWhen the URL is: `/search?query=583#details` iron-location's properties will be:\n\n  - path: `'/search'`\n  - query: `'query=583'`\n  - hash: `'details'`\n\nThese bindings are bidirectional. Modifying them will in turn modify the URL.\n\niron-location is only active while it is attached to the document.\n\n#### Links\n\nWhile iron-location is active in the document it will intercept clicks on links\nwithin your site, updating the URL pushing the updated URL out through the\ndatabinding system. iron-location only intercepts clicks with the intent to\nopen in the same window, so middle mouse clicks and ctrl/cmd clicks work fine.\n\nYou can customize this behavior with the `urlSpaceRegex`.\n\n#### Dwell Time\n\niron-location protects against accidental history spamming by only adding\nentries to the user's history if the URL stays unchanged for `dwellTime`\nmilliseconds.",
      "summary": "",
      "path": "components\\iron-location\\iron-location.html",
      "properties": [
        {
          "name": "path",
          "type": "string",
          "description": "The pathname component of the URL.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 8
            },
            "end": {
              "line": 101,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "query",
          "type": "string",
          "description": "The query string portion of the URL.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 8
            },
            "end": {
              "line": 112,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "hash",
          "type": "string",
          "description": "The hash component of the URL.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 8
            },
            "end": {
              "line": 123,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "dwellTime",
          "type": "number",
          "description": "If the user was on a URL for less than `dwellTime` milliseconds, it\nwon't be added to the browser's history, but instead will be replaced\nby the next entry.\n\nThis is to prevent large numbers of entries from clogging up the user's\nbrowser history. Disable by setting to a negative number.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 133,
              "column": 8
            },
            "end": {
              "line": 136,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "2000"
        },
        {
          "name": "urlSpaceRegex",
          "type": "(string | RegExp)",
          "description": "A regexp that defines the set of URLs that should be considered part\nof this web app.\n\nClicking on a link that matches this regex won't result in a full page\nnavigation, but will instead just update the URL state in place.\n\nThis regexp is given everything after the origin in an absolute\nURL. So to match just URLs that start with /search/ do:\n    url-space-regex=\"^/search/\"",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 8
            },
            "end": {
              "line": 154,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\""
        },
        {
          "name": "encodeSpaceAsPlusInQuery",
          "type": "boolean",
          "description": "A flag that specifies whether the spaces in query that would normally be encoded as %20 should be\nencoded as +.\n\nGiven an example text \"hello world\", it is encoded in query as\n- \"hello%20world\" without the parameter\n- \"hello+world\" with the parameter",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 8
            },
            "end": {
              "line": 167,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_urlSpaceRegExp",
          "type": "RegExp",
          "description": "urlSpaceRegex, but coerced into a regexp.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 8
            },
            "end": {
              "line": 176,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_lastChangedAt",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 178,
              "column": 8
            },
            "end": {
              "line": 180,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_initialized",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 182,
              "column": 8
            },
            "end": {
              "line": 185,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "hostAttributes",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 6
            },
            "end": {
              "line": 190,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 196,
              "column": 6
            },
            "end": {
              "line": 198,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 6
            },
            "end": {
              "line": 211,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 213,
              "column": 6
            },
            "end": {
              "line": 219,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_hashChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 6
            },
            "end": {
              "line": 223,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_urlChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 225,
              "column": 6
            },
            "end": {
              "line": 237,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getUrl",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 239,
              "column": 6
            },
            "end": {
              "line": 255,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateUrl",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 257,
              "column": 6
            },
            "end": {
              "line": 284,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_globalOnClick",
          "description": "A necessary evil so that links work as expected. Does its best to\nbail out early if possible.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 292,
              "column": 6
            },
            "end": {
              "line": 316,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "."
            }
          ]
        },
        {
          "name": "_getSameOriginLinkHref",
          "description": "Returns the absolute URL of the link (if any) that this click event\nis clicking on, if we can and should override the resulting full\npage navigation. Returns null otherwise.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 326,
              "column": 6
            },
            "end": {
              "line": 433,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "."
            }
          ],
          "return": {
            "type": "string?",
            "desc": "."
          }
        },
        {
          "name": "_makeRegExp",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 435,
              "column": 6
            },
            "end": {
              "line": 437,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "urlSpaceRegex"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 88,
          "column": 12
        },
        "end": {
          "line": 438,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "path",
          "description": "The pathname component of the URL.",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 8
            },
            "end": {
              "line": 101,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "query",
          "description": "The query string portion of the URL.",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 8
            },
            "end": {
              "line": 112,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "hash",
          "description": "The hash component of the URL.",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 8
            },
            "end": {
              "line": 123,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "dwell-time",
          "description": "If the user was on a URL for less than `dwellTime` milliseconds, it\nwon't be added to the browser's history, but instead will be replaced\nby the next entry.\n\nThis is to prevent large numbers of entries from clogging up the user's\nbrowser history. Disable by setting to a negative number.",
          "sourceRange": {
            "start": {
              "line": 133,
              "column": 8
            },
            "end": {
              "line": 136,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "url-space-regex",
          "description": "A regexp that defines the set of URLs that should be considered part\nof this web app.\n\nClicking on a link that matches this regex won't result in a full page\nnavigation, but will instead just update the URL state in place.\n\nThis regexp is given everything after the origin in an absolute\nURL. So to match just URLs that start with /search/ do:\n    url-space-regex=\"^/search/\"",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 8
            },
            "end": {
              "line": 154,
              "column": 9
            }
          },
          "metadata": {},
          "type": "(string | RegExp)"
        },
        {
          "name": "encode-space-as-plus-in-query",
          "description": "A flag that specifies whether the spaces in query that would normally be encoded as %20 should be\nencoded as +.\n\nGiven an example text \"hello world\", it is encoded in query as\n- \"hello%20world\" without the parameter\n- \"hello+world\" with the parameter",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 8
            },
            "end": {
              "line": 167,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "path-changed",
          "description": "Fired when the `path` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "query-changed",
          "description": "Fired when the `query` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "hash-changed",
          "description": "Fired when the `hash` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-location"
    },
    {
      "description": "Element wrapper for the [marked](https://github.com/chjj/marked) library.\n\n`<marked-element>` accepts Markdown source and renders it to a child\nelement with the class `markdown-html`. This child element can be styled\nas you would a normal DOM element. If you do not provide a child element\nwith the `markdown-html` class, the Markdown source will still be rendered,\nbut to a shadow DOM child that cannot be styled.\n\n\n### Markdown Content\n\nThe Markdown source can be specified several ways:\n\n#### Use the `markdown` attribute to bind markdown\n\n    <marked-element markdown=\"`Markdown` is _awesome_!\">\n      <div slot=\"markdown-html\"></div>\n    </marked-element>\n\n#### Use `<script type=\"text/markdown\">` element child to inline markdown\n\n    <marked-element>\n      <div slot=\"markdown-html\"></div>\n      <script type=\"text/markdown\">\n        Check out my markdown!\n\n        We can even embed elements without fear of the HTML parser mucking up their\n        textual representation:\n\n        ```html\n        <awesome-sauce>\n          <div>Oops, I'm about to forget to close this div.\n        </awesome-sauce>\n        ```\n      </script>\n    </marked-element>\n\n#### Use `<script type=\"text/markdown\" src=\"URL\">` element child to specify remote markdown\n\n    <marked-element>\n      <div slot=\"markdown-html\"></div>\n      <script type=\"text/markdown\" src=\"../guidelines.md\"></script>\n    </marked-element>\n\nNote that the `<script type=\"text/markdown\">` approach is *static*. Changes to\nthe script content will *not* update the rendered markdown!\n\nThough, you can data bind to the `src` attribute to change the markdown.\n\n```html\n<marked-element>\n  <div slot=\"markdown-html\"></div>\n  <script type=\"text/markdown\" src$=\"[[source]]\"></script>\n</marked-element>\n...\n<script>\n  ...\n  this.source = '../guidelines.md';\n</script>\n```\n\n### Styling\nIf you are using a child with the `markdown-html` class, you can style it\nas you would a regular DOM element:\n\n    [slot=\"markdown-html\"] p {\n      color: red;\n    }\n\n    [slot=\"markdown-html\"] td:first-child {\n      padding-left: 24px;\n    }",
      "summary": "",
      "path": "components\\marked-element\\marked-element.html",
      "properties": [
        {
          "name": "markdown",
          "type": "string",
          "description": "The markdown source that should be rendered by this element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 6
            },
            "end": {
              "line": 119,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null"
        },
        {
          "name": "breaks",
          "type": "boolean",
          "description": "Enable GFM line breaks (regular newlines instead of two spaces for breaks)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 6
            },
            "end": {
              "line": 126,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "pedantic",
          "type": "boolean",
          "description": "Conform to obscure parts of markdown.pl as much as possible. Don't fix any of the original markdown bugs or poor behavior.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 130,
              "column": 6
            },
            "end": {
              "line": 133,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "renderer",
          "type": "Function",
          "description": "Function used to customize a renderer based on the [API specified in the Marked\nlibrary](https://github.com/chjj/marked#overriding-renderer-methods).\nIt takes one argument: a marked renderer object, which is mutated by the function.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 139,
              "column": 6
            },
            "end": {
              "line": 142,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null"
        },
        {
          "name": "sanitize",
          "type": "boolean",
          "description": "Sanitize the output. Ignore any HTML that has been input.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 146,
              "column": 6
            },
            "end": {
              "line": 149,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "sanitizer",
          "type": "Function",
          "description": "Function used to customize a sanitize behavior.\nIt takes one argument: element String without text Contents.\n\ne.g. `<div>` `<a href=\"/\">` `</p>'.\nNote: To enable this function, must set `sanitize` to true.\nWARNING: If you are using this option to untrusted text, you must to prevent XSS Attacks.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 158,
              "column": 6
            },
            "end": {
              "line": 161,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null"
        },
        {
          "name": "disableRemoteSanitization",
          "type": "boolean",
          "description": "If true, disables the default sanitization of any markdown received by\na request and allows fetched unsanitized markdown\n\ne.g. fetching markdown via `src` that has HTML.\nNote: this value overrides `sanitize` if a request is made.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 6
            },
            "end": {
              "line": 172,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "smartypants",
          "type": "boolean",
          "description": "Use \"smart\" typographic punctuation for things like quotes and dashes.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 176,
              "column": 6
            },
            "end": {
              "line": 179,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "callback",
          "type": "Function",
          "description": "Callback function invoked by Marked after HTML has been rendered.\nIt must take two arguments: err and text and must return the resulting text.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 6
            },
            "end": {
              "line": 187,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null"
        },
        {
          "name": "xhr",
          "type": "XMLHttpRequest",
          "description": "A reference to the XMLHttpRequest instance used to generate the\nnetwork request.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 6
            },
            "end": {
              "line": 198,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          }
        },
        {
          "name": "outputElement",
          "type": "Function",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 262,
              "column": 4
            },
            "end": {
              "line": 265,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 4
            },
            "end": {
              "line": 228,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "attached",
          "description": "Renders `markdown` to HTML when the element is attached.\n\nThis serves a dual purpose:\n\n * Prevents unnecessary work (no need to render when not visible).\n\n * `attached` fires top-down, so we can give ancestors a chance to\n   register listeners for the `syntax-highlight` event _before_ we render\n   any markdown.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 242,
              "column": 4
            },
            "end": {
              "line": 246,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 248,
              "column": 4
            },
            "end": {
              "line": 250,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "unindent",
          "description": "Unindents the markdown source that will be rendered.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 258,
              "column": 4
            },
            "end": {
              "line": 260,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text",
              "type": "string"
            }
          ],
          "return": {
            "type": "string"
          }
        },
        {
          "name": "render",
          "description": "Renders `markdown` into this element's DOM.\n\nThis is automatically called whenever the `markdown` property is changed.\n\nThe only case where you should be calling this is if you are providing\nmarkdown via `<script type=\"text/markdown\">` after this element has been\nconstructed (or updating that markdown).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 284,
              "column": 4
            },
            "end": {
              "line": 312,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_highlight",
          "description": "Fired when the content is being processed and before it is rendered.\nProvides an opportunity to highlight code blocks based on the programming language used. This\nis also known as syntax highlighting. One example would be to use a prebuilt syntax\nhighlighting library, e.g with [highlightjs](https://highlightjs.org/).",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 325,
              "column": 4
            },
            "end": {
              "line": 328,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "code",
              "type": "string"
            },
            {
              "name": "lang",
              "type": "string"
            }
          ],
          "return": {
            "type": "string"
          }
        },
        {
          "name": "_unindent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 334,
              "column": 4
            },
            "end": {
              "line": 346,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text",
              "type": "string"
            }
          ],
          "return": {
            "type": "string"
          }
        },
        {
          "name": "_request",
          "description": "Fired when the XHR finishes loading",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 354,
              "column": 4
            },
            "end": {
              "line": 380,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "string"
            }
          ]
        },
        {
          "name": "_handleError",
          "description": "Fired when an error is received while fetching remote markdown content.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 388,
              "column": 4
            },
            "end": {
              "line": 393,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "!Event"
            }
          ]
        },
        {
          "name": "_onScriptAttributeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 398,
              "column": 4
            },
            "end": {
              "line": 404,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mutation",
              "type": "!Array.<!MutationRecord>"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 107,
          "column": 10
        },
        "end": {
          "line": 405,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "markdown",
          "description": "The markdown source that should be rendered by this element.",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 6
            },
            "end": {
              "line": 119,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "breaks",
          "description": "Enable GFM line breaks (regular newlines instead of two spaces for breaks)",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 6
            },
            "end": {
              "line": 126,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "pedantic",
          "description": "Conform to obscure parts of markdown.pl as much as possible. Don't fix any of the original markdown bugs or poor behavior.",
          "sourceRange": {
            "start": {
              "line": 130,
              "column": 6
            },
            "end": {
              "line": 133,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "renderer",
          "description": "Function used to customize a renderer based on the [API specified in the Marked\nlibrary](https://github.com/chjj/marked#overriding-renderer-methods).\nIt takes one argument: a marked renderer object, which is mutated by the function.",
          "sourceRange": {
            "start": {
              "line": 139,
              "column": 6
            },
            "end": {
              "line": 142,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Function"
        },
        {
          "name": "sanitize",
          "description": "Sanitize the output. Ignore any HTML that has been input.",
          "sourceRange": {
            "start": {
              "line": 146,
              "column": 6
            },
            "end": {
              "line": 149,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "sanitizer",
          "description": "Function used to customize a sanitize behavior.\nIt takes one argument: element String without text Contents.\n\ne.g. `<div>` `<a href=\"/\">` `</p>'.\nNote: To enable this function, must set `sanitize` to true.\nWARNING: If you are using this option to untrusted text, you must to prevent XSS Attacks.",
          "sourceRange": {
            "start": {
              "line": 158,
              "column": 6
            },
            "end": {
              "line": 161,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Function"
        },
        {
          "name": "disable-remote-sanitization",
          "description": "If true, disables the default sanitization of any markdown received by\na request and allows fetched unsanitized markdown\n\ne.g. fetching markdown via `src` that has HTML.\nNote: this value overrides `sanitize` if a request is made.",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 6
            },
            "end": {
              "line": 172,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "smartypants",
          "description": "Use \"smart\" typographic punctuation for things like quotes and dashes.",
          "sourceRange": {
            "start": {
              "line": 176,
              "column": 6
            },
            "end": {
              "line": 179,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "callback",
          "description": "Callback function invoked by Marked after HTML has been rendered.\nIt must take two arguments: err and text and must return the resulting text.",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 6
            },
            "end": {
              "line": 187,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Function"
        },
        {
          "name": "xhr",
          "description": "A reference to the XMLHttpRequest instance used to generate the\nnetwork request.",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 6
            },
            "end": {
              "line": 198,
              "column": 7
            }
          },
          "metadata": {},
          "type": "XMLHttpRequest"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "marked-loadend",
          "description": "marked-loadend",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "marked-render-complete",
          "description": "marked-render-complete",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "marked-request-error",
          "description": "marked-request-error",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "syntax-highlight",
          "description": "syntax-highlight",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "xhr-changed",
          "description": "Fired when the `xhr` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "markdown-html",
          "range": {
            "file": "components/marked-element/marked-element.html",
            "start": {
              "line": 98,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 11
            }
          }
        }
      ],
      "tagname": "marked-element"
    },
    {
      "description": "Syntax highlighting via [Prism](http://prismjs.com/).\n\nPlace a `<prism-highlighter>` in your document, preferably as a direct child of\n`<body>`. It will listen for `syntax-highlight` events on its parent element,\nand annotate the code being provided via that event.\n\nThe `syntax-highlight` event's detail is expected to have a `code` property\ncontaining the source to highlight. The event detail can optionally contain a\n`lang` property, containing a string like `\"html\"`, `\"js\"`, etc.\n\nThis flow is supported by [`<marked-element>`](https://github.com/PolymerElements/marked-element).",
      "summary": "",
      "path": "components\\prism-element\\prism-highlighter.html",
      "properties": [
        {
          "name": "languages",
          "type": "!Object",
          "description": "Adds languages outside of the core Prism languages.\n\nPrism includes a few languages in the core library:\n  - JavaScript\n  - Markup\n  - CSS\n  - C-Like\nUse this property to extend the core set with other Prism\ncomponents and custom languages.\n\nExample:\n  ```\n  <!-- with languages = {'custom': myCustomPrismLang}; -->\n  <!-- or languages = Prism.languages; -->\n  <prism-highlighter languages=\"[[languages]]\"></prism-highlighter>\n  ```",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 6
            },
            "end": {
              "line": 67,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 4
            },
            "end": {
              "line": 72,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 74,
              "column": 4
            },
            "end": {
              "line": 76,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 78,
              "column": 4
            },
            "end": {
              "line": 80,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_highlight",
          "description": "Handle the highlighting event, if we can.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 97,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "!CustomEvent"
            }
          ]
        },
        {
          "name": "_detectLang",
          "description": "Picks a Prism formatter based on the `lang` hint and `code`.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 128,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "code",
              "type": "string",
              "description": "The source being highlighted."
            },
            {
              "name": "lang",
              "type": "string=",
              "description": "A language hint (e.g. ````LANG`)."
            }
          ],
          "return": {
            "type": "!Prism.Lang"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 36,
          "column": 10
        },
        "end": {
          "line": 130,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "languages",
          "description": "Adds languages outside of the core Prism languages.\n\nPrism includes a few languages in the core library:\n  - JavaScript\n  - Markup\n  - CSS\n  - C-Like\nUse this property to extend the core set with other Prism\ncomponents and custom languages.\n\nExample:\n  ```\n  <!-- with languages = {'custom': myCustomPrismLang}; -->\n  <!-- or languages = Prism.languages; -->\n  <prism-highlighter languages=\"[[languages]]\"></prism-highlighter>\n  ```",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 6
            },
            "end": {
              "line": 67,
              "column": 7
            }
          },
          "metadata": {},
          "type": "!Object"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "prism-highlighter"
    },
    {
      "description": "Renders documentation describing a function or method.",
      "summary": "",
      "path": "components\\iron-doc-viewer\\iron-doc-function.html",
      "properties": [
        {
          "name": "anchorId",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 8
            },
            "end": {
              "line": 113,
              "column": 69
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\""
        },
        {
          "name": "static",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 8
            },
            "end": {
              "line": 115,
              "column": 45
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_privacy",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 8
            },
            "end": {
              "line": 117,
              "column": 73
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_showParamList",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 119,
              "column": 8
            },
            "end": {
              "line": 120,
              "column": 74
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "addImportPath",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 8
            },
            "end": {
              "line": 122,
              "column": 52
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "_computePrivacy",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 6
            },
            "end": {
              "line": 130,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descriptor"
            }
          ]
        },
        {
          "name": "_computeShowParamList",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 6
            },
            "end": {
              "line": 141,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descriptor"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 109,
          "column": 12
        },
        "end": {
          "line": 142,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "anchor-id",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 8
            },
            "end": {
              "line": 113,
              "column": 69
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "static",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 8
            },
            "end": {
              "line": 115,
              "column": 45
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "add-import-path",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 8
            },
            "end": {
              "line": 122,
              "column": 52
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-doc-function"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-doc-viewer\\iron-doc-hide-bar.html",
      "properties": [
        {
          "name": "visible",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 49,
              "column": 19
            },
            "end": {
              "line": 49,
              "column": 71
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "_toggle",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 51,
              "column": 6
            },
            "end": {
              "line": 54,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ev"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 46,
          "column": 12
        },
        "end": {
          "line": 55,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "visible",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 49,
              "column": 19
            },
            "end": {
              "line": 49,
              "column": 71
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "visible-changed",
          "description": "Fired when the `visible` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "components/iron-doc-viewer/iron-doc-hide-bar.html",
            "start": {
              "line": 39,
              "column": 12
            },
            "end": {
              "line": 39,
              "column": 25
            }
          }
        }
      ],
      "tagname": "iron-doc-hide-bar"
    },
    {
      "description": "Renders documentation describing a specific property of an element, mixin,\nclass, etc.",
      "summary": "",
      "path": "components\\iron-doc-viewer\\iron-doc-property.html",
      "properties": [
        {
          "name": "descriptor",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 8
            },
            "end": {
              "line": 87,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_privacy",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 8
            },
            "end": {
              "line": 89,
              "column": 73
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "anchorId",
          "type": "string",
          "description": "Unique anchor ID for deep-linking.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 8
            },
            "end": {
              "line": 94,
              "column": 69
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\""
        }
      ],
      "methods": [
        {
          "name": "_computePrivacy",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 6
            },
            "end": {
              "line": 102,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descriptor"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 83,
          "column": 12
        },
        "end": {
          "line": 103,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "descriptor",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 8
            },
            "end": {
              "line": 87,
              "column": 34
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "anchor-id",
          "description": "Unique anchor ID for deep-linking.",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 8
            },
            "end": {
              "line": 94,
              "column": 69
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-doc-property"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-doc-viewer\\iron-doc-api.html",
      "properties": [
        {
          "name": "descriptor",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 8
            },
            "end": {
              "line": 154,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "baseHref",
          "type": "string",
          "description": "The base href where this doc viewer is located.",
          "privacy": "public",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 21,
              "column": 6
            },
            "end": {
              "line": 21,
              "column": 41
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "fragmentPrefix",
          "type": "string",
          "description": "Prefix for fragment identifiers used in anchors.\nFor static routing `iron-component-page` can\nset this to a string identifying the current component.",
          "privacy": "public",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 28,
              "column": 47
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_showProtected",
          "type": "boolean",
          "description": "Whether protected members should be hidden or shown.",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 33,
              "column": 6
            },
            "end": {
              "line": 36,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_showInherited",
          "type": "boolean",
          "description": "Whether inherited members should be hidden or shown.",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 41,
              "column": 6
            },
            "end": {
              "line": 44,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_showProtectedProperties",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 156,
              "column": 8
            },
            "end": {
              "line": 156,
              "column": 41
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_showProtectedMethods",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 8
            },
            "end": {
              "line": 157,
              "column": 38
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_showProtectedEvents",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 158,
              "column": 8
            },
            "end": {
              "line": 158,
              "column": 37
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_staticMethods",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 160,
              "column": 8
            },
            "end": {
              "line": 160,
              "column": 71
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_hasMethods",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 162,
              "column": 8
            },
            "end": {
              "line": 162,
              "column": 65
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_filterMembers",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items"
            },
            {
              "name": "showProtected"
            },
            {
              "name": "showInherited"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_noneToShow",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "showProtected"
            },
            {
              "name": "showInherited"
            },
            {
              "name": "descriptor"
            },
            {
              "name": "name"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "scrollToAnchor",
          "description": "Scroll to the descriptor (element, function, etc.) with an `anchor-id`\nmatching the given URL hash (`#` optional). If no hash is specified,\nuses `window.location.hash`.\n\nWhichever element or script is in charge of routing should call this\nmethod on initial page load and on `hashchange` events.",
          "privacy": "public",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 85,
              "column": 4
            },
            "end": {
              "line": 116,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hash"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_getElementName",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 118,
              "column": 4
            },
            "end": {
              "line": 129,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_getElementId",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 131,
              "column": 4
            },
            "end": {
              "line": 133,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_getPolymerBehaviors",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 135,
              "column": 4
            },
            "end": {
              "line": 137,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descriptor"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_compareDescriptors",
          "description": "Compare two analysis descriptors (elements, functions, etc.) by\ndisplay name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 143,
              "column": 4
            },
            "end": {
              "line": 153,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_anyVisible",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 165,
              "column": 6
            },
            "end": {
              "line": 174,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items"
            }
          ]
        },
        {
          "name": "_public",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 176,
              "column": 6
            },
            "end": {
              "line": 185,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items"
            }
          ]
        },
        {
          "name": "_protected",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 187,
              "column": 6
            },
            "end": {
              "line": 196,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items"
            }
          ]
        },
        {
          "name": "_protectedCount",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 6
            },
            "end": {
              "line": 204,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_computeStaticMethods",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 206,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descriptor"
            }
          ]
        },
        {
          "name": "_computeHasMethods",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 210,
              "column": 6
            },
            "end": {
              "line": 213,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descriptor"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 148,
          "column": 12
        },
        "end": {
          "line": 214,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "descriptor",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 8
            },
            "end": {
              "line": 154,
              "column": 26
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "base-href",
          "description": "The base href where this doc viewer is located.",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 21,
              "column": 6
            },
            "end": {
              "line": 21,
              "column": 41
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "fragment-prefix",
          "description": "Prefix for fragment identifiers used in anchors.\nFor static routing `iron-component-page` can\nset this to a string identifying the current component.",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 28,
              "column": 47
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-doc-api"
    },
    {
      "description": "`iron-doc-behavior` renders documentation about a Polymer 1.x behavior from a\nJSON descriptor output by\n[Polymer Analyzer](https://github.com/Polymer/polymer-analyzer).",
      "summary": "",
      "path": "components\\iron-doc-viewer\\iron-doc-behavior.html",
      "properties": [
        {
          "name": "descriptor",
          "type": "Object",
          "description": "The [Polymer\nAnalyzer](https://github.com/Polymer/polymer-analyzer)-generated element\ndescriptor to display details for.",
          "privacy": "public",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 14,
              "column": 6
            },
            "end": {
              "line": 16,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "baseHref",
          "type": "string",
          "description": "The base href where this doc viewer is located.",
          "privacy": "public",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 21,
              "column": 6
            },
            "end": {
              "line": 21,
              "column": 41
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "fragmentPrefix",
          "type": "string",
          "description": "Prefix for fragment identifiers used in anchors.\nFor static routing `iron-component-page` can\nset this to a string identifying the current component.",
          "privacy": "public",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 28,
              "column": 47
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_showProtected",
          "type": "boolean",
          "description": "Whether protected members should be hidden or shown.",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 33,
              "column": 6
            },
            "end": {
              "line": 36,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_showInherited",
          "type": "boolean",
          "description": "Whether inherited members should be hidden or shown.",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 41,
              "column": 6
            },
            "end": {
              "line": 44,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "title",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 19
            },
            "end": {
              "line": 77,
              "column": 79
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_filterMembers",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items"
            },
            {
              "name": "showProtected"
            },
            {
              "name": "showInherited"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_noneToShow",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "showProtected"
            },
            {
              "name": "showInherited"
            },
            {
              "name": "descriptor"
            },
            {
              "name": "name"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "scrollToAnchor",
          "description": "Scroll to the descriptor (element, function, etc.) with an `anchor-id`\nmatching the given URL hash (`#` optional). If no hash is specified,\nuses `window.location.hash`.\n\nWhichever element or script is in charge of routing should call this\nmethod on initial page load and on `hashchange` events.",
          "privacy": "public",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 85,
              "column": 4
            },
            "end": {
              "line": 116,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hash"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_getElementName",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 118,
              "column": 4
            },
            "end": {
              "line": 129,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_getElementId",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 131,
              "column": 4
            },
            "end": {
              "line": 133,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_getPolymerBehaviors",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 135,
              "column": 4
            },
            "end": {
              "line": 137,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descriptor"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_compareDescriptors",
          "description": "Compare two analysis descriptors (elements, functions, etc.) by\ndisplay name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 143,
              "column": 4
            },
            "end": {
              "line": 153,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_computeTitle",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 79,
              "column": 6
            },
            "end": {
              "line": 81,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descriptor"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 72,
          "column": 12
        },
        "end": {
          "line": 82,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "descriptor",
          "description": "The [Polymer\nAnalyzer](https://github.com/Polymer/polymer-analyzer)-generated element\ndescriptor to display details for.",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 14,
              "column": 6
            },
            "end": {
              "line": 16,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "base-href",
          "description": "The base href where this doc viewer is located.",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 21,
              "column": 6
            },
            "end": {
              "line": 21,
              "column": 41
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "fragment-prefix",
          "description": "Prefix for fragment identifiers used in anchors.\nFor static routing `iron-component-page` can\nset this to a string identifying the current component.",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 28,
              "column": 47
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "title",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 19
            },
            "end": {
              "line": 77,
              "column": 79
            }
          },
          "metadata": {}
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "title-changed",
          "description": "Fired when the `title` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-doc-behavior"
    },
    {
      "description": "`iron-doc-class` renders documentation about a JavaScript class from a JSON\ndescriptor output by\n[Polymer Analyzer](https://github.com/Polymer/polymer-analyzer).",
      "summary": "",
      "path": "components\\iron-doc-viewer\\iron-doc-class.html",
      "properties": [
        {
          "name": "descriptor",
          "type": "Object",
          "description": "The [Polymer\nAnalyzer](https://github.com/Polymer/polymer-analyzer)-generated element\ndescriptor to display details for.",
          "privacy": "public",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 14,
              "column": 6
            },
            "end": {
              "line": 16,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "baseHref",
          "type": "string",
          "description": "The base href where this doc viewer is located.",
          "privacy": "public",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 21,
              "column": 6
            },
            "end": {
              "line": 21,
              "column": 41
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "fragmentPrefix",
          "type": "string",
          "description": "Prefix for fragment identifiers used in anchors.\nFor static routing `iron-component-page` can\nset this to a string identifying the current component.",
          "privacy": "public",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 28,
              "column": 47
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_showProtected",
          "type": "boolean",
          "description": "Whether protected members should be hidden or shown.",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 33,
              "column": 6
            },
            "end": {
              "line": 36,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_showInherited",
          "type": "boolean",
          "description": "Whether inherited members should be hidden or shown.",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 41,
              "column": 6
            },
            "end": {
              "line": 44,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "title",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 19
            },
            "end": {
              "line": 70,
              "column": 79
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_filterMembers",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items"
            },
            {
              "name": "showProtected"
            },
            {
              "name": "showInherited"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_noneToShow",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "showProtected"
            },
            {
              "name": "showInherited"
            },
            {
              "name": "descriptor"
            },
            {
              "name": "name"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "scrollToAnchor",
          "description": "Scroll to the descriptor (element, function, etc.) with an `anchor-id`\nmatching the given URL hash (`#` optional). If no hash is specified,\nuses `window.location.hash`.\n\nWhichever element or script is in charge of routing should call this\nmethod on initial page load and on `hashchange` events.",
          "privacy": "public",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 85,
              "column": 4
            },
            "end": {
              "line": 116,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hash"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_getElementName",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 118,
              "column": 4
            },
            "end": {
              "line": 129,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_getElementId",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 131,
              "column": 4
            },
            "end": {
              "line": 133,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_getPolymerBehaviors",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 135,
              "column": 4
            },
            "end": {
              "line": 137,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descriptor"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_compareDescriptors",
          "description": "Compare two analysis descriptors (elements, functions, etc.) by\ndisplay name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 143,
              "column": 4
            },
            "end": {
              "line": 153,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_computeTitle",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 6
            },
            "end": {
              "line": 74,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descriptor"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 65,
          "column": 12
        },
        "end": {
          "line": 75,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "descriptor",
          "description": "The [Polymer\nAnalyzer](https://github.com/Polymer/polymer-analyzer)-generated element\ndescriptor to display details for.",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 14,
              "column": 6
            },
            "end": {
              "line": 16,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "base-href",
          "description": "The base href where this doc viewer is located.",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 21,
              "column": 6
            },
            "end": {
              "line": 21,
              "column": 41
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "fragment-prefix",
          "description": "Prefix for fragment identifiers used in anchors.\nFor static routing `iron-component-page` can\nset this to a string identifying the current component.",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 28,
              "column": 47
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "title",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 19
            },
            "end": {
              "line": 70,
              "column": 79
            }
          },
          "metadata": {}
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "title-changed",
          "description": "Fired when the `title` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-doc-class"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-doc-viewer\\iron-doc-demo.html",
      "properties": [
        {
          "name": "demo",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 8
            },
            "end": {
              "line": 39,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "srcPrefix",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 8
            },
            "end": {
              "line": 41,
              "column": 44
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\""
        },
        {
          "name": "title",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 8
            },
            "end": {
              "line": 43,
              "column": 62
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_computeTitle",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "demo"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 35,
          "column": 12
        },
        "end": {
          "line": 49,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "demo",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 8
            },
            "end": {
              "line": 39,
              "column": 20
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "src-prefix",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 8
            },
            "end": {
              "line": 41,
              "column": 44
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "title",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 8
            },
            "end": {
              "line": 43,
              "column": 62
            }
          },
          "metadata": {}
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "title-changed",
          "description": "Fired when the `title` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-doc-demo"
    },
    {
      "description": "`iron-doc-element` renders documentation about a custom element from a JSON\ndescriptor output by\n[Polymer Analyzer](https://github.com/Polymer/polymer-analyzer).",
      "summary": "",
      "path": "components\\iron-doc-viewer\\iron-doc-element.html",
      "properties": [
        {
          "name": "descriptor",
          "type": "Object",
          "description": "The [Polymer\nAnalyzer](https://github.com/Polymer/polymer-analyzer)-generated element\ndescriptor to display details for.",
          "privacy": "public",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 14,
              "column": 6
            },
            "end": {
              "line": 16,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "baseHref",
          "type": "string",
          "description": "The base href where this doc viewer is located.",
          "privacy": "public",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 21,
              "column": 6
            },
            "end": {
              "line": 21,
              "column": 41
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "fragmentPrefix",
          "type": "string",
          "description": "Prefix for fragment identifiers used in anchors.\nFor static routing `iron-component-page` can\nset this to a string identifying the current component.",
          "privacy": "public",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 28,
              "column": 47
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_showProtected",
          "type": "boolean",
          "description": "Whether protected members should be hidden or shown.",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 33,
              "column": 6
            },
            "end": {
              "line": 36,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_showInherited",
          "type": "boolean",
          "description": "Whether inherited members should be hidden or shown.",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 41,
              "column": 6
            },
            "end": {
              "line": 44,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "title",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 19
            },
            "end": {
              "line": 88,
              "column": 79
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_filterMembers",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items"
            },
            {
              "name": "showProtected"
            },
            {
              "name": "showInherited"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_noneToShow",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "showProtected"
            },
            {
              "name": "showInherited"
            },
            {
              "name": "descriptor"
            },
            {
              "name": "name"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "scrollToAnchor",
          "description": "Scroll to the descriptor (element, function, etc.) with an `anchor-id`\nmatching the given URL hash (`#` optional). If no hash is specified,\nuses `window.location.hash`.\n\nWhichever element or script is in charge of routing should call this\nmethod on initial page load and on `hashchange` events.",
          "privacy": "public",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 85,
              "column": 4
            },
            "end": {
              "line": 116,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hash"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_getElementName",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 118,
              "column": 4
            },
            "end": {
              "line": 129,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_getElementId",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 131,
              "column": 4
            },
            "end": {
              "line": 133,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_getPolymerBehaviors",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 135,
              "column": 4
            },
            "end": {
              "line": 137,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descriptor"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_compareDescriptors",
          "description": "Compare two analysis descriptors (elements, functions, etc.) by\ndisplay name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 143,
              "column": 4
            },
            "end": {
              "line": 153,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_superclassUrl",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 6
            },
            "end": {
              "line": 95,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "superclass"
            }
          ]
        },
        {
          "name": "_superclassTarget",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 6
            },
            "end": {
              "line": 102,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "superclass"
            }
          ]
        },
        {
          "name": "_computeTitle",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 104,
              "column": 6
            },
            "end": {
              "line": 106,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descriptor"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 83,
          "column": 12
        },
        "end": {
          "line": 107,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "descriptor",
          "description": "The [Polymer\nAnalyzer](https://github.com/Polymer/polymer-analyzer)-generated element\ndescriptor to display details for.",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 14,
              "column": 6
            },
            "end": {
              "line": 16,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "base-href",
          "description": "The base href where this doc viewer is located.",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 21,
              "column": 6
            },
            "end": {
              "line": 21,
              "column": 41
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "fragment-prefix",
          "description": "Prefix for fragment identifiers used in anchors.\nFor static routing `iron-component-page` can\nset this to a string identifying the current component.",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 28,
              "column": 47
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "title",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 19
            },
            "end": {
              "line": 88,
              "column": 79
            }
          },
          "metadata": {}
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "title-changed",
          "description": "Fired when the `title` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-doc-element"
    },
    {
      "description": "`iron-doc-element` renders documentation about a JavaScript mixin from a JSON\ndescriptor output by\n[Polymer Analyzer](https://github.com/Polymer/polymer-analyzer).",
      "summary": "",
      "path": "components\\iron-doc-viewer\\iron-doc-mixin.html",
      "properties": [
        {
          "name": "descriptor",
          "type": "Object",
          "description": "The [Polymer\nAnalyzer](https://github.com/Polymer/polymer-analyzer)-generated element\ndescriptor to display details for.",
          "privacy": "public",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 14,
              "column": 6
            },
            "end": {
              "line": 16,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "baseHref",
          "type": "string",
          "description": "The base href where this doc viewer is located.",
          "privacy": "public",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 21,
              "column": 6
            },
            "end": {
              "line": 21,
              "column": 41
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "fragmentPrefix",
          "type": "string",
          "description": "Prefix for fragment identifiers used in anchors.\nFor static routing `iron-component-page` can\nset this to a string identifying the current component.",
          "privacy": "public",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 28,
              "column": 47
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_showProtected",
          "type": "boolean",
          "description": "Whether protected members should be hidden or shown.",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 33,
              "column": 6
            },
            "end": {
              "line": 36,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_showInherited",
          "type": "boolean",
          "description": "Whether inherited members should be hidden or shown.",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 41,
              "column": 6
            },
            "end": {
              "line": 44,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "title",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 19
            },
            "end": {
              "line": 75,
              "column": 79
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_filterMembers",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items"
            },
            {
              "name": "showProtected"
            },
            {
              "name": "showInherited"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_noneToShow",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "showProtected"
            },
            {
              "name": "showInherited"
            },
            {
              "name": "descriptor"
            },
            {
              "name": "name"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "scrollToAnchor",
          "description": "Scroll to the descriptor (element, function, etc.) with an `anchor-id`\nmatching the given URL hash (`#` optional). If no hash is specified,\nuses `window.location.hash`.\n\nWhichever element or script is in charge of routing should call this\nmethod on initial page load and on `hashchange` events.",
          "privacy": "public",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 85,
              "column": 4
            },
            "end": {
              "line": 116,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hash"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_getElementName",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 118,
              "column": 4
            },
            "end": {
              "line": 129,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_getElementId",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 131,
              "column": 4
            },
            "end": {
              "line": 133,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_getPolymerBehaviors",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 135,
              "column": 4
            },
            "end": {
              "line": 137,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descriptor"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_compareDescriptors",
          "description": "Compare two analysis descriptors (elements, functions, etc.) by\ndisplay name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 143,
              "column": 4
            },
            "end": {
              "line": 153,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_computeTitle",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 6
            },
            "end": {
              "line": 79,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descriptor"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 70,
          "column": 12
        },
        "end": {
          "line": 80,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "descriptor",
          "description": "The [Polymer\nAnalyzer](https://github.com/Polymer/polymer-analyzer)-generated element\ndescriptor to display details for.",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 14,
              "column": 6
            },
            "end": {
              "line": 16,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "base-href",
          "description": "The base href where this doc viewer is located.",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 21,
              "column": 6
            },
            "end": {
              "line": 21,
              "column": 41
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "fragment-prefix",
          "description": "Prefix for fragment identifiers used in anchors.\nFor static routing `iron-component-page` can\nset this to a string identifying the current component.",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 28,
              "column": 47
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "title",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 19
            },
            "end": {
              "line": 75,
              "column": 79
            }
          },
          "metadata": {}
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "title-changed",
          "description": "Fired when the `title` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-doc-mixin"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-doc-viewer\\iron-doc-summary.html",
      "properties": [
        {
          "name": "name",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 8
            },
            "end": {
              "line": 63,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "description",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 64,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "href",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 65,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 58,
          "column": 12
        },
        "end": {
          "line": 67,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "name",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 8
            },
            "end": {
              "line": 63,
              "column": 20
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "description",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 64,
              "column": 27
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "href",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 65,
              "column": 20
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-doc-summary"
    },
    {
      "description": "`iron-doc-namespace` renders documentation about a JavaScript namespace from a\nJSON descriptor output by\n[Polymer Analyzer](https://github.com/Polymer/polymer-analyzer).",
      "summary": "",
      "path": "components\\iron-doc-viewer\\iron-doc-namespace.html",
      "properties": [
        {
          "name": "descriptor",
          "type": "Object",
          "description": "The [Polymer\nAnalyzer](https://github.com/Polymer/polymer-analyzer)-generated element\ndescriptor to display details for.",
          "privacy": "public",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 14,
              "column": 6
            },
            "end": {
              "line": 16,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "baseHref",
          "type": "string",
          "description": "The base href where this doc viewer is located.",
          "privacy": "public",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 21,
              "column": 6
            },
            "end": {
              "line": 21,
              "column": 41
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "fragmentPrefix",
          "type": "string",
          "description": "Prefix for fragment identifiers used in anchors.\nFor static routing `iron-component-page` can\nset this to a string identifying the current component.",
          "privacy": "public",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 28,
              "column": 47
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_showProtected",
          "type": "boolean",
          "description": "Whether protected members should be hidden or shown.",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 33,
              "column": 6
            },
            "end": {
              "line": 36,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_showInherited",
          "type": "boolean",
          "description": "Whether inherited members should be hidden or shown.",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 41,
              "column": 6
            },
            "end": {
              "line": 44,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "title",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 145,
              "column": 19
            },
            "end": {
              "line": 145,
              "column": 79
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_filterMembers",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items"
            },
            {
              "name": "showProtected"
            },
            {
              "name": "showInherited"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_noneToShow",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "showProtected"
            },
            {
              "name": "showInherited"
            },
            {
              "name": "descriptor"
            },
            {
              "name": "name"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "scrollToAnchor",
          "description": "Scroll to the descriptor (element, function, etc.) with an `anchor-id`\nmatching the given URL hash (`#` optional). If no hash is specified,\nuses `window.location.hash`.\n\nWhichever element or script is in charge of routing should call this\nmethod on initial page load and on `hashchange` events.",
          "privacy": "public",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 85,
              "column": 4
            },
            "end": {
              "line": 116,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hash"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_getElementName",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 118,
              "column": 4
            },
            "end": {
              "line": 129,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_getElementId",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 131,
              "column": 4
            },
            "end": {
              "line": 133,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_getPolymerBehaviors",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 135,
              "column": 4
            },
            "end": {
              "line": 137,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descriptor"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_compareDescriptors",
          "description": "Compare two analysis descriptors (elements, functions, etc.) by\ndisplay name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 143,
              "column": 4
            },
            "end": {
              "line": 153,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_computeTitle",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 6
            },
            "end": {
              "line": 149,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descriptor"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 140,
          "column": 12
        },
        "end": {
          "line": 150,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "descriptor",
          "description": "The [Polymer\nAnalyzer](https://github.com/Polymer/polymer-analyzer)-generated element\ndescriptor to display details for.",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 14,
              "column": 6
            },
            "end": {
              "line": 16,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "base-href",
          "description": "The base href where this doc viewer is located.",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 21,
              "column": 6
            },
            "end": {
              "line": 21,
              "column": 41
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "fragment-prefix",
          "description": "Prefix for fragment identifiers used in anchors.\nFor static routing `iron-component-page` can\nset this to a string identifying the current component.",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 28,
              "column": 47
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "title",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 145,
              "column": 19
            },
            "end": {
              "line": 145,
              "column": 79
            }
          },
          "metadata": {}
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "title-changed",
          "description": "Fired when the `title` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-doc-namespace"
    },
    {
      "description": "`iron-doc-viewer` renders documentation about elements, mixins, classes, and\nmore from a JSON descriptor output by\n[Polymer Analyzer](https://github.com/Polymer/polymer-analyzer).\n\nProvide the descriptor JSON as a data binding to `descriptor`:\n\n    <iron-doc-viewer descriptor=\"[[descriptor]]\"></iron-doc-viewer>\n\n`iron-doc-viewer` will initially display all items contained in the given\ndescriptor (e.g. elements, mixins, classes). `path` is used to display detail\nabout specific items within the descriptor (e.g. \"/elements/my-component\"), and\nby default is bound to the current `window.location` path.\n\n### Styling\n\nMost users should include the default theme alongside this element:\n\n    <link rel=\"import\" href=\"bower_components/iron-doc-viewer/default.html\">\n\n    <custom-style>\n      <style is=\"custom-style\" include=\"iron-doc-default-theme\"></style>\n    </custom-style>\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-doc-font-code` | Mixin applied to code snippets. | `{}`\n`--iron-doc-font-body` | Mixin applied to non-code text. | `{}`",
      "summary": "",
      "path": "components\\iron-doc-viewer\\iron-doc-viewer.html",
      "properties": [
        {
          "name": "descriptor",
          "type": "Object",
          "description": "The [Polymer\nAnalyzer](https://github.com/Polymer/polymer-analyzer)-generated element\ndescriptor to display details for.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 8
            },
            "end": {
              "line": 138,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "baseHref",
          "type": "string",
          "description": "By default all routing is performed using the URL fragment\n(e.g. `docs.html#/elements/my-element`).\n\nIf your server supports it and you would like to use the real URL\npath instead (e.g. `/api/docs/elements/my-element`), set this to\nthe base path where the page is mounted, omitting the trailing\nslash (e.g. `/api/docs` or *empty string* for the root path).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 8
            },
            "end": {
              "line": 149,
              "column": 44
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"#\""
        },
        {
          "name": "demoSrcPrefix",
          "type": "string",
          "description": "URL prefix for demo iframes.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 8
            },
            "end": {
              "line": 154,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "path",
          "type": "string",
          "description": "Path to the item in the descriptor to display.\n\nExamples:\n  - `/` for the root namespace\n  - `/elements/paper-button`\n  - `/mixins/paper-button-behavior`\n\nDefaults to the current `window.location` path.\n\nIf `baseHref` is set, it will be trimmed from the prefix of this\n`path`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 8
            },
            "end": {
              "line": 169,
              "column": 55
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "rootNamespace",
          "type": "string",
          "description": "Instead of displaying items relative to the top level of\n`descriptor`, start from this namespace.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 175,
              "column": 8
            },
            "end": {
              "line": 177,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "title",
          "type": "string",
          "description": "Display title for the currently selected item.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 183,
              "column": 8
            },
            "end": {
              "line": 183,
              "column": 43
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "demo",
          "type": "boolean",
          "description": "True if the viewer is currently displaying a demo.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 8
            },
            "end": {
              "line": 193,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          }
        },
        {
          "name": "_descriptorType",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 195,
              "column": 8
            },
            "end": {
              "line": 195,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_urlPath",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 8
            },
            "end": {
              "line": 197,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_urlHash",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 199,
              "column": 8
            },
            "end": {
              "line": 199,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_currentDescriptor",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 8
            },
            "end": {
              "line": 201,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_fragmentPrefix",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 203,
              "column": 8
            },
            "end": {
              "line": 203,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_scrollTo",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 8
            },
            "end": {
              "line": 205,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_demo",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 207,
              "column": 8
            },
            "end": {
              "line": 207,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "_equal",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 215,
              "column": 6
            },
            "end": {
              "line": 217,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ]
        },
        {
          "name": "_computeDemo",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 219,
              "column": 6
            },
            "end": {
              "line": 221,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "demo"
            }
          ]
        },
        {
          "name": "_routingChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 223,
              "column": 6
            },
            "end": {
              "line": 240,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseHref"
            },
            {
              "name": "urlPath"
            },
            {
              "name": "urlHash"
            }
          ]
        },
        {
          "name": "_dataChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 242,
              "column": 6
            },
            "end": {
              "line": 332,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descriptor"
            },
            {
              "name": "path"
            },
            {
              "name": "scrollAnchor"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 127,
          "column": 12
        },
        "end": {
          "line": 338,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "descriptor",
          "description": "The [Polymer\nAnalyzer](https://github.com/Polymer/polymer-analyzer)-generated element\ndescriptor to display details for.",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 8
            },
            "end": {
              "line": 138,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "base-href",
          "description": "By default all routing is performed using the URL fragment\n(e.g. `docs.html#/elements/my-element`).\n\nIf your server supports it and you would like to use the real URL\npath instead (e.g. `/api/docs/elements/my-element`), set this to\nthe base path where the page is mounted, omitting the trailing\nslash (e.g. `/api/docs` or *empty string* for the root path).",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 8
            },
            "end": {
              "line": 149,
              "column": 44
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "demo-src-prefix",
          "description": "URL prefix for demo iframes.",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 8
            },
            "end": {
              "line": 154,
              "column": 29
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "path",
          "description": "Path to the item in the descriptor to display.\n\nExamples:\n  - `/` for the root namespace\n  - `/elements/paper-button`\n  - `/mixins/paper-button-behavior`\n\nDefaults to the current `window.location` path.\n\nIf `baseHref` is set, it will be trimmed from the prefix of this\n`path`.",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 8
            },
            "end": {
              "line": 169,
              "column": 55
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "root-namespace",
          "description": "Instead of displaying items relative to the top level of\n`descriptor`, start from this namespace.",
          "sourceRange": {
            "start": {
              "line": 175,
              "column": 8
            },
            "end": {
              "line": 177,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "title",
          "description": "Display title for the currently selected item.",
          "sourceRange": {
            "start": {
              "line": 183,
              "column": 8
            },
            "end": {
              "line": 183,
              "column": 43
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "demo",
          "description": "True if the viewer is currently displaying a demo.",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 8
            },
            "end": {
              "line": 193,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "view-changed",
          "description": "view-changed",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "path-changed",
          "description": "Fired when the `path` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "title-changed",
          "description": "Fired when the `title` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "demo-changed",
          "description": "Fired when the `demo` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-doc-viewer"
    },
    {
      "description": "`iron-icons` is a utility import that includes the definition for the `iron-icon` element, `iron-iconset-svg` element, as well as an import for the default icon set.\n\nThe `iron-icons` directory also includes imports for additional icon sets that can be loaded into your project.\n\nExample loading icon set:\n\n    <link rel=\"import\" href=\"../iron-icons/maps-icons.html\">\n\nTo use an icon from one of these sets, first prefix your `iron-icon` with the icon set name, followed by a colon, \":\", and then the icon id.\n\nExample using the directions-bus icon from the maps icon set:\n\n    <iron-icon icon=\"maps:directions-bus\"></iron-icon>\n\n    To load a subset of icons from one of the default `iron-icons` sets, you can\n    use the [poly-icon](https://poly-icon.appspot.com/) tool. It allows you\n    to select individual icons, and creates an iconset from them that you can\n    use directly in your elements.\n\nSee [iron-icon](#iron-icon) for more information about working with icons.\n\nSee [iron-iconset](#iron-iconset) and [iron-iconset-svg](#iron-iconset-svg) for more information about how to create a custom iconset.",
      "summary": "",
      "path": "components\\iron-icons\\iron-icons.html",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": "demo"
        },
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 37,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-icons"
    },
    {
      "description": "`iron-meta` is a generic element you can use for sharing information across the DOM tree.\nIt uses [monostate pattern](http://c2.com/cgi/wiki?MonostatePattern) such that any\ninstance of iron-meta has access to the shared\ninformation. You can use `iron-meta` to share whatever you want (or create an extension\n[like x-meta] for enhancements).\n\nThe `iron-meta` instances containing your actual data can be loaded in an import,\nor constructed in any way you see fit. The only requirement is that you create them\nbefore you try to access them.\n\nExamples:\n\nIf I create an instance like this:\n\n    <iron-meta key=\"info\" value=\"foo/bar\"></iron-meta>\n\nNote that value=\"foo/bar\" is the metadata I've defined. I could define more\nattributes or use child nodes to define additional metadata.\n\nNow I can access that element (and it's metadata) from any iron-meta instance\nvia the byKey method, e.g.\n\n    meta.byKey('info');\n\nPure imperative form would be like:\n\n    document.createElement('iron-meta').byKey('info');\n\nOr, in a Polymer element, you can include a meta in your template:\n\n    <iron-meta id=\"meta\"></iron-meta>\n    ...\n    this.$.meta.byKey('info');",
      "summary": "",
      "path": "components\\iron-meta\\iron-meta.html",
      "properties": [
        {
          "name": "type",
          "type": "string",
          "description": "The type of meta-data.  All meta-data of the same type is stored\ntogether.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 6
            },
            "end": {
              "line": 143,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"default\""
        },
        {
          "name": "key",
          "type": "?string",
          "description": "The key used to store `value` under the `type` namespace.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 6
            },
            "end": {
              "line": 151,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "value",
          "type": "*",
          "description": "The meta-data to store or retrieve.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 6
            },
            "end": {
              "line": 160,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "self",
          "type": "boolean",
          "description": "If true, `value` is set to the iron-meta instance itself.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 165,
              "column": 6
            },
            "end": {
              "line": 165,
              "column": 53
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_selfChanged\""
            }
          }
        },
        {
          "name": "__meta",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 167,
              "column": 6
            },
            "end": {
              "line": 167,
              "column": 74
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "hostAttributes",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 4
            },
            "end": {
              "line": 170,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "list",
          "type": "Function",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 4
            },
            "end": {
              "line": 186,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        }
      ],
      "methods": [
        {
          "name": "__computeMeta",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 172,
              "column": 4
            },
            "end": {
              "line": 182,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type"
            },
            {
              "name": "key"
            },
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_selfChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 4
            },
            "end": {
              "line": 192,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "self"
            }
          ]
        },
        {
          "name": "byKey",
          "description": "Retrieves meta data value by key.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 4
            },
            "end": {
              "line": 203,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key",
              "type": "string",
              "description": "The key of the meta-data to be returned."
            }
          ],
          "return": {
            "type": "*"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 129,
          "column": 10
        },
        "end": {
          "line": 204,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "type",
          "description": "The type of meta-data.  All meta-data of the same type is stored\ntogether.",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 6
            },
            "end": {
              "line": 143,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "key",
          "description": "The key used to store `value` under the `type` namespace.",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 6
            },
            "end": {
              "line": 151,
              "column": 7
            }
          },
          "metadata": {},
          "type": "?string"
        },
        {
          "name": "value",
          "description": "The meta-data to store or retrieve.",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 6
            },
            "end": {
              "line": 160,
              "column": 7
            }
          },
          "metadata": {},
          "type": "*"
        },
        {
          "name": "self",
          "description": "If true, `value` is set to the iron-meta instance itself.",
          "sourceRange": {
            "start": {
              "line": 165,
              "column": 6
            },
            "end": {
              "line": 165,
              "column": 53
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-meta"
    },
    {
      "description": "The `iron-icon` element displays an icon. By default an icon renders as a 24px square.\n\nExample using src:\n\n    <iron-icon src=\"star.png\"></iron-icon>\n\nExample setting size to 32px x 32px:\n\n    <iron-icon class=\"big\" src=\"big_star.png\"></iron-icon>\n\n    <style is=\"custom-style\">\n      .big {\n        --iron-icon-height: 32px;\n        --iron-icon-width: 32px;\n      }\n    </style>\n\nThe iron elements include several sets of icons.\nTo use the default set of icons, import `iron-icons.html` and use the `icon` attribute to specify an icon:\n\n    <link rel=\"import\" href=\"/components/iron-icons/iron-icons.html\">\n\n    <iron-icon icon=\"menu\"></iron-icon>\n\nTo use a different built-in set of icons, import the specific `iron-icons/<iconset>-icons.html`, and\nspecify the icon as `<iconset>:<icon>`. For example, to use a communication icon, you would\nuse:\n\n    <link rel=\"import\" href=\"/components/iron-icons/communication-icons.html\">\n\n    <iron-icon icon=\"communication:email\"></iron-icon>\n\nYou can also create custom icon sets of bitmap or SVG icons.\n\nExample of using an icon named `cherry` from a custom iconset with the ID `fruit`:\n\n    <iron-icon icon=\"fruit:cherry\"></iron-icon>\n\nSee [iron-iconset](iron-iconset) and [iron-iconset-svg](iron-iconset-svg) for more information about\nhow to create a custom iconset.\n\nSee the [iron-icons demo](iron-icons?view=demo:demo/index.html) to see the icons available\nin the various iconsets.\n\nTo load a subset of icons from one of the default `iron-icons` sets, you can\nuse the [poly-icon](https://poly-icon.appspot.com/) tool. It allows you\nto select individual icons, and creates an iconset from them that you can\nuse directly in your elements.\n\n### Styling\n\nThe following custom properties are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-icon` | Mixin applied to the icon | {}\n`--iron-icon-width` | Width of the icon | `24px`\n`--iron-icon-height` | Height of the icon | `24px`\n`--iron-icon-fill-color` | Fill color of the svg icon | `currentcolor`\n`--iron-icon-stroke-color` | Stroke color of the svg icon | none",
      "summary": "",
      "path": "components\\iron-icon\\iron-icon.html",
      "properties": [
        {
          "name": "icon",
          "type": "string",
          "description": "The name of the icon to use. The name should be of the form:\n`iconset_name:icon_name`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 8
            },
            "end": {
              "line": 122,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "theme",
          "type": "string",
          "description": "The name of the theme to used, if one is specified by the\niconset.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 8
            },
            "end": {
              "line": 130,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "src",
          "type": "string",
          "description": "If using iron-icon without an iconset, you can set the src to be\nthe URL of an individual icon image file. Note that this will take\nprecedence over a given icon attribute.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 137,
              "column": 8
            },
            "end": {
              "line": 139,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_meta",
          "type": "!Polymer.IronMeta",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 8
            },
            "end": {
              "line": 146,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_DEFAULT_ICONSET",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 6
            },
            "end": {
              "line": 157,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "_iconChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 159,
              "column": 6
            },
            "end": {
              "line": 164,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "icon"
            }
          ]
        },
        {
          "name": "_srcChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 166,
              "column": 6
            },
            "end": {
              "line": 168,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "src"
            }
          ]
        },
        {
          "name": "_usesIconset",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 6
            },
            "end": {
              "line": 172,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateIcon",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 175,
              "column": 6
            },
            "end": {
              "line": 207,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 110,
          "column": 12
        },
        "end": {
          "line": 209,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "icon",
          "description": "The name of the icon to use. The name should be of the form:\n`iconset_name:icon_name`.",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 8
            },
            "end": {
              "line": 122,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "theme",
          "description": "The name of the theme to used, if one is specified by the\niconset.",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 8
            },
            "end": {
              "line": 130,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "src",
          "description": "If using iron-icon without an iconset, you can set the src to be\nthe URL of an individual icon image file. Note that this will take\nprecedence over a given icon attribute.",
          "sourceRange": {
            "start": {
              "line": 137,
              "column": 8
            },
            "end": {
              "line": 139,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-icon"
    },
    {
      "description": "The `iron-iconset-svg` element allows users to define their own icon sets\nthat contain svg icons. The svg icon elements should be children of the\n`iron-iconset-svg` element. Multiple icons should be given distinct id's.\n\nUsing svg elements to create icons has a few advantages over traditional\nbitmap graphics like jpg or png. Icons that use svg are vector based so\nthey are resolution independent and should look good on any device. They\nare stylable via css. Icons can be themed, colorized, and even animated.\n\nExample:\n\n    <iron-iconset-svg name=\"my-svg-icons\" size=\"24\">\n      <svg>\n        <defs>\n          <g id=\"shape\">\n            <rect x=\"12\" y=\"0\" width=\"12\" height=\"24\" />\n            <circle cx=\"12\" cy=\"12\" r=\"12\" />\n          </g>\n        </defs>\n      </svg>\n    </iron-iconset-svg>\n\nThis will automatically register the icon set \"my-svg-icons\" to the iconset\ndatabase.  To use these icons from within another element, make a\n`iron-iconset` element and call the `byId` method\nto retrieve a given iconset. To apply a particular icon inside an\nelement use the `applyIcon` method. For example:\n\n    iconset.applyIcon(iconNode, 'car');",
      "summary": "",
      "path": "components\\iron-iconset-svg\\iron-iconset-svg.html",
      "properties": [
        {
          "name": "name",
          "type": "string",
          "description": "The name of the iconset.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 57,
              "column": 6
            },
            "end": {
              "line": 57,
              "column": 52
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_nameChanged\""
            }
          }
        },
        {
          "name": "size",
          "type": "number",
          "description": "The size of an individual icon. Note that icons must be square.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 6
            },
            "end": {
              "line": 62,
              "column": 37
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "24"
        },
        {
          "name": "rtlMirroring",
          "type": "boolean",
          "description": "Set to true to enable mirroring of icons where specified when they are\nstamped. Icons that should be mirrored should be decorated with a\n`mirror-in-rtl` attribute.\n\nNOTE: For performance reasons, direction will be resolved once per\ndocument per iconset, so moving icons in and out of RTL subtrees will\nnot cause their mirrored state to change.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 6
            },
            "end": {
              "line": 73,
              "column": 49
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "useGlobalRtlAttribute",
          "type": "boolean",
          "description": "Set to true to measure RTL based on the dir attribute on the body or\nhtml elements (measured on document.body or document.documentElement as\navailable).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 80,
              "column": 6
            },
            "end": {
              "line": 80,
              "column": 58
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 4
            },
            "end": {
              "line": 86,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 4
            },
            "end": {
              "line": 90,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "getIconNames",
          "description": "Construct an array of all icon names in this iconset.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 4
            },
            "end": {
              "line": 102,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!Array",
            "desc": "Array of icon names."
          }
        },
        {
          "name": "applyIcon",
          "description": "Applies an icon to the given element.\n\nAn svg icon is prepended to the element's shadowRoot if it exists,\notherwise to the element itself.\n\nIf RTL mirroring is enabled, and the icon is marked to be mirrored in\nRTL, the element will be tested (once and only once ever for each\niconset) to determine the direction of the subtree the element is in.\nThis direction will apply to all future icon applications, although only\nicons marked to be mirrored will be affected.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 4
            },
            "end": {
              "line": 134,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "Element",
              "description": "Element to which the icon is applied."
            },
            {
              "name": "iconName",
              "type": "string",
              "description": "Name of the icon to apply."
            }
          ],
          "return": {
            "type": "?Element",
            "desc": "The svg element which renders the icon."
          }
        },
        {
          "name": "removeIcon",
          "description": "Remove an icon from the given element by undoing the changes effected\nby `applyIcon`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 142,
              "column": 4
            },
            "end": {
              "line": 148,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "Element",
              "description": "The element from which the icon is removed."
            }
          ]
        },
        {
          "name": "_targetIsRTL",
          "description": "Measures and memoizes the direction of the element. Note that this\nmeasurement is only done once and the result is memoized for future\ninvocations.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 4
            },
            "end": {
              "line": 175,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            }
          ]
        },
        {
          "name": "_nameChanged",
          "description": "When name is changed, register iconset metadata",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 182,
              "column": 4
            },
            "end": {
              "line": 190,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_createIconMap",
          "description": "Create a map of child SVG elements by id.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 4
            },
            "end": {
              "line": 206,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!Object",
            "desc": "Map of id's to SVG elements."
          }
        },
        {
          "name": "_cloneIcon",
          "description": "Produce installable clone of the SVG element matching `id` in this\niconset, or `undefined` if there is no matching element.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 215,
              "column": 4
            },
            "end": {
              "line": 220,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            },
            {
              "name": "mirrorAllowed"
            }
          ],
          "return": {
            "type": "Element",
            "desc": "Returns an installable clone of the SVG element\nmatching `id`."
          }
        },
        {
          "name": "_prepareSvgClone",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 228,
              "column": 4
            },
            "end": {
              "line": 254,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "sourceSvg",
              "type": "Element"
            },
            {
              "name": "size",
              "type": "number"
            },
            {
              "name": "mirrorAllowed",
              "type": "Boolean"
            }
          ],
          "return": {
            "type": "Element"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 49,
          "column": 10
        },
        "end": {
          "line": 256,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "name",
          "description": "The name of the iconset.",
          "sourceRange": {
            "start": {
              "line": 57,
              "column": 6
            },
            "end": {
              "line": 57,
              "column": 52
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "size",
          "description": "The size of an individual icon. Note that icons must be square.",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 6
            },
            "end": {
              "line": 62,
              "column": 37
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "rtl-mirroring",
          "description": "Set to true to enable mirroring of icons where specified when they are\nstamped. Icons that should be mirrored should be decorated with a\n`mirror-in-rtl` attribute.\n\nNOTE: For performance reasons, direction will be resolved once per\ndocument per iconset, so moving icons in and out of RTL subtrees will\nnot cause their mirrored state to change.",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 6
            },
            "end": {
              "line": 73,
              "column": 49
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "use-global-rtl-attribute",
          "description": "Set to true to measure RTL based on the dir attribute on the body or\nhtml elements (measured on document.body or document.documentElement as\navailable).",
          "sourceRange": {
            "start": {
              "line": 80,
              "column": 6
            },
            "end": {
              "line": 80,
              "column": 58
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-iconset-svg"
    },
    {
      "description": "Material design: [Surface reaction](https://www.google.com/design/spec/animation/responsive-interaction.html#responsive-interaction-surface-reaction)\n\n`paper-ripple` provides a visual effect that other paper elements can\nuse to simulate a rippling effect emanating from the point of contact.  The\neffect can be visualized as a concentric circle with motion.\n\nExample:\n\n    <div style=\"position:relative\">\n      <paper-ripple></paper-ripple>\n    </div>\n\nNote, it's important that the parent container of the ripple be relative position, otherwise\nthe ripple will emanate outside of the desired container.\n\n`paper-ripple` listens to \"mousedown\" and \"mouseup\" events so it would display ripple\neffect when touches on it.  You can also defeat the default behavior and\nmanually route the down and up actions to the ripple element.  Note that it is\nimportant if you call `downAction()` you will have to make sure to call\n`upAction()` so that `paper-ripple` would end the animation loop.\n\nExample:\n\n    <paper-ripple id=\"ripple\" style=\"pointer-events: none;\"></paper-ripple>\n    ...\n    downAction: function(e) {\n      this.$.ripple.downAction(e.detail);\n    },\n    upAction: function(e) {\n      this.$.ripple.upAction();\n    }\n\nStyling ripple effect:\n\n  Use CSS color property to style the ripple:\n\n    paper-ripple {\n      color: #4285f4;\n    }\n\n  Note that CSS color property is inherited so it is not required to set it on\n  the `paper-ripple` element directly.\n\nBy default, the ripple is centered on the point of contact.  Apply the `recenters`\nattribute to have the ripple grow toward the center of its container.\n\n    <paper-ripple recenters></paper-ripple>\n\nYou can also  center the ripple inside its container from the start.\n\n    <paper-ripple center></paper-ripple>\n\nApply `circle` class to make the rippling effect within a circle.\n\n    <paper-ripple class=\"circle\"></paper-ripple>",
      "summary": "",
      "path": "components\\paper-ripple\\paper-ripple.html",
      "properties": [
        {
          "name": "keyEventTarget",
          "type": "?EventTarget",
          "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 277,
              "column": 6
            },
            "end": {
              "line": 282,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "stopKeyboardEventPropagation",
          "type": "boolean",
          "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 288,
              "column": 6
            },
            "end": {
              "line": 288,
              "column": 65
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_boundKeyHandlers",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 290,
              "column": 6
            },
            "end": {
              "line": 295,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_imperativeKeyBindings",
          "type": "Object",
          "description": "own properties of everything on the \"prototype\".",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 299,
              "column": 6
            },
            "end": {
              "line": 304,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "keyBindings",
          "type": "!Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 522,
              "column": 4
            },
            "end": {
              "line": 526,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "initialOpacity",
          "type": "number",
          "description": "The initial opacity set on the wave.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 440,
              "column": 6
            },
            "end": {
              "line": 440,
              "column": 49
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0.25"
        },
        {
          "name": "opacityDecayVelocity",
          "type": "number",
          "description": "How fast (opacity per second) the wave fades out.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 449,
              "column": 6
            },
            "end": {
              "line": 449,
              "column": 54
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0.8"
        },
        {
          "name": "recenters",
          "type": "boolean",
          "description": "If true, ripples will exhibit a gravitational pull towards\nthe center of their container as they fade away.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 459,
              "column": 6
            },
            "end": {
              "line": 459,
              "column": 46
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "center",
          "type": "boolean",
          "description": "If true, ripples will center inside its container",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 468,
              "column": 6
            },
            "end": {
              "line": 468,
              "column": 43
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "ripples",
          "type": "Array",
          "description": "A list of the visual ripples.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 477,
              "column": 6
            },
            "end": {
              "line": 482,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]"
        },
        {
          "name": "animating",
          "type": "boolean",
          "description": "True when there are visible ripples animating within the\nelement.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 488,
              "column": 6
            },
            "end": {
              "line": 489,
              "column": 81
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "holdDown",
          "type": "boolean",
          "description": "If true, the ripple will remain in the \"down\" state until `holdDown`\nis set to false again.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 495,
              "column": 6
            },
            "end": {
              "line": 495,
              "column": 75
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_holdDownChanged\""
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "noink",
          "type": "boolean",
          "description": "If true, the ripple will not generate a ripple effect\nvia pointer interaction.\nCalling ripple's imperative api like `simulatedRipple` will\nstill generate the ripple effect.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 503,
              "column": 6
            },
            "end": {
              "line": 503,
              "column": 42
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_animating",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 505,
              "column": 6
            },
            "end": {
              "line": 505,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_boundAnimate",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 507,
              "column": 6
            },
            "end": {
              "line": 512,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "target",
          "type": "Function",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 515,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        },
        {
          "name": "shouldKeepAnimating",
          "type": "Function",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 548,
              "column": 4
            },
            "end": {
              "line": 556,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        }
      ],
      "methods": [
        {
          "name": "registered",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 317,
              "column": 4
            },
            "end": {
              "line": 319,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 528,
              "column": 4
            },
            "end": {
              "line": 540,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 542,
              "column": 4
            },
            "end": {
              "line": 546,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "addOwnKeyBinding",
          "description": "Can be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 337,
              "column": 4
            },
            "end": {
              "line": 341,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventString",
              "type": "string"
            },
            {
              "name": "handlerName",
              "type": "string"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "removeOwnKeyBindings",
          "description": "When called, will remove all imperatively-added key bindings.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 346,
              "column": 4
            },
            "end": {
              "line": 350,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "keyboardEventMatchesKeys",
          "description": "Returns true if a keyboard event matches `eventString`.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 359,
              "column": 4
            },
            "end": {
              "line": 367,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            },
            {
              "name": "eventString",
              "type": "string"
            }
          ],
          "return": {
            "type": "boolean"
          },
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_collectKeyBindings",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 369,
              "column": 4
            },
            "end": {
              "line": 379,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_prepKeyBindings",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 381,
              "column": 4
            },
            "end": {
              "line": 403,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_addKeyBinding",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 405,
              "column": 4
            },
            "end": {
              "line": 412,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventString"
            },
            {
              "name": "handlerName"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_resetKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 414,
              "column": 4
            },
            "end": {
              "line": 420,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_listenKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 422,
              "column": 4
            },
            "end": {
              "line": 435,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_unlistenKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 437,
              "column": 4
            },
            "end": {
              "line": 452,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_onKeyBindingEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 454,
              "column": 4
            },
            "end": {
              "line": 475,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "keyBindings"
            },
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_triggerKeyHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 477,
              "column": 4
            },
            "end": {
              "line": 486,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "keyCombo"
            },
            {
              "name": "handlerName"
            },
            {
              "name": "keyboardEvent"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "simulatedRipple",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 558,
              "column": 4
            },
            "end": {
              "line": 565,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "uiDownAction",
          "description": "Provokes a ripple down effect via a UI event,\nrespecting the `noink` property.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 572,
              "column": 4
            },
            "end": {
              "line": 576,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "Event="
            }
          ]
        },
        {
          "name": "downAction",
          "description": "Provokes a ripple down effect via a UI event,\n*not* respecting the `noink` property.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 583,
              "column": 4
            },
            "end": {
              "line": 596,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "Event="
            }
          ]
        },
        {
          "name": "uiUpAction",
          "description": "Provokes a ripple up effect via a UI event,\nrespecting the `noink` property.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 603,
              "column": 4
            },
            "end": {
              "line": 607,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "Event="
            }
          ]
        },
        {
          "name": "upAction",
          "description": "Provokes a ripple up effect via a UI event,\n*not* respecting the `noink` property.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 614,
              "column": 4
            },
            "end": {
              "line": 625,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "Event="
            }
          ]
        },
        {
          "name": "onAnimationComplete",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 627,
              "column": 4
            },
            "end": {
              "line": 631,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "addRipple",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 633,
              "column": 4
            },
            "end": {
              "line": 643,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "removeRipple",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 645,
              "column": 4
            },
            "end": {
              "line": 659,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ripple"
            }
          ]
        },
        {
          "name": "animate",
          "description": "This conflicts with Element#antimate().\nhttps://developer.mozilla.org/en-US/docs/Web/API/Element/animate",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 666,
              "column": 4
            },
            "end": {
              "line": 690,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onEnterKeydown",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 692,
              "column": 4
            },
            "end": {
              "line": 695,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onSpaceKeydown",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 697,
              "column": 4
            },
            "end": {
              "line": 699,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onSpaceKeyup",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 701,
              "column": 4
            },
            "end": {
              "line": 703,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_holdDownChanged",
          "description": "effect.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 707,
              "column": 4
            },
            "end": {
              "line": 716,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newVal"
            },
            {
              "name": "oldVal"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 427,
          "column": 10
        },
        "end": {
          "line": 726,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "key-event-target",
          "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 277,
              "column": 6
            },
            "end": {
              "line": 282,
              "column": 7
            }
          },
          "metadata": {},
          "type": "?EventTarget",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "stop-keyboard-event-propagation",
          "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 288,
              "column": 6
            },
            "end": {
              "line": 288,
              "column": 65
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "initial-opacity",
          "description": "The initial opacity set on the wave.",
          "sourceRange": {
            "start": {
              "line": 440,
              "column": 6
            },
            "end": {
              "line": 440,
              "column": 49
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "opacity-decay-velocity",
          "description": "How fast (opacity per second) the wave fades out.",
          "sourceRange": {
            "start": {
              "line": 449,
              "column": 6
            },
            "end": {
              "line": 449,
              "column": 54
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "recenters",
          "description": "If true, ripples will exhibit a gravitational pull towards\nthe center of their container as they fade away.",
          "sourceRange": {
            "start": {
              "line": 459,
              "column": 6
            },
            "end": {
              "line": 459,
              "column": 46
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "center",
          "description": "If true, ripples will center inside its container",
          "sourceRange": {
            "start": {
              "line": 468,
              "column": 6
            },
            "end": {
              "line": 468,
              "column": 43
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "ripples",
          "description": "A list of the visual ripples.",
          "sourceRange": {
            "start": {
              "line": 477,
              "column": 6
            },
            "end": {
              "line": 482,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "animating",
          "description": "True when there are visible ripples animating within the\nelement.",
          "sourceRange": {
            "start": {
              "line": 488,
              "column": 6
            },
            "end": {
              "line": 489,
              "column": 81
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "hold-down",
          "description": "If true, the ripple will remain in the \"down\" state until `holdDown`\nis set to false again.",
          "sourceRange": {
            "start": {
              "line": 495,
              "column": 6
            },
            "end": {
              "line": 495,
              "column": 75
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "noink",
          "description": "If true, the ripple will not generate a ripple effect\nvia pointer interaction.\nCalling ripple's imperative api like `simulatedRipple` will\nstill generate the ripple effect.",
          "sourceRange": {
            "start": {
              "line": 503,
              "column": 6
            },
            "end": {
              "line": 503,
              "column": 42
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "transitionend",
          "description": "transitionend",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "paper-ripple"
    },
    {
      "description": "Material design: [Icon toggles](https://www.google.com/design/spec/components/buttons.html#buttons-toggle-buttons)\n\n`paper-icon-button` is a button with an image placed at the center. When the user touches\nthe button, a ripple effect emanates from the center of the button.\n\n`paper-icon-button` does not include a default icon set. To use icons from the default\nset, include `PolymerElements/iron-icons/iron-icons.html`, and use the `icon` attribute to specify which icon\nfrom the icon set to use.\n\n    <paper-icon-button icon=\"menu\"></paper-icon-button>\n\nSee [`iron-iconset`](iron-iconset) for more information about\nhow to use a custom icon set.\n\nExample:\n\n    <link href=\"path/to/iron-icons/iron-icons.html\" rel=\"import\">\n\n    <paper-icon-button icon=\"favorite\"></paper-icon-button>\n    <paper-icon-button src=\"star.png\"></paper-icon-button>\n\nTo use `paper-icon-button` as a link, wrap it in an anchor tag. Since `paper-icon-button`\nwill already receive focus, you may want to prevent the anchor tag from receiving focus\nas well by setting its tabindex to -1.\n\n    <a href=\"https://www.polymer-project.org\" tabindex=\"-1\">\n      <paper-icon-button icon=\"polymer\"></paper-icon-button>\n    </a>\n\n### Styling\n\nStyle the button with CSS as you would a normal DOM element. If you are using the icons\nprovided by `iron-icons`, they will inherit the foreground color of the button.\n\n    /* make a red \"favorite\" button */\n    <paper-icon-button icon=\"favorite\" style=\"color: red;\"></paper-icon-button>\n\nBy default, the ripple is the same color as the foreground at 25% opacity. You may\ncustomize the color using the `--paper-icon-button-ink-color` custom property.\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-icon-button-disabled-text` | The color of the disabled button | `--disabled-text-color`\n`--paper-icon-button-ink-color` | Selected/focus ripple color | `--primary-text-color`\n`--paper-icon-button` | Mixin for a button | `{}`\n`--paper-icon-button-disabled` | Mixin for a disabled button | `{}`\n`--paper-icon-button-hover` | Mixin for button on hover | `{}`",
      "summary": "",
      "path": "components\\paper-icon-button\\paper-icon-button.html",
      "properties": [
        {
          "name": "keyEventTarget",
          "type": "?EventTarget",
          "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 277,
              "column": 6
            },
            "end": {
              "line": 282,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "stopKeyboardEventPropagation",
          "type": "boolean",
          "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 288,
              "column": 6
            },
            "end": {
              "line": 288,
              "column": 65
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_boundKeyHandlers",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 290,
              "column": 6
            },
            "end": {
              "line": 295,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_imperativeKeyBindings",
          "type": "Object",
          "description": "own properties of everything on the \"prototype\".",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 299,
              "column": 6
            },
            "end": {
              "line": 304,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "keyBindings",
          "type": "!Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 100,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "pressed",
          "type": "boolean",
          "description": "If true, the user is currently holding down the button.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 27,
              "column": 6
            },
            "end": {
              "line": 33,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_pressedChanged\"",
              "readOnly": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "toggles",
          "type": "boolean",
          "description": "If true, the button toggles the active state with each tap or press\nof the spacebar.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 39,
              "column": 6
            },
            "end": {
              "line": 43,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "active",
          "type": "boolean",
          "description": "If true, the button is a toggle and is currently in the active state.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 53,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "pointerDown",
          "type": "boolean",
          "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 60,
              "column": 6
            },
            "end": {
              "line": 64,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "receivedFocusFromKeyboard",
          "type": "boolean",
          "description": "True if the input device that caused the element to receive focus\nwas a keyboard.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 70,
              "column": 6
            },
            "end": {
              "line": 73,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "ariaActiveAttribute",
          "type": "string",
          "description": "The aria attribute to be set if the button is a toggle and in the\nactive state.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 79,
              "column": 6
            },
            "end": {
              "line": 83,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_ariaActiveAttributeChanged\""
            }
          },
          "defaultValue": "\"aria-pressed\"",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_mouseEventRe",
          "type": "object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 106,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "focused",
          "type": "boolean",
          "description": "If true, the element currently has focus.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 25,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "If true, the user cannot interact with this element.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_disabledChanged\""
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_oldTabIndex",
          "type": "(?string | undefined)",
          "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 49,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_boundFocusBlurHandler",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 53,
              "column": 6
            },
            "end": {
              "line": 58,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "__handleEventRetargeting",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 60,
              "column": 6
            },
            "end": {
              "line": 65,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "noink",
          "type": "boolean",
          "description": "If true, the element will not produce a ripple effect when interacted\nwith via the pointer.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\paper-behaviors\\paper-ripple-behavior.html",
            "start": {
              "line": 30,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 55
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_noinkChanged\""
            }
          },
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "_rippleContainer",
          "type": "(Element | undefined)",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\paper-behaviors\\paper-ripple-behavior.html",
            "start": {
              "line": 35,
              "column": 6
            },
            "end": {
              "line": 37,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "hostAttributes",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 6
            },
            "end": {
              "line": 137,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "src",
          "type": "string",
          "description": "The URL of an image for the icon. If the src property is specified,\nthe icon property should not be.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 148,
              "column": 8
            },
            "end": {
              "line": 150,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "icon",
          "type": "string",
          "description": "Specifies the icon name or index in the set of icons available in\nthe icon's icon set. If the icon property is specified,\nthe src property should not be.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 8
            },
            "end": {
              "line": 159,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "alt",
          "type": "string",
          "description": "Specifies the alternate text for the button, for accessibility.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 8
            },
            "end": {
              "line": 167,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_altChanged\""
            }
          }
        }
      ],
      "methods": [
        {
          "name": "registered",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 317,
              "column": 4
            },
            "end": {
              "line": 319,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 321,
              "column": 4
            },
            "end": {
              "line": 323,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 325,
              "column": 4
            },
            "end": {
              "line": 327,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "addOwnKeyBinding",
          "description": "Can be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 337,
              "column": 4
            },
            "end": {
              "line": 341,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventString",
              "type": "string"
            },
            {
              "name": "handlerName",
              "type": "string"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "removeOwnKeyBindings",
          "description": "When called, will remove all imperatively-added key bindings.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 346,
              "column": 4
            },
            "end": {
              "line": 350,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "keyboardEventMatchesKeys",
          "description": "Returns true if a keyboard event matches `eventString`.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 359,
              "column": 4
            },
            "end": {
              "line": 367,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            },
            {
              "name": "eventString",
              "type": "string"
            }
          ],
          "return": {
            "type": "boolean"
          },
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_collectKeyBindings",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 369,
              "column": 4
            },
            "end": {
              "line": 379,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_prepKeyBindings",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 381,
              "column": 4
            },
            "end": {
              "line": 403,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_addKeyBinding",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 405,
              "column": 4
            },
            "end": {
              "line": 412,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventString"
            },
            {
              "name": "handlerName"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_resetKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 414,
              "column": 4
            },
            "end": {
              "line": 420,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_listenKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 422,
              "column": 4
            },
            "end": {
              "line": 435,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_unlistenKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 437,
              "column": 4
            },
            "end": {
              "line": 452,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_onKeyBindingEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 454,
              "column": 4
            },
            "end": {
              "line": 475,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "keyBindings"
            },
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_triggerKeyHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 477,
              "column": 4
            },
            "end": {
              "line": 486,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "keyCombo"
            },
            {
              "name": "handlerName"
            },
            {
              "name": "keyboardEvent"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_tapHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 108,
              "column": 4
            },
            "end": {
              "line": 115,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_focusChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 117,
              "column": 4
            },
            "end": {
              "line": 123,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "focused"
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_detectKeyboardFocus",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 125,
              "column": 4
            },
            "end": {
              "line": 127,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "focused"
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_userActivate",
          "description": "'change' events",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 131,
              "column": 4
            },
            "end": {
              "line": 136,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "active"
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_downHandler",
          "description": "In addition to the functionality provided in `IronButtonState`, ensures\na ripple effect is created when the element is in a `pressed` state.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\paper-behaviors\\paper-ripple-behavior.html",
            "start": {
              "line": 54,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "_upHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 144,
              "column": 4
            },
            "end": {
              "line": 147,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_spaceKeyDownHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 152,
              "column": 4
            },
            "end": {
              "line": 164,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "!KeyboardEvent",
              "description": "."
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_spaceKeyUpHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 169,
              "column": 4
            },
            "end": {
              "line": 182,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "!KeyboardEvent",
              "description": "."
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_asyncClick",
          "description": "event handler to unwind before triggering another event",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 186,
              "column": 4
            },
            "end": {
              "line": 190,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_pressedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 194,
              "column": 4
            },
            "end": {
              "line": 196,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pressed"
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_ariaActiveAttributeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 198,
              "column": 4
            },
            "end": {
              "line": 202,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_activeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 204,
              "column": 4
            },
            "end": {
              "line": 212,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "active"
            },
            {
              "name": "ariaActiveAttribute"
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_controlStateChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 214,
              "column": 4
            },
            "end": {
              "line": 220,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_changedButtonState",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 224,
              "column": 4
            },
            "end": {
              "line": 228,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 75,
              "column": 4
            },
            "end": {
              "line": 78,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_focusBlurHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_disabledChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 125,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "disabled"
            },
            {
              "name": "old"
            }
          ],
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_changedControlState",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_buttonStateChanged",
          "description": "Ensures a `<paper-ripple>` element is available when the element is\nfocused.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\paper-behaviors\\paper-ripple-behavior.html",
            "start": {
              "line": 44,
              "column": 4
            },
            "end": {
              "line": 48,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "ensureRipple",
          "description": "Ensures this element contains a ripple effect. For startup efficiency\nthe ripple effect is dynamically on demand when needed.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\paper-behaviors\\paper-ripple-behavior.html",
            "start": {
              "line": 67,
              "column": 4
            },
            "end": {
              "line": 86,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "optTriggeringEvent",
              "type": "!Event=",
              "description": "(optional) event that triggered the\nripple."
            }
          ],
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "getRipple",
          "description": "Returns the `<paper-ripple>` element used by this element to create\nripple effects. The element's ripple is created on demand, when\nnecessary, and calling this method will force the\nripple to be created.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\paper-behaviors\\paper-ripple-behavior.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 97,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "hasRipple",
          "description": "Returns true if this element currently contains a ripple effect.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\paper-behaviors\\paper-ripple-behavior.html",
            "start": {
              "line": 103,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean"
          },
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "_createRipple",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\paper-behaviors\\paper-inky-focus-behavior.html",
            "start": {
              "line": 33,
              "column": 4
            },
            "end": {
              "line": 39,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PaperInkyFocusBehavior"
        },
        {
          "name": "_noinkChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\paper-behaviors\\paper-ripple-behavior.html",
            "start": {
              "line": 118,
              "column": 4
            },
            "end": {
              "line": 122,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "noink"
            }
          ],
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "_focusedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\paper-behaviors\\paper-inky-focus-behavior.html",
            "start": {
              "line": 24,
              "column": 4
            },
            "end": {
              "line": 31,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "receivedFocusFromKeyboard"
            }
          ],
          "inheritedFrom": "Polymer.PaperInkyFocusBehavior"
        },
        {
          "name": "_altChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 6
            },
            "end": {
              "line": 177,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue"
            },
            {
              "name": "oldValue"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 131,
          "column": 12
        },
        "end": {
          "line": 178,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "key-event-target",
          "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 277,
              "column": 6
            },
            "end": {
              "line": 282,
              "column": 7
            }
          },
          "metadata": {},
          "type": "?EventTarget",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "stop-keyboard-event-propagation",
          "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 288,
              "column": 6
            },
            "end": {
              "line": 288,
              "column": 65
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "pressed",
          "description": "If true, the user is currently holding down the button.",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 27,
              "column": 6
            },
            "end": {
              "line": 33,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "toggles",
          "description": "If true, the button toggles the active state with each tap or press\nof the spacebar.",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 39,
              "column": 6
            },
            "end": {
              "line": 43,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "active",
          "description": "If true, the button is a toggle and is currently in the active state.",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 53,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "pointer-down",
          "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 60,
              "column": 6
            },
            "end": {
              "line": 64,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "received-focus-from-keyboard",
          "description": "True if the input device that caused the element to receive focus\nwas a keyboard.",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 70,
              "column": 6
            },
            "end": {
              "line": 73,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "aria-active-attribute",
          "description": "The aria attribute to be set if the button is a toggle and in the\nactive state.",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 79,
              "column": 6
            },
            "end": {
              "line": 83,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "focused",
          "description": "If true, the element currently has focus.",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 25,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "disabled",
          "description": "If true, the user cannot interact with this element.",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "noink",
          "description": "If true, the element will not produce a ripple effect when interacted\nwith via the pointer.",
          "sourceRange": {
            "file": "..\\paper-behaviors\\paper-ripple-behavior.html",
            "start": {
              "line": 30,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 55
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "src",
          "description": "The URL of an image for the icon. If the src property is specified,\nthe icon property should not be.",
          "sourceRange": {
            "start": {
              "line": 148,
              "column": 8
            },
            "end": {
              "line": 150,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "icon",
          "description": "Specifies the icon name or index in the set of icons available in\nthe icon's icon set. If the icon property is specified,\nthe src property should not be.",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 8
            },
            "end": {
              "line": 159,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "alt",
          "description": "Specifies the alternate text for the button, for accessibility.",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 8
            },
            "end": {
              "line": 167,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "active-changed",
          "description": "Fired when the `active` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "type": "CustomEvent",
          "name": "focused-changed",
          "description": "Fired when the `focused` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "type": "CustomEvent",
          "name": "disabled-changed",
          "description": "Fired when the `disabled` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronControlState"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "paper-icon-button"
    },
    {
      "description": "`iron-overlay-backdrop` is a backdrop used by `Polymer.IronOverlayBehavior`. It should be a\nsingleton.\n\n### Styling\n\nThe following custom properties and mixins are available for styling.\n\nCustom property | Description | Default\n-------------------------------------------|------------------------|---------\n`--iron-overlay-backdrop-background-color` | Backdrop background color                                     | #000\n`--iron-overlay-backdrop-opacity`          | Backdrop opacity                                              | 0.6\n`--iron-overlay-backdrop`                  | Mixin applied to `iron-overlay-backdrop`.                      | {}\n`--iron-overlay-backdrop-opened`           | Mixin applied to `iron-overlay-backdrop` when it is displayed | {}",
      "summary": "",
      "path": "components\\iron-overlay-behavior\\iron-overlay-backdrop.html",
      "properties": [
        {
          "name": "opened",
          "type": "boolean",
          "description": "Returns true if the backdrop is opened.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 6
            },
            "end": {
              "line": 72,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_openedChanged\""
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 78,
              "column": 4
            },
            "end": {
              "line": 81,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 4
            },
            "end": {
              "line": 85,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "prepare",
          "description": "Appends the backdrop to document body if needed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 4
            },
            "end": {
              "line": 94,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "open",
          "description": "Shows the backdrop.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 101,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "close",
          "description": "Hides the backdrop.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 108,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "complete",
          "description": "Removes the backdrop from document body if needed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 4
            },
            "end": {
              "line": 117,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onTransitionend",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 119,
              "column": 4
            },
            "end": {
              "line": 123,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "_openedChanged",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 4
            },
            "end": {
              "line": 157,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "opened",
              "type": "boolean"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 58,
          "column": 10
        },
        "end": {
          "line": 158,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "opened",
          "description": "Returns true if the backdrop is opened.",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 6
            },
            "end": {
              "line": 72,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "components/iron-overlay-behavior/iron-overlay-backdrop.html",
            "start": {
              "line": 52,
              "column": 4
            },
            "end": {
              "line": 52,
              "column": 17
            }
          }
        }
      ],
      "tagname": "iron-overlay-backdrop"
    },
    {
      "description": "Material design: [Snackbars & toasts](https://www.google.com/design/spec/components/snackbars-toasts.html)\n\n`paper-toast` provides a subtle notification toast. Only one `paper-toast` will\nbe visible on screen.\n\nUse `opened` to show the toast:\n\nExample:\n\n    <paper-toast text=\"Hello world!\" opened></paper-toast>\n\nAlso `open()` or `show()` can be used to show the toast:\n\nExample:\n\n    <paper-button on-click=\"openToast\">Open Toast</paper-button>\n    <paper-toast id=\"toast\" text=\"Hello world!\"></paper-toast>\n\n    ...\n\n    openToast: function() {\n      this.$.toast.open();\n    }\n\nSet `duration` to 0, a negative number or Infinity to persist the toast on screen:\n\nExample:\n\n    <paper-toast text=\"Terms and conditions\" opened duration=\"0\">\n      <a href=\"#\">Show more</a>\n    </paper-toast>\n\n\n### Styling\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-toast-background-color` | The paper-toast background-color | `#323232`\n`--paper-toast-color` | The paper-toast color | `#f1f1f1`\n\nThis element applies the mixin `--paper-font-common-base` but does not import `paper-styles/typography.html`.\nIn order to apply the `Roboto` font to this element, make sure you've imported `paper-styles/typography.html`.",
      "summary": "",
      "path": "components\\paper-toast\\paper-toast.html",
      "properties": [
        {
          "name": "sizingTarget",
          "type": "!Element",
          "description": "The element that will receive a `max-height`/`width`. By default it is\nthe same as `this`, but it can be set to a child element. This is useful,\nfor example, for implementing a scrolling region inside the element.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 72,
              "column": 6
            },
            "end": {
              "line": 77,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "fitInto",
          "type": "Object",
          "description": "The element to fit `this` into.\nOverridden from `Polymer.IronFitBehavior`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 8
            },
            "end": {
              "line": 129,
              "column": 77
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_onFitIntoChanged\""
            }
          }
        },
        {
          "name": "noOverlap",
          "type": "boolean",
          "description": "Will position the element around the positionTarget without overlapping\nit.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 88,
              "column": 6
            },
            "end": {
              "line": 88,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "positionTarget",
          "type": "!Element",
          "description": "The element that should be used to position the element. If not set, it\nwill default to the parent node.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 95,
              "column": 6
            },
            "end": {
              "line": 95,
              "column": 37
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "horizontalAlign",
          "type": "string",
          "description": "The orientation against which to align the dropdown content\nhorizontally relative to `positionTarget`.\nOverridden from `Polymer.IronFitBehavior`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 8
            },
            "end": {
              "line": 136,
              "column": 54
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"left\""
        },
        {
          "name": "verticalAlign",
          "type": "string",
          "description": "The orientation against which to align the dropdown content\nvertically relative to `positionTarget`.\nOverridden from `Polymer.IronFitBehavior`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 8
            },
            "end": {
              "line": 143,
              "column": 54
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"bottom\""
        },
        {
          "name": "dynamicAlign",
          "type": "boolean",
          "description": "If true, it will use `horizontalAlign` and `verticalAlign` values as\npreferred alignment and if there's not enough space, it will pick the\nvalues which minimize the cropping.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 116,
              "column": 6
            },
            "end": {
              "line": 116,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "horizontalOffset",
          "type": "number",
          "description": "A pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `horizontalAlign`.\n\nIf `horizontalAlign` is \"left\" or \"center\", this offset will increase or\ndecrease the distance to the left side of the screen: a negative offset\nwill move the dropdown to the left; a positive one, to the right.\n\nConversely if `horizontalAlign` is \"right\", this offset will increase\nor decrease the distance to the right side of the screen: a negative\noffset will move the dropdown to the right; a positive one, to the left.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 132,
              "column": 6
            },
            "end": {
              "line": 132,
              "column": 62
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "verticalOffset",
          "type": "number",
          "description": "A pixel value that will be added to the position calculated for the\ngiven `verticalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `verticalAlign`.\n\nIf `verticalAlign` is \"top\" or \"middle\", this offset will increase or\ndecrease the distance to the top side of the screen: a negative offset\nwill move the dropdown upwards; a positive one, downwards.\n\nConversely if `verticalAlign` is \"bottom\", this offset will increase\nor decrease the distance to the bottom side of the screen: a negative\noffset will move the dropdown downwards; a positive one, upwards.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 148,
              "column": 6
            },
            "end": {
              "line": 148,
              "column": 60
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "autoFitOnAttach",
          "type": "boolean",
          "description": "Set to true to auto-fit on attach.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 153,
              "column": 6
            },
            "end": {
              "line": 153,
              "column": 52
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "_fitInfo",
          "type": "?Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 156,
              "column": 6
            },
            "end": {
              "line": 156,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "_parentResizable",
          "type": "Object",
          "description": "The closest ancestor element that implements `IronResizableBehavior`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_parentResizableChanged\""
            }
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyingDescendant",
          "type": "boolean",
          "description": "True if this element is currently notifying its descendant elements of\nresize.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "opened",
          "type": "boolean",
          "description": "True if the overlay is currently displayed.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 81
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_openedChanged\""
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "canceled",
          "type": "boolean",
          "description": "True if the overlay was canceled when it was last closed.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 35,
              "column": 6
            },
            "end": {
              "line": 40,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_canceledChanged\"",
              "readOnly": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "withBackdrop",
          "type": "boolean",
          "description": "Set to true to display a backdrop behind the overlay. It traps the focus\nwithin the light DOM of the overlay.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 46,
              "column": 6
            },
            "end": {
              "line": 46,
              "column": 69
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_withBackdropChanged\""
            }
          },
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "noAutoFocus",
          "type": "boolean",
          "description": "Overridden from `IronOverlayBehavior`.\nSet to true to disable auto-focusing the toast or child nodes with\nthe `autofocus` attribute` when the overlay is opened.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 168,
              "column": 8
            },
            "end": {
              "line": 168,
              "column": 49
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "noCancelOnEscKey",
          "type": "boolean",
          "description": "Set to true to disable canceling the overlay with the ESC key.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 57,
              "column": 6
            },
            "end": {
              "line": 57,
              "column": 53
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "noCancelOnOutsideClick",
          "type": "boolean",
          "description": "Overridden from `IronOverlayBehavior`.\nSet to false to enable closing of the toast by clicking outside it.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 161,
              "column": 8
            },
            "end": {
              "line": 161,
              "column": 60
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "closingReason",
          "type": "Object",
          "description": "Contains the reason(s) this overlay was last closed (see\n`iron-overlay-closed`). `IronOverlayBehavior` provides the `canceled`\nreason; implementers of the behavior can provide other reasons in\naddition to `canceled`.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 70,
              "column": 6
            },
            "end": {
              "line": 74,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "restoreFocusOnClose",
          "type": "boolean",
          "description": "Set to true to enable restoring of focus when overlay is closed.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 79,
              "column": 6
            },
            "end": {
              "line": 79,
              "column": 56
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "allowClickThrough",
          "type": "boolean",
          "description": "Set to true to allow clicks to go through overlays.\nWhen the user clicks outside this overlay, the click may\nclose the overlay below.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 86,
              "column": 6
            },
            "end": {
              "line": 86,
              "column": 40
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "alwaysOnTop",
          "type": "boolean",
          "description": "Set to true to keep overlay always on top.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 91,
              "column": 6
            },
            "end": {
              "line": 91,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "scrollAction",
          "type": "string",
          "description": "Determines which action to perform when scroll outside an opened overlay\nhappens. Possible values: lock - blocks scrolling from happening, refit -\ncomputes the new position on the overlay cancel - causes the overlay to\nclose",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 99,
              "column": 6
            },
            "end": {
              "line": 99,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_manager",
          "type": "!Polymer.IronOverlayManagerClass",
          "description": "Shortcut to access to the overlay manager.",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 106,
              "column": 6
            },
            "end": {
              "line": 106,
              "column": 65
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_focusedChild",
          "type": "?Node",
          "description": "The node being focused.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 112,
              "column": 6
            },
            "end": {
              "line": 112,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "duration",
          "type": "number",
          "description": "The duration in milliseconds to show the toast.\nSet to `0`, a negative number, or `Infinity`, to disable the\ntoast auto-closing.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 150,
              "column": 8
            },
            "end": {
              "line": 150,
              "column": 45
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "3000"
        },
        {
          "name": "text",
          "type": "string",
          "description": "The text to display in the toast.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 8
            },
            "end": {
              "line": 155,
              "column": 39
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\""
        },
        {
          "name": "visible",
          "type": "Function",
          "description": "Read-only. Deprecated. Use `opened` from `IronOverlayBehavior`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 178,
              "column": 6
            },
            "end": {
              "line": 181,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        },
        {
          "name": "_canAutoClose",
          "type": "Function",
          "description": "Read-only. Can auto-close if duration is a positive finite number.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 187,
              "column": 6
            },
            "end": {
              "line": 189,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_fitWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 159,
              "column": 4
            },
            "end": {
              "line": 167,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "_fitHeight",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 169,
              "column": 4
            },
            "end": {
              "line": 177,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "_fitLeft",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 179,
              "column": 4
            },
            "end": {
              "line": 187,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "_fitTop",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 189,
              "column": 4
            },
            "end": {
              "line": 197,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "_defaultPositionTarget",
          "description": "The element that should be used to position the element,\nif no position target is configured.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 203,
              "column": 4
            },
            "end": {
              "line": 211,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "_localeHorizontalAlign",
          "description": "The horizontal align value, accounting for the RTL/LTR text direction.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 216,
              "column": 4
            },
            "end": {
              "line": 227,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "__shouldPosition",
          "description": "True if the element should be positioned instead of centered.",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 233,
              "column": 4
            },
            "end": {
              "line": 236,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 177,
              "column": 4
            },
            "end": {
              "line": 183,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 185,
              "column": 4
            },
            "end": {
              "line": 207,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "fit",
          "description": "Positions and fits the element into the `fitInto` element.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 270,
              "column": 4
            },
            "end": {
              "line": 274,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "_discoverInfo",
          "description": "Memoize information needed to position and size the target element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 280,
              "column": 4
            },
            "end": {
              "line": 319,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "resetFit",
          "description": "Resets the target element's position and size constraints, and clear\nthe memoized data.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 325,
              "column": 4
            },
            "end": {
              "line": 335,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "refit",
          "description": "Equivalent to calling `resetFit()` and `fit()`. Useful to call this after\nthe element or the `fitInto` element has been resized, or if any of the\npositioning properties (e.g. `horizontalAlign, verticalAlign`) is updated.\nIt preserves the scroll position of the sizingTarget.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 343,
              "column": 4
            },
            "end": {
              "line": 350,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "position",
          "description": "Positions the element according to `horizontalAlign, verticalAlign`.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 355,
              "column": 4
            },
            "end": {
              "line": 416,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "constrain",
          "description": "Constrains the size of the element to `fitInto` by setting `max-height`\nand/or `max-width`.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 422,
              "column": 4
            },
            "end": {
              "line": 452,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "_sizeDimension",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 458,
              "column": 4
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rect"
            },
            {
              "name": "positionedBy"
            },
            {
              "name": "start"
            },
            {
              "name": "end"
            },
            {
              "name": "extent"
            }
          ],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "__sizeDimension",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 465,
              "column": 4
            },
            "end": {
              "line": 476,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rect"
            },
            {
              "name": "positionedBy"
            },
            {
              "name": "start"
            },
            {
              "name": "end"
            },
            {
              "name": "extent"
            }
          ],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "center",
          "description": "Centers horizontally and vertically if not already positioned. This also\nsets `position:fixed`.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 482,
              "column": 4
            },
            "end": {
              "line": 515,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "__getNormalizedRect",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 517,
              "column": 4
            },
            "end": {
              "line": 529,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            }
          ],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "__getOffscreenArea",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 531,
              "column": 4
            },
            "end": {
              "line": 538,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "position"
            },
            {
              "name": "size"
            },
            {
              "name": "fitRect"
            }
          ],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "__getPosition",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 541,
              "column": 4
            },
            "end": {
              "line": 675,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hAlign"
            },
            {
              "name": "vAlign"
            },
            {
              "name": "size"
            },
            {
              "name": "sizeNoMargins"
            },
            {
              "name": "positionRect"
            },
            {
              "name": "fitRect"
            }
          ],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 6
            },
            "end": {
              "line": 194,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "notifyResize",
          "description": "Can be called to manually notify a resizable and its descendant\nresizables of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "assignParentResizable",
          "description": "Used to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 98,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "stopResizeNotificationsFor",
          "description": "Used to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "resizerShouldNotify",
          "description": "This method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 59
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "A candidate descendant element that\nimplements `IronResizableBehavior`."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the `element` should be notified of resize."
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onDescendantIronResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 126,
              "column": 4
            },
            "end": {
              "line": 138,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_fireResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 140,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onIronRequestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 147,
              "column": 4
            },
            "end": {
              "line": 162,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_parentResizableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 164,
              "column": 4
            },
            "end": {
              "line": 168,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyDescendant",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 170,
              "column": 4
            },
            "end": {
              "line": 181,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descendant"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_requestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 183,
              "column": 4
            },
            "end": {
              "line": 211,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "backdropElement",
          "description": "The backdrop element.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 126,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!Element"
          },
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_focusNode",
          "description": "Returns the node to give focus to.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 132,
              "column": 4
            },
            "end": {
              "line": 135,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!Node"
          },
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_focusableNodes",
          "description": "Array of nodes that can receive focus (overlay included), ordered by\n`tabindex`. This is used to retrieve which is the first and last focusable\nnodes in order to wrap the focus for overlays `with-backdrop`.\n\nIf you know what is your content (specifically the first and last focusable\nchildren), you can override this method to return only `[firstFocusable,\nlastFocusable];`",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 148,
              "column": 4
            },
            "end": {
              "line": 150,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!Array.<!Node>"
          },
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 155,
              "column": 4
            },
            "end": {
              "line": 175,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "toggle",
          "description": "Toggle the opened state of the overlay.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 212,
              "column": 4
            },
            "end": {
              "line": 215,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "open",
          "description": "Open the overlay.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 220,
              "column": 4
            },
            "end": {
              "line": 223,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "close",
          "description": "Close the overlay.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 228,
              "column": 4
            },
            "end": {
              "line": 231,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "cancel",
          "description": "Cancels the overlay.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 237,
              "column": 4
            },
            "end": {
              "line": 246,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "Event=",
              "description": "The original event"
            }
          ],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "invalidateTabbables",
          "description": "Invalidates the cached tabbable nodes. To be called when any of the\nfocusable content changes (e.g. a button is disabled).",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 252,
              "column": 4
            },
            "end": {
              "line": 254,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_ensureSetup",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 256,
              "column": 4
            },
            "end": {
              "line": 263,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_openedChanged",
          "description": "Overridden from `IronOverlayBehavior`.\nCalled when the value of `opened` changes.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 248,
              "column": 6
            },
            "end": {
              "line": 266,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_canceledChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 289,
              "column": 4
            },
            "end": {
              "line": 292,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_withBackdropChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 294,
              "column": 4
            },
            "end": {
              "line": 306,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_prepareRenderOpened",
          "description": "tasks which must occur before opening; e.g. making the element visible.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 328,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_renderOpened",
          "description": "Overridden from `IronOverlayBehavior`.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 271,
              "column": 6
            },
            "end": {
              "line": 273,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_renderClosed",
          "description": "Overridden from `IronOverlayBehavior`.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 278,
              "column": 6
            },
            "end": {
              "line": 280,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_finishRenderOpened",
          "description": "Tasks to be performed at the end of open action. Will fire\n`iron-overlay-opened`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 353,
              "column": 4
            },
            "end": {
              "line": 358,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_finishRenderClosed",
          "description": "Tasks to be performed at the end of close action. Will fire\n`iron-overlay-closed`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 365,
              "column": 4
            },
            "end": {
              "line": 373,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_preparePositioning",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 375,
              "column": 4
            },
            "end": {
              "line": 379,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_finishPositioning",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 381,
              "column": 4
            },
            "end": {
              "line": 394,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_applyFocus",
          "description": "Applies focus according to the opened state.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 400,
              "column": 4
            },
            "end": {
              "line": 423,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_onCaptureClick",
          "description": "Cancels (closes) the overlay. Call when click happens outside the overlay.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 430,
              "column": 4
            },
            "end": {
              "line": 434,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "!Event"
            }
          ],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_onCaptureFocus",
          "description": "Keeps track of the focused child. If withBackdrop, traps focus within\noverlay.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 442,
              "column": 4
            },
            "end": {
              "line": 453,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "!Event"
            }
          ],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_onCaptureEsc",
          "description": "Handles the ESC key event and cancels (closes) the overlay.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 460,
              "column": 4
            },
            "end": {
              "line": 464,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "!Event"
            }
          ],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_onCaptureTab",
          "description": "Handles TAB key events to track focus changes.\nWill wrap focus for overlays withBackdrop.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 472,
              "column": 4
            },
            "end": {
              "line": 516,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "!Event"
            }
          ],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_onIronResize",
          "description": "Refits if the overlay is opened and not animating.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 522,
              "column": 4
            },
            "end": {
              "line": 526,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_onNodesChange",
          "description": "Will call notifyResize if overlay is opened.\nCan be overridden in order to avoid multiple observers on the same node.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 533,
              "column": 4
            },
            "end": {
              "line": 539,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "__ensureFirstLastFocusables",
          "description": "Will set first and last focusable nodes if any of them is not set.",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 545,
              "column": 4
            },
            "end": {
              "line": 551,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "__openedChanged",
          "description": "Tasks executed when opened changes: prepare for the opening, move the\nfocus, update the manager, render opened/closed.",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 558,
              "column": 4
            },
            "end": {
              "line": 574,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "__deraf",
          "description": "Debounces the execution of a callback to the next animation frame.",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 582,
              "column": 4
            },
            "end": {
              "line": 591,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "jobname",
              "type": "!string"
            },
            {
              "name": "callback",
              "type": "!Function",
              "description": "Always bound to `this`"
            }
          ],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "__updateScrollObservers",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 599,
              "column": 4
            },
            "end": {
              "line": 610,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isAttached",
              "type": "boolean"
            },
            {
              "name": "opened",
              "type": "boolean"
            },
            {
              "name": "scrollAction",
              "type": "string="
            }
          ],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "__addScrollListeners",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 615,
              "column": 4
            },
            "end": {
              "line": 637,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "__removeScrollListeners",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 642,
              "column": 4
            },
            "end": {
              "line": 654,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "__isValidScrollAction",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 661,
              "column": 4
            },
            "end": {
              "line": 664,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "scrollAction",
              "type": "string="
            }
          ],
          "return": {
            "type": "boolean"
          },
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "__onCaptureScroll",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 669,
              "column": 4
            },
            "end": {
              "line": 691,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "__saveScrollPosition",
          "description": "Memoizes the scroll position of the outside scrolling element.",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 697,
              "column": 4
            },
            "end": {
              "line": 708,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "__restoreScrollPosition",
          "description": "Resets the scroll position of the outside scrolling element.",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 714,
              "column": 4
            },
            "end": {
              "line": 725,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "show",
          "description": "Show the toast. Without arguments, this is the same as `open()` from\n`IronOverlayBehavior`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 202,
              "column": 6
            },
            "end": {
              "line": 217,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "properties",
              "type": "(Object | string)=",
              "description": "Properties to be set before opening the toast.\ne.g. `toast.show('hello')` or `toast.show({text: 'hello', duration: 3000})`"
            }
          ]
        },
        {
          "name": "hide",
          "description": "Hide the toast. Same as `close()` from `IronOverlayBehavior`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 222,
              "column": 6
            },
            "end": {
              "line": 224,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "__onTransitionEnd",
          "description": "Called on transitions of the toast, indicating a finished animation",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 230,
              "column": 6
            },
            "end": {
              "line": 242,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_onFitIntoChanged",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 285,
              "column": 6
            },
            "end": {
              "line": 287,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "fitInto"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 119,
          "column": 12
        },
        "end": {
          "line": 295,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "sizing-target",
          "description": "The element that will receive a `max-height`/`width`. By default it is\nthe same as `this`, but it can be set to a child element. This is useful,\nfor example, for implementing a scrolling region inside the element.",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 72,
              "column": 6
            },
            "end": {
              "line": 77,
              "column": 7
            }
          },
          "metadata": {},
          "type": "!Element",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "fit-into",
          "description": "The element to fit `this` into.\nOverridden from `Polymer.IronFitBehavior`.",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 8
            },
            "end": {
              "line": 129,
              "column": 77
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "no-overlap",
          "description": "Will position the element around the positionTarget without overlapping\nit.",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 88,
              "column": 6
            },
            "end": {
              "line": 88,
              "column": 32
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "position-target",
          "description": "The element that should be used to position the element. If not set, it\nwill default to the parent node.",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 95,
              "column": 6
            },
            "end": {
              "line": 95,
              "column": 37
            }
          },
          "metadata": {},
          "type": "!Element",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "horizontal-align",
          "description": "The orientation against which to align the dropdown content\nhorizontally relative to `positionTarget`.\nOverridden from `Polymer.IronFitBehavior`.",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 8
            },
            "end": {
              "line": 136,
              "column": 54
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "vertical-align",
          "description": "The orientation against which to align the dropdown content\nvertically relative to `positionTarget`.\nOverridden from `Polymer.IronFitBehavior`.",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 8
            },
            "end": {
              "line": 143,
              "column": 54
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "dynamic-align",
          "description": "If true, it will use `horizontalAlign` and `verticalAlign` values as\npreferred alignment and if there's not enough space, it will pick the\nvalues which minimize the cropping.",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 116,
              "column": 6
            },
            "end": {
              "line": 116,
              "column": 35
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "horizontal-offset",
          "description": "A pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `horizontalAlign`.\n\nIf `horizontalAlign` is \"left\" or \"center\", this offset will increase or\ndecrease the distance to the left side of the screen: a negative offset\nwill move the dropdown to the left; a positive one, to the right.\n\nConversely if `horizontalAlign` is \"right\", this offset will increase\nor decrease the distance to the right side of the screen: a negative\noffset will move the dropdown to the right; a positive one, to the left.",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 132,
              "column": 6
            },
            "end": {
              "line": 132,
              "column": 62
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "vertical-offset",
          "description": "A pixel value that will be added to the position calculated for the\ngiven `verticalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `verticalAlign`.\n\nIf `verticalAlign` is \"top\" or \"middle\", this offset will increase or\ndecrease the distance to the top side of the screen: a negative offset\nwill move the dropdown upwards; a positive one, downwards.\n\nConversely if `verticalAlign` is \"bottom\", this offset will increase\nor decrease the distance to the bottom side of the screen: a negative\noffset will move the dropdown downwards; a positive one, upwards.",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 148,
              "column": 6
            },
            "end": {
              "line": 148,
              "column": 60
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "auto-fit-on-attach",
          "description": "Set to true to auto-fit on attach.",
          "sourceRange": {
            "file": "..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 153,
              "column": 6
            },
            "end": {
              "line": 153,
              "column": 52
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "opened",
          "description": "True if the overlay is currently displayed.",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 81
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "canceled",
          "description": "True if the overlay was canceled when it was last closed.",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 35,
              "column": 6
            },
            "end": {
              "line": 40,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "with-backdrop",
          "description": "Set to true to display a backdrop behind the overlay. It traps the focus\nwithin the light DOM of the overlay.",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 46,
              "column": 6
            },
            "end": {
              "line": 46,
              "column": 69
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "no-auto-focus",
          "description": "Overridden from `IronOverlayBehavior`.\nSet to true to disable auto-focusing the toast or child nodes with\nthe `autofocus` attribute` when the overlay is opened.",
          "sourceRange": {
            "start": {
              "line": 168,
              "column": 8
            },
            "end": {
              "line": 168,
              "column": 49
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "no-cancel-on-esc-key",
          "description": "Set to true to disable canceling the overlay with the ESC key.",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 57,
              "column": 6
            },
            "end": {
              "line": 57,
              "column": 53
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "no-cancel-on-outside-click",
          "description": "Overridden from `IronOverlayBehavior`.\nSet to false to enable closing of the toast by clicking outside it.",
          "sourceRange": {
            "start": {
              "line": 161,
              "column": 8
            },
            "end": {
              "line": 161,
              "column": 60
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "closing-reason",
          "description": "Contains the reason(s) this overlay was last closed (see\n`iron-overlay-closed`). `IronOverlayBehavior` provides the `canceled`\nreason; implementers of the behavior can provide other reasons in\naddition to `canceled`.",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 70,
              "column": 6
            },
            "end": {
              "line": 74,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "restore-focus-on-close",
          "description": "Set to true to enable restoring of focus when overlay is closed.",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 79,
              "column": 6
            },
            "end": {
              "line": 79,
              "column": 56
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "allow-click-through",
          "description": "Set to true to allow clicks to go through overlays.\nWhen the user clicks outside this overlay, the click may\nclose the overlay below.",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 86,
              "column": 6
            },
            "end": {
              "line": 86,
              "column": 40
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "always-on-top",
          "description": "Set to true to keep overlay always on top.",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 91,
              "column": 6
            },
            "end": {
              "line": 91,
              "column": 34
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "scroll-action",
          "description": "Determines which action to perform when scroll outside an opened overlay\nhappens. Possible values: lock - blocks scrolling from happening, refit -\ncomputes the new position on the overlay cancel - causes the overlay to\nclose",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior\\iron-overlay-behavior.html",
            "start": {
              "line": 99,
              "column": 6
            },
            "end": {
              "line": 99,
              "column": 34
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "duration",
          "description": "The duration in milliseconds to show the toast.\nSet to `0`, a negative number, or `Infinity`, to disable the\ntoast auto-closing.",
          "sourceRange": {
            "start": {
              "line": 150,
              "column": 8
            },
            "end": {
              "line": 150,
              "column": 45
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "text",
          "description": "The text to display in the toast.",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 8
            },
            "end": {
              "line": 155,
              "column": 39
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "horizontal-offset-changed",
          "description": "Fired when the `horizontalOffset` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "vertical-offset-changed",
          "description": "Fired when the `verticalOffset` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "opened-changed",
          "description": "Fired when the `opened` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "type": "CustomEvent",
          "name": "iron-overlay-canceled",
          "description": "iron-overlay-canceled",
          "metadata": {},
          "inheritedFrom": "Polymer.IronOverlayBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "iron-overlay-closed",
          "description": "iron-overlay-closed",
          "metadata": {},
          "inheritedFrom": "Polymer.IronOverlayBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "iron-overlay-opened",
          "description": "iron-overlay-opened",
          "metadata": {},
          "inheritedFrom": "Polymer.IronOverlayBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "'iron-announce'",
          "description": "'iron-announce'",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "components/paper-toast/paper-toast.html",
            "start": {
              "line": 109,
              "column": 4
            },
            "end": {
              "line": 109,
              "column": 17
            }
          }
        }
      ],
      "tagname": "paper-toast"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-component-page\\iron-component-page.html",
      "properties": [
        {
          "name": "descriptorUrl",
          "type": "string",
          "description": "URL of the Polymer Analyzer descriptor to fetch and display.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 10
            },
            "end": {
              "line": 151,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_descriptorUrlChanged\""
            }
          },
          "defaultValue": "\"analysis.json\""
        },
        {
          "name": "baseHref",
          "type": "string",
          "description": "By default all routing is performed using the URL fragment\n(e.g. `docs.html#/elements/my-element`).\n\nIf your server supports it and you would like to use the real URL\npath instead (e.g. `/api/docs/elements/my-element`), set this to\nthe base path where the page is mounted, omitting the trailing\nslash (e.g. `/api/docs` or *empty string* for the root path).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 162,
              "column": 10
            },
            "end": {
              "line": 162,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "rootNamespace",
          "type": "string",
          "description": "Instead of displaying items relative to the top level of\n`descriptor`, start from this namespace.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 168,
              "column": 10
            },
            "end": {
              "line": 168,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "demoSrcPrefix",
          "type": "string",
          "description": "URL prefix for demo iframes.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 173,
              "column": 10
            },
            "end": {
              "line": 173,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_loading",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 175,
              "column": 10
            },
            "end": {
              "line": 175,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_error",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 177,
              "column": 10
            },
            "end": {
              "line": 177,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_descriptor",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 10
            },
            "end": {
              "line": 182,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_descriptorChanged\""
            }
          }
        },
        {
          "name": "_path",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 10
            },
            "end": {
              "line": 184,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_narrow",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 186,
              "column": 10
            },
            "end": {
              "line": 186,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_title",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 10
            },
            "end": {
              "line": 191,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_titleChanged\""
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_onViewChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 8
            },
            "end": {
              "line": 196,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onNavSelect",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 8
            },
            "end": {
              "line": 206,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_descriptorUrlChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 208,
              "column": 8
            },
            "end": {
              "line": 210,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_descriptorChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 212,
              "column": 8
            },
            "end": {
              "line": 220,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descriptor"
            }
          ]
        },
        {
          "name": "_titleChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 222,
              "column": 8
            },
            "end": {
              "line": 224,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "title"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 140,
          "column": 14
        },
        "end": {
          "line": 225,
          "column": 7
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "descriptor-url",
          "description": "URL of the Polymer Analyzer descriptor to fetch and display.",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 10
            },
            "end": {
              "line": 151,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "base-href",
          "description": "By default all routing is performed using the URL fragment\n(e.g. `docs.html#/elements/my-element`).\n\nIf your server supports it and you would like to use the real URL\npath instead (e.g. `/api/docs/elements/my-element`), set this to\nthe base path where the page is mounted, omitting the trailing\nslash (e.g. `/api/docs` or *empty string* for the root path).",
          "sourceRange": {
            "start": {
              "line": 162,
              "column": 10
            },
            "end": {
              "line": 162,
              "column": 26
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "root-namespace",
          "description": "Instead of displaying items relative to the top level of\n`descriptor`, start from this namespace.",
          "sourceRange": {
            "start": {
              "line": 168,
              "column": 10
            },
            "end": {
              "line": 168,
              "column": 31
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "demo-src-prefix",
          "description": "URL prefix for demo iframes.",
          "sourceRange": {
            "start": {
              "line": 173,
              "column": 10
            },
            "end": {
              "line": 173,
              "column": 31
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-component-page"
    },
    {
      "description": "app-grid is a helper class useful for creating responsive, fluid grid layouts using custom properties.\nBecause custom properties can be defined inside a `@media` rule, you can customize the grid layout\nfor different responsive breakpoints.\n\nExample:\n\nImport `app-grid-style.html` and include `app-grid-style` in the style of an element's definition.\nThen, add the class `app-grid` to a container such as `ul` or `div`:\n\n```html\n<template>\n  <style include=\"app-grid-style\">\n    :host {\n      --app-grid-columns: 3;\n      --app-grid-item-height: 100px;\n    }\n\n    ul {\n      padding: 0;\n      list-style: none;\n    }\n\n    .item {\n      background-color: white;\n    }\n  </style>\n  <ul class=\"app-grid\">\n    <li class=\"item\">1</li>\n    <li class=\"item\">2</li>\n    <li class=\"item\">3</li>\n  </ul>\n</template>\n```\nIn the example above, the grid  will take 3 columns per row.\n\n### Expandible items\n\nIn many cases, it's useful to expand an item more than 1 column. To achieve this type of layout,\nyou can specify the number of columns the item should expand to by setting the custom property\n`--app-grid-expandible-item-columns`. To indicate which item should expand, apply the mixin\n`--app-grid-expandible-item` to a rule with a selector to the item. For example:\n\n<pre><code>\n&lt;template>\n  &lt;style include=\"app-grid-style\">\n    :host {\n      --app-grid-columns: 3;\n      --app-grid-item-height: 100px;\n      --app-grid-expandible-item-columns: 3;\n    }\n\n    /* Only the first item should expand */\n    .item:first-child {\n      &#64;apply --app-grid-expandible-item;\n    }\n  &lt;/style>\n&lt;/template>\n</code></pre>\n\n### Preserving the aspect ratio\n\nWhen the size of a grid item should preserve the aspect ratio, you can add the `has-aspect-ratio`\nattribute to the element with the class `.app-grid`. Now, every item element becomes a wrapper around\nthe item content. For example:\n\n```html\n<template>\n  <style include=\"app-grid-style\">\n    :host {\n      --app-grid-columns: 3;\n      /* 50% the width of the item is equivalent to 2:1 aspect ratio*/\n      --app-grid-item-height: 50%;\n    }\n\n    .item {\n      background-color: white;\n    }\n  </style>\n  <ul class=\"app-grid\" has-aspect-ratio>\n    <li class=\"item\">\n      <div>item 1</div>\n    </li>\n    <li class=\"item\">\n      <div>item 2</div>\n    </li>\n    <li class=\"item\">\n      <div>item 3</div>\n    </li>\n  </ul>\n</template>\n```\n\n### Styling\n\nCustom property                               | Description                                                | Default\n----------------------------------------------|------------------------------------------------------------|------------------\n`--app-grid-columns`                          | The number of columns per row.                             | 1\n`--app-grid-gutter`                           | The space between two items.                               | 0px\n`--app-grid-item-height`                      | The height of the items.                                   | auto\n`--app-grid-expandible-item-columns`          | The number of columns an expandible item should expand to. | 1",
      "summary": "",
      "path": "components\\app-layout\\app-grid\\app-grid-style.html",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": "demo"
        },
        {
          "url": "app-grid/demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 117,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "app-grid"
    },
    {
      "description": "app-box is a container element that can have scroll effects - visual effects based on\nscroll position. For example, the parallax effect can be used to move an image at a slower\nrate than the foreground.\n\n```html\n<app-box style=\"height: 100px;\" effects=\"parallax-background\">\n  <img slot=\"background\" src=\"picture.png\" style=\"width: 100%; height: 600px;\">\n</app-box>\n```\n\nNotice the `background` attribute in the `img` element; this attribute specifies that that\nimage is used as the background. By adding the background to the light dom, you can compose\nbackgrounds that can change dynamically. Alternatively, the mixin `--app-box-background-front-layer`\nallows to style the background. For example:\n\n```css\n  .parallaxAppBox {\n    --app-box-background-front-layer: {\n      background-image: url(picture.png);\n    };\n  }\n```\n\nFinally, app-box can have content inside. For example:\n\n```html\n<app-box effects=\"parallax-background\">\n  <h2>Sub title</h2>\n</app-box>\n```\n\n#### Importing the effects\n\nTo use the scroll effects, you must explicitly import them in addition to `app-box`:\n\n```html\n<link rel=\"import\" href=\"/bower_components/app-layout/app-scroll-effects/app-scroll-effects.html\">\n```\n\n#### List of effects\n\n**parallax-background**\nA simple parallax effect that vertically translates the backgrounds based on a fraction\nof the scroll position. For example:\n\n```css\napp-header {\n  --app-header-background-front-layer: {\n    background-image: url(...);\n  };\n}\n```\n```html\n<app-header style=\"height: 300px;\" effects=\"parallax-background\">\n  <app-toolbar>App name</app-toolbar>\n</app-header>\n```\n\nThe fraction determines how far the background moves relative to the scroll position.\nThis value can be assigned via the `scalar` config value and it is typically a value\nbetween 0 and 1 inclusive. If `scalar=0`, the background doesn't move away from the header.\n\n## Styling\n\nMixin | Description | Default\n----------------|-------------|----------\n`--app-box-background-front-layer` | Applies to the front layer of the background | {}",
      "summary": "",
      "path": "components\\app-layout\\app-box\\app-box.html",
      "properties": [
        {
          "name": "scrollTarget",
          "type": "HTMLElement",
          "description": "Specifies the element that will handle the scroll event\non the behalf of the current element. This is typically a reference to an\nelement, but there are a few more posibilities:\n\n### Elements id\n\n```html\n<div id=\"scrollable-element\" style=\"overflow: auto;\">\n <x-element scroll-target=\"scrollable-element\">\n   <!-- Content-->\n </x-element>\n</div>\n```\nIn this case, the `scrollTarget` will point to the outer div element.\n\n### Document scrolling\n\nFor document scrolling, you can use the reserved word `document`:\n\n```html\n<x-element scroll-target=\"document\">\n  <!-- Content -->\n</x-element>\n```\n\n### Elements reference\n\n```js\nappHeader.scrollTarget = document.querySelector('#scrollable-element');\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 63,
              "column": 6
            },
            "end": {
              "line": 68,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_shouldHaveListener",
          "type": "boolean",
          "description": "True if the event listener should be installed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 76,
              "column": 4
            },
            "end": {
              "line": 76,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "effects",
          "type": "string",
          "description": "A space-separated list of the effects names that will be triggered when the user scrolls.\ne.g. `waterfall parallax-background` installs the `waterfall` and `parallax-background`.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 112,
              "column": 6
            },
            "end": {
              "line": 114,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "effectsConfig",
          "type": "Object",
          "description": "An object that configurates the effects installed via the `effects` property. e.g.\n```js\n element.effectsConfig = {\n  \"blend-background\": {\n    \"startsAt\": 0.5\n  }\n};\n```\nEvery effect has at least two config properties: `startsAt` and `endsAt`.\nThese properties indicate when the event should start and end respectively\nand relative to the overall element progress. So for example, if `blend-background`\nstarts at `0.5`, the effect will only start once the current element reaches 0.5\nof its progress. In this context, the progress is a value in the range of `[0, 1]`\nthat indicates where this element is on the screen relative to the viewport.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 132,
              "column": 6
            },
            "end": {
              "line": 137,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "Disables CSS transitions and scroll effects on the element.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 142,
              "column": 6
            },
            "end": {
              "line": 146,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "threshold",
          "type": "number",
          "description": "Allows to set a `scrollTop` threshold. When greater than 0, `thresholdTriggered`\nis true only when the scroll target's `scrollTop` has reached this value.\n\nFor example, if `threshold = 100`, `thresholdTriggered` is true when the `scrollTop`\nis at least `100`.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 155,
              "column": 6
            },
            "end": {
              "line": 158,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "thresholdTriggered",
          "type": "boolean",
          "description": "True if the `scrollTop` threshold (set in `scrollTopThreshold`) has\nbeen reached.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 164,
              "column": 6
            },
            "end": {
              "line": 169,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "_effectsRunFn",
          "type": "Array.<Function>",
          "description": "List of effects handlers that will take place during scroll.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 213,
              "column": 4
            },
            "end": {
              "line": 213,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "_effects",
          "type": "Array.<Object>",
          "description": "List of the effects definitions installed via the `effects` property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 220,
              "column": 4
            },
            "end": {
              "line": 220,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "_parentResizable",
          "type": "Object",
          "description": "The closest ancestor element that implements `IronResizableBehavior`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_parentResizableChanged\""
            }
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyingDescendant",
          "type": "boolean",
          "description": "True if this element is currently notifying its descendant elements of\nresize.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_progress",
          "type": "number",
          "description": "The current scroll progress.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 6
            },
            "end": {
              "line": 151,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "_scrollTargetChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 78,
              "column": 4
            },
            "end": {
              "line": 103,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "scrollTarget"
            },
            {
              "name": "isAttached"
            }
          ],
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_scrollHandler",
          "description": "Overrides the `_scrollHandler`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 365,
              "column": 4
            },
            "end": {
              "line": 373,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "_defaultScrollTarget",
          "description": "The default scroll target. Consumers of this behavior may want to customize\nthe default scroll target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 119,
              "column": 4
            },
            "end": {
              "line": 121,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_doc",
          "description": "Shortcut for the document element",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 128,
              "column": 4
            },
            "end": {
              "line": 130,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_scrollTop",
          "description": "Sets the number of pixels that the content of an element is scrolled\nupward.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 166,
              "column": 4
            },
            "end": {
              "line": 172,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "top"
            }
          ],
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_scrollLeft",
          "description": "Sets the number of pixels that the content of an element is scrolled to the\nleft.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 180,
              "column": 4
            },
            "end": {
              "line": 186,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "left"
            }
          ],
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "scroll",
          "description": "Scrolls the content to a particular place.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 196,
              "column": 4
            },
            "end": {
              "line": 214,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "leftOrOptions",
              "type": "(number | !{left: number, top: number})",
              "description": "The left position or scroll options"
            },
            {
              "name": "top",
              "type": "number=",
              "description": "The top position"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_scrollTargetWidth",
          "description": "Gets the width of the scroll target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 221,
              "column": 4
            },
            "end": {
              "line": 227,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_scrollTargetHeight",
          "description": "Gets the height of the scroll target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 234,
              "column": 4
            },
            "end": {
              "line": 240,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_isValidScrollTarget",
          "description": "Returns true if the scroll target is a valid HTMLElement.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 247,
              "column": 4
            },
            "end": {
              "line": 249,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean"
          },
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_toggleScrollListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 251,
              "column": 4
            },
            "end": {
              "line": 264,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "yes"
            },
            {
              "name": "scrollTarget"
            }
          ],
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "toggleScrollListener",
          "description": "Enables or disables the scroll event listener.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 271,
              "column": 4
            },
            "end": {
              "line": 274,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "yes",
              "type": "boolean",
              "description": "True to add the event, False to remove it."
            }
          ],
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_updateScrollState",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 204,
              "column": 6
            },
            "end": {
              "line": 210,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "scrollTop"
            }
          ]
        },
        {
          "name": "isOnScreen",
          "description": "Returns true if this app-box is on the screen.\nThat is, visible in the current viewport.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 219,
              "column": 6
            },
            "end": {
              "line": 222,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean"
          }
        },
        {
          "name": "isContentBelow",
          "description": "Returns true if there's content below the current element. This method\nshould be overridden by the consumer of this behavior.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 204,
              "column": 4
            },
            "end": {
              "line": 206,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean"
          },
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "_clampedScrollTop",
          "description": "The clamped value of `_scrollTop`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 226,
              "column": 4
            },
            "end": {
              "line": 228,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 74,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "createEffect",
          "description": "Creates an effect object from an effect's name that can be used to run\neffects programmatically.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 255,
              "column": 4
            },
            "end": {
              "line": 263,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "effectName",
              "type": "string",
              "description": "The effect's name registered via `Polymer.AppLayout.registerEffect`."
            },
            {
              "name": "effectConfig",
              "type": "Object=",
              "description": "The effect config object. (Optional)"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "An effect object with the following functions:\n\n * `effect.setUp()`, Sets up the requirements for the effect.\n      This function is called automatically before the `effect` function returns.\n * `effect.run(progress, y)`, Runs the effect given a `progress`.\n * `effect.tearDown()`, Cleans up any DOM nodes or element references used by the effect.\n\nExample:\n```js\nvar parallax = element.createEffect('parallax-background');\n// runs the effect\nparallax.run(0.5, 0);\n```"
          },
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "_effectsChanged",
          "description": "Called when `effects` or `effectsConfig` changes.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 268,
              "column": 4
            },
            "end": {
              "line": 286,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "effects"
            },
            {
              "name": "effectsConfig"
            },
            {
              "name": "isAttached"
            }
          ],
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "_layoutIfDirty",
          "description": "Forces layout",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 291,
              "column": 4
            },
            "end": {
              "line": 293,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "_boundEffect",
          "description": "Returns an effect object bound to the current context.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 301,
              "column": 4
            },
            "end": {
              "line": 318,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "effectDef",
              "type": "Object"
            },
            {
              "name": "effectsConfig",
              "type": "Object=",
              "description": "The effect config object if the effect accepts config values. (Optional)"
            }
          ],
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "_setUpEffect",
          "description": "Sets up the effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 323,
              "column": 4
            },
            "end": {
              "line": 333,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "_tearDownEffects",
          "description": "Tears down the effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 338,
              "column": 4
            },
            "end": {
              "line": 346,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "_runEffects",
          "description": "Runs the effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 354,
              "column": 4
            },
            "end": {
              "line": 360,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "p",
              "type": "number",
              "description": "The progress"
            },
            {
              "name": "y",
              "type": "number",
              "description": "The top position of the current element relative to the viewport."
            }
          ],
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "_getDOMRef",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 228,
              "column": 6
            },
            "end": {
              "line": 235,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            }
          ]
        },
        {
          "name": "_getUndefinedMsg",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 385,
              "column": 4
            },
            "end": {
              "line": 388,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "effectName"
            }
          ],
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 153,
              "column": 6
            },
            "end": {
              "line": 155,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "notifyResize",
          "description": "Can be called to manually notify a resizable and its descendant\nresizables of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "assignParentResizable",
          "description": "Used to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 98,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "stopResizeNotificationsFor",
          "description": "Used to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "resizerShouldNotify",
          "description": "This method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 59
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "A candidate descendant element that\nimplements `IronResizableBehavior`."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the `element` should be notified of resize."
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onDescendantIronResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 126,
              "column": 4
            },
            "end": {
              "line": 138,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_fireResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 140,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onIronRequestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 147,
              "column": 4
            },
            "end": {
              "line": 162,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_parentResizableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 164,
              "column": 4
            },
            "end": {
              "line": 168,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyDescendant",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 170,
              "column": 4
            },
            "end": {
              "line": 181,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descendant"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_requestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 183,
              "column": 4
            },
            "end": {
              "line": 211,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_debounceRaf",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 6
            },
            "end": {
              "line": 166,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "fn"
            }
          ]
        },
        {
          "name": "resetLayout",
          "description": "Resets the layout. This method is automatically called when the element is attached to the DOM.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 173,
              "column": 6
            },
            "end": {
              "line": 191,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getElementTop",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 6
            },
            "end": {
              "line": 202,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_resizeHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 224,
              "column": 6
            },
            "end": {
              "line": 226,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "getScrollState",
          "description": "Returns an object containing the progress value of the scroll effects.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 243,
              "column": 6
            },
            "end": {
              "line": 245,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Object"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "app-box/demo/document-scroll.html",
          "description": "Document Scroll"
        },
        {
          "url": "app-box/demo/scrolling-region.html",
          "description": "Scrolling Region"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 134,
          "column": 12
        },
        "end": {
          "line": 246,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "scroll-target",
          "description": "Specifies the element that will handle the scroll event\non the behalf of the current element. This is typically a reference to an\nelement, but there are a few more posibilities:\n\n### Elements id\n\n```html\n<div id=\"scrollable-element\" style=\"overflow: auto;\">\n <x-element scroll-target=\"scrollable-element\">\n   <!-- Content-->\n </x-element>\n</div>\n```\nIn this case, the `scrollTarget` will point to the outer div element.\n\n### Document scrolling\n\nFor document scrolling, you can use the reserved word `document`:\n\n```html\n<x-element scroll-target=\"document\">\n  <!-- Content -->\n</x-element>\n```\n\n### Elements reference\n\n```js\nappHeader.scrollTarget = document.querySelector('#scrollable-element');\n```",
          "sourceRange": {
            "file": "..\\..\\iron-scroll-target-behavior\\iron-scroll-target-behavior.html",
            "start": {
              "line": 63,
              "column": 6
            },
            "end": {
              "line": 68,
              "column": 7
            }
          },
          "metadata": {},
          "type": "HTMLElement",
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "effects",
          "description": "A space-separated list of the effects names that will be triggered when the user scrolls.\ne.g. `waterfall parallax-background` installs the `waterfall` and `parallax-background`.",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 112,
              "column": 6
            },
            "end": {
              "line": 114,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "effects-config",
          "description": "An object that configurates the effects installed via the `effects` property. e.g.\n```js\n element.effectsConfig = {\n  \"blend-background\": {\n    \"startsAt\": 0.5\n  }\n};\n```\nEvery effect has at least two config properties: `startsAt` and `endsAt`.\nThese properties indicate when the event should start and end respectively\nand relative to the overall element progress. So for example, if `blend-background`\nstarts at `0.5`, the effect will only start once the current element reaches 0.5\nof its progress. In this context, the progress is a value in the range of `[0, 1]`\nthat indicates where this element is on the screen relative to the viewport.",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 132,
              "column": 6
            },
            "end": {
              "line": 137,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "disabled",
          "description": "Disables CSS transitions and scroll effects on the element.",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 142,
              "column": 6
            },
            "end": {
              "line": 146,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "threshold",
          "description": "Allows to set a `scrollTop` threshold. When greater than 0, `thresholdTriggered`\nis true only when the scroll target's `scrollTop` has reached this value.\n\nFor example, if `threshold = 100`, `thresholdTriggered` is true when the `scrollTop`\nis at least `100`.",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 155,
              "column": 6
            },
            "end": {
              "line": 158,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        },
        {
          "name": "threshold-triggered",
          "description": "True if the `scrollTop` threshold (set in `scrollTopThreshold`) has\nbeen reached.",
          "sourceRange": {
            "file": "..\\app-scroll-effects\\app-scroll-effects-behavior.html",
            "start": {
              "line": 164,
              "column": 6
            },
            "end": {
              "line": 169,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "threshold-triggered-changed",
          "description": "Fired when the `thresholdTriggered` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.AppScrollEffectsBehavior"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "background",
          "range": {
            "file": "components/app-layout/app-box/app-box.html",
            "start": {
              "line": 125,
              "column": 8
            },
            "end": {
              "line": 125,
              "column": 39
            }
          }
        },
        {
          "description": "",
          "name": "",
          "range": {
            "file": "components/app-layout/app-box/app-box.html",
            "start": {
              "line": 129,
              "column": 6
            },
            "end": {
              "line": 129,
              "column": 19
            }
          }
        }
      ],
      "tagname": "app-box"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\app-layout\\demo\\sample-content.html",
      "properties": [
        {
          "name": "size",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 21,
              "column": 8
            },
            "end": {
              "line": 24,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "label",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 8
            },
            "end": {
              "line": 28,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\""
        },
        {
          "name": "padding",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 8
            },
            "end": {
              "line": 32,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"16px\""
        },
        {
          "name": "margin",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 8
            },
            "end": {
              "line": 36,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"24px\""
        },
        {
          "name": "boxShadow",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 8
            },
            "end": {
              "line": 40,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2)\""
        },
        {
          "name": "_lorem_ipsum_strings",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 63,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 6
            },
            "end": {
              "line": 67,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_randomString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 6
            },
            "end": {
              "line": 77,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "size"
            }
          ]
        },
        {
          "name": "_randomLetter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 79,
              "column": 6
            },
            "end": {
              "line": 81,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_render",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 6
            },
            "end": {
              "line": 95,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "size"
            },
            {
              "name": "label"
            },
            {
              "name": "padding"
            },
            {
              "name": "margin"
            },
            {
              "name": "boxShadow"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 16,
          "column": 12
        },
        "end": {
          "line": 97,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "size",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 21,
              "column": 8
            },
            "end": {
              "line": 24,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "label",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 8
            },
            "end": {
              "line": 28,
              "column": 9
            }
          },
          "metadata": {}
        },
        {
          "name": "padding",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 8
            },
            "end": {
              "line": 32,
              "column": 9
            }
          },
          "metadata": {}
        },
        {
          "name": "margin",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 8
            },
            "end": {
              "line": 36,
              "column": 9
            }
          },
          "metadata": {}
        },
        {
          "name": "box-shadow",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 8
            },
            "end": {
              "line": 40,
              "column": 9
            }
          },
          "metadata": {}
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "sample-content"
    },
    {
      "description": "The `<test-fixture>` element can simplify the exercise of consistently\nresetting a test suite's DOM. To use it, wrap the test suite's DOM as a template:\n\n```html\n<test-fixture id=\"SomeElementFixture\">\n  <template>\n    <some-element id=\"SomeElementForTesting\"></some-element>\n  </template>\n</test-fixture>\n```\n\nNow, the `<test-fixture>` element can be used to generate a copy of its\ntemplate:\n\n```html\n<script>\ndescribe('<some-element>', function () {\n  var someElement;\n\n  beforeEach(function () {\n    document.getElementById('SomeElementFixture').create();\n    someElement = document.getElementById('SomeElementForTesting');\n  });\n});\n</script>\n```\n\nFixtured elements can be cleaned up by calling `restore` on the `<test-fixture>`:\n\n```javascript\n  afterEach(function () {\n    document.getElementById('SomeElementFixture').restore();\n    // <some-element id='SomeElementForTesting'> has been removed\n  });\n```\n\n`<test-fixture>` will create fixtures from all of its immediate `<template>`\nchildren. The DOM structure of fixture templates can be as simple or as complex\nas the situation calls for.\n\n## Even simpler usage in Mocha\n\nIn Mocha, usage can be simplified even further. Include `test-fixture-mocha.js`\nafter Mocha in the `<head>` of your document and then fixture elements like so:\n\n```html\n<script>\ndescribe('<some-element>', function () {\n  var someElement;\n\n  beforeEach(function () {\n    someElement = fixture('SomeElementFixture');\n  });\n});\n</script>\n```\n\nFixtured elements will be automatically restored in the `afterEach` phase of the\ncurrent Mocha `Suite`.\n\n## Data-bound templates\n\nData-binding systems are also supported, as long as your (custom) template\nelements define a `stamp(model)` method that returns a document fragment. This\nallows you to stamp out templates w/ custom models for your fixtures.\n\nFor example, using Polymer 0.8's `dom-template`:\n\n```html\n<test-fixture id=\"bound\">\n  <template is=\"dom-template\">\n    <span>{{greeting}}</span>\n  </template>\n</test-fixture>\n```\n\nYou can pass an optional context argument to `create()` or `fixture()` to pass\nthe model:\n\n```js\nvar bound = fixture('bound', {greeting: 'ohai thurr'});\n```\n\n## The problem being addressed\n\nConsider the following `web-component-tester` test suite:\n\n```html\n<!doctype html>\n<html>\n<head>\n  <title>some-element test suite</title>\n\n  <link rel=\"import\" href=\"../some-element.html\">\n</head>\n<body>\n  <some-element id=\"SomeElementForTesting\"></some-element>\n  <script>\ndescribe('<some-element>', function () {\n  var someElement;\n\n  beforeEach(function () {\n    someElement = document.getElementById('SomeElementForTesting');\n  });\n\n  it('can receive property `foo`', function () {\n    someElement.foo = 'bar';\n    expect(someElement.foo).to.be.equal('bar');\n  });\n\n  it('has a default `foo` value of `undefined`', function () {\n    expect(someElement.foo).to.be.equal(undefined);\n  });\n});\n  </script>\n</body>\n</html>\n```\n\nIn this contrived example, the suite will pass or fail depending on which order\nthe tests are run in. It is non-deterministic because `someElement` has\ninternal state that is not properly reset at the end of each test.\n\nIt would be trivial in the above example to simply reset `someElement.foo` to\nthe expected default value of `undefined` in an `afterEach` hook. However, for\nnon-contrived test suites that target complex elements, this can result in a\nlarge quantity of ever-growing set-up and tear-down boilerplate.",
      "summary": "",
      "path": "components\\test-fixture\\test-fixture.html",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 141,
          "column": 4
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "test-fixture"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\app-layout\\app-grid\\demo\\aspect-ratio.html",
      "properties": [],
      "methods": [
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 91,
              "column": 10
            },
            "end": {
              "line": 96,
              "column": 11
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 10
            },
            "end": {
              "line": 100,
              "column": 11
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 87,
          "column": 16
        },
        "end": {
          "line": 102,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "x-app"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\app-layout\\app-grid\\demo\\flickr-grid-layout.html",
      "properties": [
        {
          "name": "apiKey",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 168,
              "column": 12
            },
            "end": {
              "line": 171,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"c304f1096a06486d3c1e7ab271bf7f3f\""
        },
        {
          "name": "photos",
          "type": "Array",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 173,
              "column": 12
            },
            "end": {
              "line": 178,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]"
        },
        {
          "name": "perPage",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 180,
              "column": 12
            },
            "end": {
              "line": 183,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "36"
        },
        {
          "name": "page",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 185,
              "column": 12
            },
            "end": {
              "line": 188,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "userId",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 12
            },
            "end": {
              "line": 193,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"142203852@N04\""
        },
        {
          "name": "totalPages",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 195,
              "column": 12
            },
            "end": {
              "line": 198,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1"
        },
        {
          "name": "loadingPhotos",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 12
            },
            "end": {
              "line": 200,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 203,
              "column": 10
            },
            "end": {
              "line": 208,
              "column": 11
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 210,
              "column": 10
            },
            "end": {
              "line": 212,
              "column": 11
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getAPIEndpoint",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 214,
              "column": 10
            },
            "end": {
              "line": 222,
              "column": 11
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "apiKey"
            },
            {
              "name": "userId"
            },
            {
              "name": "page"
            }
          ]
        },
        {
          "name": "_didReceiveResponse",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 224,
              "column": 10
            },
            "end": {
              "line": 238,
              "column": 11
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_loadMorePhotos",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 240,
              "column": 10
            },
            "end": {
              "line": 251,
              "column": 11
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getItemStyle",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 253,
              "column": 10
            },
            "end": {
              "line": 256,
              "column": 11
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "photo"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 163,
          "column": 16
        },
        "end": {
          "line": 258,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "api-key",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 168,
              "column": 12
            },
            "end": {
              "line": 171,
              "column": 13
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "photos",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 173,
              "column": 12
            },
            "end": {
              "line": 178,
              "column": 13
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "per-page",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 180,
              "column": 12
            },
            "end": {
              "line": 183,
              "column": 13
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "page",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 185,
              "column": 12
            },
            "end": {
              "line": 188,
              "column": 13
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "user-id",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 12
            },
            "end": {
              "line": 193,
              "column": 13
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "total-pages",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 195,
              "column": 12
            },
            "end": {
              "line": 198,
              "column": 13
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "loading-photos",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 12
            },
            "end": {
              "line": 200,
              "column": 34
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "x-grid"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\app-layout\\app-grid\\demo\\md-grid-layout.html",
      "properties": [],
      "methods": [
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 138,
              "column": 10
            },
            "end": {
              "line": 143,
              "column": 11
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 145,
              "column": 10
            },
            "end": {
              "line": 147,
              "column": 11
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 135,
          "column": 16
        },
        "end": {
          "line": 148,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "x-grid"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\app-layout\\app-grid\\demo\\simple-responsive-grid.html",
      "properties": [],
      "methods": [
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 10
            },
            "end": {
              "line": 107,
              "column": 11
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 109,
              "column": 10
            },
            "end": {
              "line": 111,
              "column": 11
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 98,
          "column": 16
        },
        "end": {
          "line": 113,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "x-app"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\app-layout\\app-header-layout\\demo\\simple.html",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 77,
          "column": 16
        },
        "end": {
          "line": 79,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "simple-layout"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\app-layout\\demo\\demo4.html",
      "properties": [],
      "methods": [
        {
          "name": "iconForItem",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 180,
              "column": 8
            },
            "end": {
              "line": 182,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 177,
          "column": 14
        },
        "end": {
          "line": 183,
          "column": 7
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "x-demo"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\app-layout\\patterns\\transform-navigation\\x-app.html",
      "properties": [
        {
          "name": "selected",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 8
            },
            "end": {
              "line": 105,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"Item One\""
        },
        {
          "name": "wideLayout",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 8
            },
            "end": {
              "line": 111,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"onLayoutChange\""
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "items",
          "type": "Array",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 8
            },
            "end": {
              "line": 118,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[\"Item One\",\"Item Two\",\"Item Three\",\"Item Four\",\"Item Five\"]"
        }
      ],
      "methods": [
        {
          "name": "onLayoutChange",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 6
            },
            "end": {
              "line": 127,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "wide"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 96,
          "column": 12
        },
        "end": {
          "line": 128,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "selected",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 8
            },
            "end": {
              "line": 105,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "wide-layout",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 8
            },
            "end": {
              "line": 111,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "items",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 8
            },
            "end": {
              "line": 118,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Array"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "x-app"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\app-layout\\templates\\getting-started\\x-app.html",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 67,
          "column": 12
        },
        "end": {
          "line": 71,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "x-app"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\app-layout\\templates\\landing-page\\x-app.html",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 177,
          "column": 12
        },
        "end": {
          "line": 181,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "x-app"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\app-layout\\templates\\pesto\\src\\recipe-detail.html",
      "properties": [
        {
          "name": "recipe",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 6
            },
            "end": {
              "line": 196,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"__recipeChanged\""
            }
          }
        },
        {
          "name": "__favorite",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 6
            },
            "end": {
              "line": 201,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "__recipeChanged",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 4
            },
            "end": {
              "line": 209,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "recipe"
            }
          ]
        },
        {
          "name": "__toggleFavorite",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 211,
              "column": 4
            },
            "end": {
              "line": 213,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            },
            {
              "name": "detail"
            }
          ]
        },
        {
          "name": "__computeFavIcon",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 215,
              "column": 4
            },
            "end": {
              "line": 217,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "favorite"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 187,
          "column": 10
        },
        "end": {
          "line": 219,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "recipe",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 6
            },
            "end": {
              "line": 196,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "recipe-detail"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\app-layout\\templates\\pesto\\src\\recipe-list.html",
      "properties": [
        {
          "name": "recipes",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 183,
              "column": 6
            },
            "end": {
              "line": 183,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 178,
          "column": 10
        },
        "end": {
          "line": 186,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "recipes",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 183,
              "column": 6
            },
            "end": {
              "line": 183,
              "column": 21
            }
          },
          "metadata": {},
          "type": "Object"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "drawer-toggle",
          "range": {
            "file": "components/app-layout/templates/pesto/src/recipe-list.html",
            "start": {
              "line": 150,
              "column": 10
            },
            "end": {
              "line": 150,
              "column": 44
            }
          }
        }
      ],
      "tagname": "recipe-list"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\app-layout\\templates\\pesto\\src\\recipe-app.html",
      "properties": [
        {
          "name": "recipes",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 186,
              "column": 6
            },
            "end": {
              "line": 186,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_route",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 6
            },
            "end": {
              "line": 188,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_subRoute",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 6
            },
            "end": {
              "line": 190,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_pageData",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 192,
              "column": 6
            },
            "end": {
              "line": 195,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_pageDataChanged\""
            }
          }
        },
        {
          "name": "_selectedPage",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 197,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_idData",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 199,
              "column": 6
            },
            "end": {
              "line": 199,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_scrollPositionMap",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 6
            },
            "end": {
              "line": 206,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        }
      ],
      "methods": [
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 4
            },
            "end": {
              "line": 215,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getRecipe",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 217,
              "column": 4
            },
            "end": {
              "line": 227,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_drawerSelected",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 229,
              "column": 4
            },
            "end": {
              "line": 231,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_pageDataChanged",
          "description": "Preserves the document scroll position, so \nit can be restored when returning to a page.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 237,
              "column": 4
            },
            "end": {
              "line": 249,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pageData"
            },
            {
              "name": "oldPageData"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 180,
          "column": 10
        },
        "end": {
          "line": 251,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "recipes",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 186,
              "column": 6
            },
            "end": {
              "line": 186,
              "column": 21
            }
          },
          "metadata": {},
          "type": "Object"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "recipe-app"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\app-layout\\templates\\publishing\\src\\article-headline.html",
      "properties": [
        {
          "name": "article",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 64,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "href",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 8
            },
            "end": {
              "line": 66,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 58,
          "column": 12
        },
        "end": {
          "line": 70,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "article",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 64,
              "column": 23
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "href",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 8
            },
            "end": {
              "line": 66,
              "column": 20
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "article-headline"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\app-layout\\templates\\publishing\\src\\article-detail.html",
      "properties": [
        {
          "name": "article",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 8
            },
            "end": {
              "line": 110,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 104,
          "column": 12
        },
        "end": {
          "line": 114,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "article",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 8
            },
            "end": {
              "line": 110,
              "column": 23
            }
          },
          "metadata": {},
          "type": "Object"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "article-detail"
    },
    {
      "description": "This is a simple adaptive 2-columns grid. The first and every 4th item have width:100%, and the\nrest of the items have width equals to the column width (`columnWidth` in px). The grid will reflow\nto single column when 2 columns (plus a defined gutter margin) no longer fit on screen.\n\n    <two-columns-grid column-width=\"320\" gutter=\"16\">\n      <div class=\"card\"></div>\n      <div class=\"card\"></div>\n      <div class=\"card\"></div>\n      <div class=\"card\"></div>\n      <div class=\"card\"></div>\n    </two-columns-grid>",
      "summary": "",
      "path": "components\\app-layout\\templates\\publishing\\src\\two-columns-grid.html",
      "properties": [
        {
          "name": "columnWidth",
          "type": "number",
          "description": "The width of the column in px.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 92,
              "column": 8
            },
            "end": {
              "line": 95,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "300"
        },
        {
          "name": "gutter",
          "type": "number",
          "description": "The gutter width in px.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 100,
              "column": 8
            },
            "end": {
              "line": 103,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "8"
        },
        {
          "name": "narrowLayout",
          "type": "boolean",
          "description": "Indicates it is in narrow layout which means the grid is displayed as single column.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 8
            },
            "end": {
              "line": 112,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 6
            },
            "end": {
              "line": 124,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateLayout",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 6
            },
            "end": {
              "line": 129,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "columnWidth"
            },
            {
              "name": "gutter"
            }
          ]
        },
        {
          "name": "_updateCustomStyles",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 131,
              "column": 6
            },
            "end": {
              "line": 136,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 83,
          "column": 12
        },
        "end": {
          "line": 138,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "column-width",
          "description": "The width of the column in px.",
          "sourceRange": {
            "start": {
              "line": 92,
              "column": 8
            },
            "end": {
              "line": 95,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "gutter",
          "description": "The gutter width in px.",
          "sourceRange": {
            "start": {
              "line": 100,
              "column": 8
            },
            "end": {
              "line": 103,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "narrow-layout",
          "description": "Indicates it is in narrow layout which means the grid is displayed as single column.",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 8
            },
            "end": {
              "line": 112,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "narrow-layout-changed",
          "description": "Fired when the `narrowLayout` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "components/app-layout/templates/publishing/src/two-columns-grid.html",
            "start": {
              "line": 75,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 17
            }
          }
        }
      ],
      "tagname": "two-columns-grid"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\app-layout\\templates\\publishing\\src\\blog-app.html",
      "properties": [
        {
          "name": "articles",
          "type": "Object",
          "description": "Articles data.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 267,
              "column": 8
            },
            "end": {
              "line": 267,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "route",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 269,
              "column": 8
            },
            "end": {
              "line": 269,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "subRoute",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 271,
              "column": 8
            },
            "end": {
              "line": 271,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "subsubRoute",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 273,
              "column": 8
            },
            "end": {
              "line": 276,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_subsubrouteChanged\""
            }
          }
        },
        {
          "name": "categoryData",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 278,
              "column": 8
            },
            "end": {
              "line": 278,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "pageData",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 280,
              "column": 8
            },
            "end": {
              "line": 280,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "idData",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 282,
              "column": 8
            },
            "end": {
              "line": 282,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_scrollPositionMap",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 284,
              "column": 8
            },
            "end": {
              "line": 289,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        }
      ],
      "methods": [
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 297,
              "column": 6
            },
            "end": {
              "line": 303,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_equal",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 305,
              "column": 6
            },
            "end": {
              "line": 307,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value1"
            },
            {
              "name": "value2"
            }
          ]
        },
        {
          "name": "_updateArticle",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 309,
              "column": 6
            },
            "end": {
              "line": 323,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "articles"
            },
            {
              "name": "category"
            },
            {
              "name": "id"
            }
          ]
        },
        {
          "name": "_drawerSelected",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 325,
              "column": 6
            },
            "end": {
              "line": 327,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_shouldHideMenuButton",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 329,
              "column": 6
            },
            "end": {
              "line": 331,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "page"
            },
            {
              "name": "narrow"
            }
          ]
        },
        {
          "name": "_subsubrouteChanged",
          "description": "Preserves the document scroll position, so\nit can be restored when returning to a page.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 337,
              "column": 6
            },
            "end": {
              "line": 350,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "subroute"
            },
            {
              "name": "oldSubroute"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 258,
          "column": 12
        },
        "end": {
          "line": 352,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "articles",
          "description": "Articles data.",
          "sourceRange": {
            "start": {
              "line": 267,
              "column": 8
            },
            "end": {
              "line": 267,
              "column": 24
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "route",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 269,
              "column": 8
            },
            "end": {
              "line": 269,
              "column": 21
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "sub-route",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 271,
              "column": 8
            },
            "end": {
              "line": 271,
              "column": 24
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "subsub-route",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 273,
              "column": 8
            },
            "end": {
              "line": 276,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "category-data",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 278,
              "column": 8
            },
            "end": {
              "line": 278,
              "column": 28
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "page-data",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 280,
              "column": 8
            },
            "end": {
              "line": 280,
              "column": 24
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "id-data",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 282,
              "column": 8
            },
            "end": {
              "line": 282,
              "column": 22
            }
          },
          "metadata": {},
          "type": "Object"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "blog-app"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\app-layout\\templates\\shrine\\src\\shrine-item.html",
      "properties": [
        {
          "name": "item",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 6
            },
            "end": {
              "line": 127,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 119,
          "column": 10
        },
        "end": {
          "line": 131,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "item",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 6
            },
            "end": {
              "line": 127,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "shrine-item"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\app-layout\\templates\\shrine\\src\\shrine-featured-item.html",
      "properties": [
        {
          "name": "item",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 192,
              "column": 6
            },
            "end": {
              "line": 195,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_itemChanged\""
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_itemChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 199,
              "column": 4
            },
            "end": {
              "line": 203,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 186,
          "column": 10
        },
        "end": {
          "line": 205,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "item",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 192,
              "column": 6
            },
            "end": {
              "line": 195,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "shrine-featured-item"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\app-layout\\templates\\shrine\\src\\shrine-list.html",
      "properties": [
        {
          "name": "items",
          "type": "Array",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 105,
              "column": 6
            },
            "end": {
              "line": 107,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "featuredItem",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 109,
              "column": 6
            },
            "end": {
              "line": 111,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "section",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 6
            },
            "end": {
              "line": 115,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "_sortItems",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 4
            },
            "end": {
              "line": 120,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 99,
          "column": 10
        },
        "end": {
          "line": 122,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "items",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 105,
              "column": 6
            },
            "end": {
              "line": 107,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "featured-item",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 109,
              "column": 6
            },
            "end": {
              "line": 111,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "section",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 6
            },
            "end": {
              "line": 115,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "shrine-list"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\app-layout\\templates\\shrine\\src\\shrine-simple-item.html",
      "properties": [
        {
          "name": "item",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 71,
              "column": 6
            },
            "end": {
              "line": 73,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 65,
          "column": 10
        },
        "end": {
          "line": 77,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "item",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 71,
              "column": 6
            },
            "end": {
              "line": 73,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "shrine-simple-item"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\app-layout\\templates\\shrine\\src\\shrine-detail.html",
      "properties": [
        {
          "name": "item",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 272,
              "column": 6
            },
            "end": {
              "line": 275,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_itemChanged\""
            }
          }
        },
        {
          "name": "section",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 277,
              "column": 6
            },
            "end": {
              "line": 279,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "relatedItems",
          "type": "Array",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 281,
              "column": 6
            },
            "end": {
              "line": 283,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "_itemChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 287,
              "column": 4
            },
            "end": {
              "line": 290,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 266,
          "column": 10
        },
        "end": {
          "line": 292,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "item",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 272,
              "column": 6
            },
            "end": {
              "line": 275,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "section",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 277,
              "column": 6
            },
            "end": {
              "line": 279,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "related-items",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 281,
              "column": 6
            },
            "end": {
              "line": 283,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "shrine-detail"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\app-layout\\templates\\shrine\\src\\shrine-app.html",
      "properties": [
        {
          "name": "sections",
          "type": "Array",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 294,
              "column": 6
            },
            "end": {
              "line": 307,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[\"feature\",\"latest\",\"fashion\",\"furniture\",\"beauty\",\"food\",\"travel\"]"
        },
        {
          "name": "selectedTab",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 309,
              "column": 6
            },
            "end": {
              "line": 312,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "items",
          "type": "Array",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 314,
              "column": 6
            },
            "end": {
              "line": 316,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "featuredItems",
          "type": "Array",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 318,
              "column": 6
            },
            "end": {
              "line": 320,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "page",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 322,
              "column": 6
            },
            "end": {
              "line": 326,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "route",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 328,
              "column": 6
            },
            "end": {
              "line": 328,
              "column": 19
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "subRoute",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 330,
              "column": 6
            },
            "end": {
              "line": 330,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "sectionData",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 332,
              "column": 6
            },
            "end": {
              "line": 332,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "idData",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 334,
              "column": 6
            },
            "end": {
              "line": 334,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "onDetailPage",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 336,
              "column": 6
            },
            "end": {
              "line": 336,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 343,
              "column": 4
            },
            "end": {
              "line": 349,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_computeSelectedTab",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 351,
              "column": 4
            },
            "end": {
              "line": 353,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "sections"
            },
            {
              "name": "section"
            }
          ]
        },
        {
          "name": "_getItemsCopy",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 355,
              "column": 4
            },
            "end": {
              "line": 357,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items"
            }
          ]
        },
        {
          "name": "_getFeaturedItem",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 359,
              "column": 4
            },
            "end": {
              "line": 366,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "featuredItems"
            },
            {
              "name": "section"
            }
          ]
        },
        {
          "name": "_getDetailItem",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 368,
              "column": 4
            },
            "end": {
              "line": 372,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items"
            },
            {
              "name": "id"
            }
          ]
        },
        {
          "name": "_computePage",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 374,
              "column": 4
            },
            "end": {
              "line": 376,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "onDetailPage"
            }
          ]
        },
        {
          "name": "_hashDidChange",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 378,
              "column": 4
            },
            "end": {
              "line": 382,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_equal",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 384,
              "column": 4
            },
            "end": {
              "line": 386,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ]
        },
        {
          "name": "_getSectionClass",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 388,
              "column": 4
            },
            "end": {
              "line": 390,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "index"
            },
            {
              "name": "selectedTab"
            }
          ]
        },
        {
          "name": "_shouldShowTabs",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 392,
              "column": 4
            },
            "end": {
              "line": 394,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "onDetailPage"
            },
            {
              "name": "smallScreen"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 288,
          "column": 10
        },
        "end": {
          "line": 396,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "sections",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 294,
              "column": 6
            },
            "end": {
              "line": 307,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "selected-tab",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 309,
              "column": 6
            },
            "end": {
              "line": 312,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "items",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 314,
              "column": 6
            },
            "end": {
              "line": 316,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "featured-items",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 318,
              "column": 6
            },
            "end": {
              "line": 320,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "page",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 322,
              "column": 6
            },
            "end": {
              "line": 326,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "route",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 328,
              "column": 6
            },
            "end": {
              "line": 328,
              "column": 19
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "sub-route",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 330,
              "column": 6
            },
            "end": {
              "line": 330,
              "column": 22
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "section-data",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 332,
              "column": 6
            },
            "end": {
              "line": 332,
              "column": 25
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "id-data",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 334,
              "column": 6
            },
            "end": {
              "line": 334,
              "column": 20
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "on-detail-page",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 336,
              "column": 6
            },
            "end": {
              "line": 336,
              "column": 27
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "shrine-app"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\app-layout\\templates\\test-drive\\test-app.html",
      "properties": [
        {
          "name": "condenses",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 153,
              "column": 6
            },
            "end": {
              "line": 156,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "fixed",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 158,
              "column": 6
            },
            "end": {
              "line": 161,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "reveals",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 6
            },
            "end": {
              "line": 166,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "shadow",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 168,
              "column": 6
            },
            "end": {
              "line": 171,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "blendBackground",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 173,
              "column": 6
            },
            "end": {
              "line": 176,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "fadeBackground",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 178,
              "column": 6
            },
            "end": {
              "line": 181,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "parallaxBackground",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 183,
              "column": 6
            },
            "end": {
              "line": 186,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "resizeSnappedTitle",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 6
            },
            "end": {
              "line": 191,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "resizeTitle",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 6
            },
            "end": {
              "line": 196,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "waterfall",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 6
            },
            "end": {
              "line": 201,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        }
      ],
      "methods": [
        {
          "name": "_computeEffects",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 216,
              "column": 4
            },
            "end": {
              "line": 225,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_removeIf",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 227,
              "column": 4
            },
            "end": {
              "line": 231,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "propName"
            },
            {
              "name": "value"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 147,
          "column": 10
        },
        "end": {
          "line": 233,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "condenses",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 153,
              "column": 6
            },
            "end": {
              "line": 156,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "fixed",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 158,
              "column": 6
            },
            "end": {
              "line": 161,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "reveals",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 6
            },
            "end": {
              "line": 166,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "shadow",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 168,
              "column": 6
            },
            "end": {
              "line": 171,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "blend-background",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 173,
              "column": 6
            },
            "end": {
              "line": 176,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "fade-background",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 178,
              "column": 6
            },
            "end": {
              "line": 181,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "parallax-background",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 183,
              "column": 6
            },
            "end": {
              "line": 186,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "resize-snapped-title",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 6
            },
            "end": {
              "line": 191,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "resize-title",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 6
            },
            "end": {
              "line": 196,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "waterfall",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 6
            },
            "end": {
              "line": 201,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "test-app"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-a11y-announcer\\demo\\x-announces.html",
      "properties": [
        {
          "name": "hostAttributes",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 6
            },
            "end": {
              "line": 33,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "message",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 36,
              "column": 8
            },
            "end": {
              "line": 38,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 6
            },
            "end": {
              "line": 43,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onTapAnnounce",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 28,
          "column": 12
        },
        "end": {
          "line": 52,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "message",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 36,
              "column": 8
            },
            "end": {
              "line": 38,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "x-announces"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-a11y-keys\\iron-a11y-keys.html",
      "properties": [
        {
          "name": "keyEventTarget",
          "type": "?EventTarget",
          "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 277,
              "column": 6
            },
            "end": {
              "line": 282,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "stopKeyboardEventPropagation",
          "type": "boolean",
          "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 288,
              "column": 6
            },
            "end": {
              "line": 288,
              "column": 65
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_boundKeyHandlers",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 290,
              "column": 6
            },
            "end": {
              "line": 295,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_imperativeKeyBindings",
          "type": "Object",
          "description": "own properties of everything on the \"prototype\".",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 299,
              "column": 6
            },
            "end": {
              "line": 304,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "keyBindings",
          "type": "!Object",
          "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 315,
              "column": 4
            },
            "end": {
              "line": 315,
              "column": 19
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "target",
          "type": "?Node",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 6
            },
            "end": {
              "line": 140,
              "column": 56
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_targetChanged\""
            }
          }
        },
        {
          "name": "keys",
          "type": "string",
          "description": "Space delimited list of keys where each key follows the format:\n`[MODIFIER+]*KEY[:EVENT]`.\ne.g. `keys=\"space ctrl+shift+tab enter:keyup\"`.\nMore detail can be found in the \"Grammar\" section of the documentation",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 148,
              "column": 6
            },
            "end": {
              "line": 148,
              "column": 78
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_keysChanged\""
            }
          }
        }
      ],
      "methods": [
        {
          "name": "registered",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 317,
              "column": 4
            },
            "end": {
              "line": 319,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 4
            },
            "end": {
              "line": 155,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 325,
              "column": 4
            },
            "end": {
              "line": 327,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "addOwnKeyBinding",
          "description": "Can be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 337,
              "column": 4
            },
            "end": {
              "line": 341,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventString",
              "type": "string"
            },
            {
              "name": "handlerName",
              "type": "string"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "removeOwnKeyBindings",
          "description": "When called, will remove all imperatively-added key bindings.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 346,
              "column": 4
            },
            "end": {
              "line": 350,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "keyboardEventMatchesKeys",
          "description": "Returns true if a keyboard event matches `eventString`.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 359,
              "column": 4
            },
            "end": {
              "line": 367,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            },
            {
              "name": "eventString",
              "type": "string"
            }
          ],
          "return": {
            "type": "boolean"
          },
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_collectKeyBindings",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 369,
              "column": 4
            },
            "end": {
              "line": 379,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_prepKeyBindings",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 381,
              "column": 4
            },
            "end": {
              "line": 403,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_addKeyBinding",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 405,
              "column": 4
            },
            "end": {
              "line": 412,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventString"
            },
            {
              "name": "handlerName"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_resetKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 414,
              "column": 4
            },
            "end": {
              "line": 420,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_listenKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 422,
              "column": 4
            },
            "end": {
              "line": 435,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_unlistenKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 437,
              "column": 4
            },
            "end": {
              "line": 452,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_onKeyBindingEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 454,
              "column": 4
            },
            "end": {
              "line": 475,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "keyBindings"
            },
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_triggerKeyHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 477,
              "column": 4
            },
            "end": {
              "line": 486,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "keyCombo"
            },
            {
              "name": "handlerName"
            },
            {
              "name": "keyboardEvent"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_targetChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 4
            },
            "end": {
              "line": 159,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            }
          ]
        },
        {
          "name": "_keysChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 161,
              "column": 4
            },
            "end": {
              "line": 164,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_fireKeysPressed",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 166,
              "column": 4
            },
            "end": {
              "line": 168,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 133,
          "column": 10
        },
        "end": {
          "line": 169,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "key-event-target",
          "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 277,
              "column": 6
            },
            "end": {
              "line": 282,
              "column": 7
            }
          },
          "metadata": {},
          "type": "?EventTarget",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "stop-keyboard-event-propagation",
          "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 288,
              "column": 6
            },
            "end": {
              "line": 288,
              "column": 65
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "target",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 6
            },
            "end": {
              "line": 140,
              "column": 56
            }
          },
          "metadata": {},
          "type": "?Node"
        },
        {
          "name": "keys",
          "description": "Space delimited list of keys where each key follows the format:\n`[MODIFIER+]*KEY[:EVENT]`.\ne.g. `keys=\"space ctrl+shift+tab enter:keyup\"`.\nMore detail can be found in the \"Grammar\" section of the documentation",
          "sourceRange": {
            "start": {
              "line": 148,
              "column": 6
            },
            "end": {
              "line": 148,
              "column": 78
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-a11y-keys"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-a11y-keys\\demo\\x-key-aware.html",
      "properties": [
        {
          "name": "pressed",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 59,
              "column": 6
            },
            "end": {
              "line": 59,
              "column": 56
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "boundKeys",
          "type": "Array",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 61,
              "column": 6
            },
            "end": {
              "line": 61,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "target",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 6
            },
            "end": {
              "line": 68,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 71,
              "column": 4
            },
            "end": {
              "line": 73,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updatePressed",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 4
            },
            "end": {
              "line": 79,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 55,
          "column": 10
        },
        "end": {
          "line": 80,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "pressed",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 59,
              "column": 6
            },
            "end": {
              "line": 59,
              "column": 56
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "bound-keys",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 61,
              "column": 6
            },
            "end": {
              "line": 61,
              "column": 30
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "target",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 6
            },
            "end": {
              "line": 68,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "x-key-aware"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-a11y-keys-behavior\\demo\\x-key-aware.html",
      "properties": [
        {
          "name": "keyEventTarget",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 6
            },
            "end": {
              "line": 72,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "stopKeyboardEventPropagation",
          "type": "boolean",
          "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 288,
              "column": 6
            },
            "end": {
              "line": 288,
              "column": 65
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_boundKeyHandlers",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 290,
              "column": 6
            },
            "end": {
              "line": 295,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_imperativeKeyBindings",
          "type": "Object",
          "description": "own properties of everything on the \"prototype\".",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 299,
              "column": 6
            },
            "end": {
              "line": 304,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "keyBindings",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 4
            },
            "end": {
              "line": 81,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "pressed",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 6
            },
            "end": {
              "line": 56,
              "column": 56
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "boundKeys",
          "type": "Array",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 6
            },
            "end": {
              "line": 63,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "preventDefault",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 6
            },
            "end": {
              "line": 65,
              "column": 64
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "true"
        }
      ],
      "methods": [
        {
          "name": "registered",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 317,
              "column": 4
            },
            "end": {
              "line": 319,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 321,
              "column": 4
            },
            "end": {
              "line": 323,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 325,
              "column": 4
            },
            "end": {
              "line": 327,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "addOwnKeyBinding",
          "description": "Can be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 337,
              "column": 4
            },
            "end": {
              "line": 341,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventString",
              "type": "string"
            },
            {
              "name": "handlerName",
              "type": "string"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "removeOwnKeyBindings",
          "description": "When called, will remove all imperatively-added key bindings.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 346,
              "column": 4
            },
            "end": {
              "line": 350,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "keyboardEventMatchesKeys",
          "description": "Returns true if a keyboard event matches `eventString`.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 359,
              "column": 4
            },
            "end": {
              "line": 367,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            },
            {
              "name": "eventString",
              "type": "string"
            }
          ],
          "return": {
            "type": "boolean"
          },
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_collectKeyBindings",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 369,
              "column": 4
            },
            "end": {
              "line": 379,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_prepKeyBindings",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 381,
              "column": 4
            },
            "end": {
              "line": 403,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_addKeyBinding",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 405,
              "column": 4
            },
            "end": {
              "line": 412,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventString"
            },
            {
              "name": "handlerName"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_resetKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 414,
              "column": 4
            },
            "end": {
              "line": 420,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_listenKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 422,
              "column": 4
            },
            "end": {
              "line": 435,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_unlistenKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 437,
              "column": 4
            },
            "end": {
              "line": 452,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_onKeyBindingEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 454,
              "column": 4
            },
            "end": {
              "line": 475,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "keyBindings"
            },
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_triggerKeyHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 477,
              "column": 4
            },
            "end": {
              "line": 486,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "keyCombo"
            },
            {
              "name": "handlerName"
            },
            {
              "name": "keyboardEvent"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_updatePressed",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 4
            },
            "end": {
              "line": 90,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 50,
          "column": 10
        },
        "end": {
          "line": 91,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "key-event-target",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 6
            },
            "end": {
              "line": 72,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "stop-keyboard-event-propagation",
          "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 288,
              "column": 6
            },
            "end": {
              "line": 288,
              "column": 65
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "pressed",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 6
            },
            "end": {
              "line": 56,
              "column": 56
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "bound-keys",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 6
            },
            "end": {
              "line": 63,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "prevent-default",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 6
            },
            "end": {
              "line": 65,
              "column": 64
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "prevent-default-changed",
          "description": "Fired when the `preventDefault` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "x-key-aware"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-ajax\\demo\\index.html",
      "properties": [],
      "methods": [
        {
          "name": "url",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 10
            },
            "end": {
              "line": 78,
              "column": 11
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "videoId"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 73,
          "column": 16
        },
        "end": {
          "line": 79,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-ajax-demo"
    },
    {
      "description": "`iron-autogrow-textarea` is an element containing a textarea that grows in height as more\nlines of input are entered. Unless an explicit height or the `maxRows` property is set, it will\nnever scroll.\n\nExample:\n\n    <iron-autogrow-textarea></iron-autogrow-textarea>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-autogrow-textarea` | Mixin applied to the textarea | `{}`\n`--iron-autogrow-textarea-placeholder` | Mixin applied to the textarea placeholder | `{}`",
      "summary": "",
      "path": "components\\iron-autogrow-textarea\\iron-autogrow-textarea.html",
      "properties": [
        {
          "name": "validator",
          "type": "string",
          "description": "Name of the validator to use.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 49,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "invalid",
          "type": "boolean",
          "description": "True if the last call to `validate` is invalid.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 56,
              "column": 6
            },
            "end": {
              "line": 62,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_invalidChanged\""
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "focused",
          "type": "boolean",
          "description": "If true, the element currently has focus.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 25,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "If true, the user cannot interact with this element.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_disabledChanged\""
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_oldTabIndex",
          "type": "(?string | undefined)",
          "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 49,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_boundFocusBlurHandler",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 53,
              "column": 6
            },
            "end": {
              "line": 58,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "__handleEventRetargeting",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 60,
              "column": 6
            },
            "end": {
              "line": 65,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "value",
          "type": "(string | number)",
          "description": "Use this property instead of `bind-value` for two-way data binding.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 6
            },
            "end": {
              "line": 139,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_valueChanged\""
            }
          }
        },
        {
          "name": "bindValue",
          "type": "(string | number)",
          "description": "This property is deprecated, and just mirrors `value`. Use `value` instead.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 145,
              "column": 6
            },
            "end": {
              "line": 149,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_bindValueChanged\""
            }
          }
        },
        {
          "name": "rows",
          "type": "number",
          "description": "The initial number of rows.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 158,
              "column": 6
            },
            "end": {
              "line": 162,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateCached\""
            }
          },
          "defaultValue": "1"
        },
        {
          "name": "maxRows",
          "type": "number",
          "description": "The maximum number of rows this element can grow to until it\nscrolls. 0 means no maximum.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 172,
              "column": 6
            },
            "end": {
              "line": 176,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateCached\""
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "autocomplete",
          "type": "string",
          "description": "Bound to the textarea's `autocomplete` attribute.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 181,
              "column": 6
            },
            "end": {
              "line": 184,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"off\""
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "description": "Bound to the textarea's `autofocus` attribute.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 189,
              "column": 6
            },
            "end": {
              "line": 192,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "inputmode",
          "type": "string",
          "description": "Bound to the textarea's `inputmode` attribute.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 199,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "placeholder",
          "type": "string",
          "description": "Bound to the textarea's `placeholder` attribute.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 204,
              "column": 6
            },
            "end": {
              "line": 206,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "readonly",
          "type": "string",
          "description": "Bound to the textarea's `readonly` attribute.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 211,
              "column": 6
            },
            "end": {
              "line": 213,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "required",
          "type": "boolean",
          "description": "Set to true to mark the textarea as required.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 218,
              "column": 6
            },
            "end": {
              "line": 220,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "minlength",
          "type": "number",
          "description": "The minimum length of the input value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 225,
              "column": 6
            },
            "end": {
              "line": 227,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "maxlength",
          "type": "number",
          "description": "The maximum length of the input value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 232,
              "column": 6
            },
            "end": {
              "line": 234,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "label",
          "type": "string",
          "description": "Bound to the textarea's `aria-label` attribute.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 239,
              "column": 6
            },
            "end": {
              "line": 241,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "textarea",
          "type": "Function",
          "description": "Returns the underlying textarea.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 253,
              "column": 4
            },
            "end": {
              "line": 255,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        },
        {
          "name": "selectionStart",
          "type": "Function",
          "description": "Returns textarea's selection start.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 261,
              "column": 4
            },
            "end": {
              "line": 263,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "selectionEnd",
          "type": "Function",
          "description": "Returns textarea's selection end.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 269,
              "column": 4
            },
            "end": {
              "line": 271,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "registered",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 65,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "_invalidChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "_validator",
          "description": "Recompute this every time it's needed, because we don't know if the\nunderlying IronValidatableBehaviorMeta has changed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 82,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "hasValidator",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "True if the validator `validator` exists."
          },
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "validate",
          "description": "Returns true if `value` is valid. The validator provided in `validator`\nwill be used first, if it exists; otherwise, the `textarea`'s validity\nis used.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 305,
              "column": 4
            },
            "end": {
              "line": 322,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "True if the value is valid."
          }
        },
        {
          "name": "_getValidity",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 122,
              "column": 4
            },
            "end": {
              "line": 127,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 75,
              "column": 4
            },
            "end": {
              "line": 78,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_focusBlurHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_disabledChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 125,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "disabled"
            },
            {
              "name": "old"
            }
          ],
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_changedControlState",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 287,
              "column": 4
            },
            "end": {
              "line": 297,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_bindValueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 324,
              "column": 4
            },
            "end": {
              "line": 326,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "bindValue"
            }
          ]
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 328,
              "column": 4
            },
            "end": {
              "line": 347,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_onInput",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 349,
              "column": 4
            },
            "end": {
              "line": 352,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "_constrain",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 354,
              "column": 4
            },
            "end": {
              "line": 368,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "tokens"
            }
          ]
        },
        {
          "name": "_valueForMirror",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 370,
              "column": 4
            },
            "end": {
              "line": 377,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateCached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 379,
              "column": 4
            },
            "end": {
              "line": 381,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 121,
          "column": 10
        },
        "end": {
          "line": 382,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "validator",
          "description": "Name of the validator to use.",
          "sourceRange": {
            "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 49,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "invalid",
          "description": "True if the last call to `validate` is invalid.",
          "sourceRange": {
            "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 56,
              "column": 6
            },
            "end": {
              "line": 62,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "focused",
          "description": "If true, the element currently has focus.",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 25,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "disabled",
          "description": "If true, the user cannot interact with this element.",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "value",
          "description": "Use this property instead of `bind-value` for two-way data binding.",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 6
            },
            "end": {
              "line": 139,
              "column": 7
            }
          },
          "metadata": {},
          "type": "(string | number)"
        },
        {
          "name": "bind-value",
          "description": "This property is deprecated, and just mirrors `value`. Use `value` instead.",
          "sourceRange": {
            "start": {
              "line": 145,
              "column": 6
            },
            "end": {
              "line": 149,
              "column": 7
            }
          },
          "metadata": {},
          "type": "(string | number)"
        },
        {
          "name": "rows",
          "description": "The initial number of rows.",
          "sourceRange": {
            "start": {
              "line": 158,
              "column": 6
            },
            "end": {
              "line": 162,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "max-rows",
          "description": "The maximum number of rows this element can grow to until it\nscrolls. 0 means no maximum.",
          "sourceRange": {
            "start": {
              "line": 172,
              "column": 6
            },
            "end": {
              "line": 176,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "autocomplete",
          "description": "Bound to the textarea's `autocomplete` attribute.",
          "sourceRange": {
            "start": {
              "line": 181,
              "column": 6
            },
            "end": {
              "line": 184,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "autofocus",
          "description": "Bound to the textarea's `autofocus` attribute.",
          "sourceRange": {
            "start": {
              "line": 189,
              "column": 6
            },
            "end": {
              "line": 192,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "inputmode",
          "description": "Bound to the textarea's `inputmode` attribute.",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 199,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "placeholder",
          "description": "Bound to the textarea's `placeholder` attribute.",
          "sourceRange": {
            "start": {
              "line": 204,
              "column": 6
            },
            "end": {
              "line": 206,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "readonly",
          "description": "Bound to the textarea's `readonly` attribute.",
          "sourceRange": {
            "start": {
              "line": 211,
              "column": 6
            },
            "end": {
              "line": 213,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "required",
          "description": "Set to true to mark the textarea as required.",
          "sourceRange": {
            "start": {
              "line": 218,
              "column": 6
            },
            "end": {
              "line": 220,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "minlength",
          "description": "The minimum length of the input value.",
          "sourceRange": {
            "start": {
              "line": 225,
              "column": 6
            },
            "end": {
              "line": 227,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "maxlength",
          "description": "The maximum length of the input value.",
          "sourceRange": {
            "start": {
              "line": 232,
              "column": 6
            },
            "end": {
              "line": 234,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "label",
          "description": "Bound to the textarea's `aria-label` attribute.",
          "sourceRange": {
            "start": {
              "line": 239,
              "column": 6
            },
            "end": {
              "line": 241,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "invalid-changed",
          "description": "Fired when the `invalid` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "focused-changed",
          "description": "Fired when the `focused` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "type": "CustomEvent",
          "name": "disabled-changed",
          "description": "Fired when the `disabled` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "bind-value-changed",
          "description": "Fired when the `bindValue` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-autogrow-textarea"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-behaviors\\demo\\simple-button.html",
      "properties": [
        {
          "name": "focused",
          "type": "boolean",
          "description": "If true, the element currently has focus.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-control-state.html",
            "start": {
              "line": 25,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "If true, the user cannot interact with this element.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-control-state.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_disabledChanged\""
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_oldTabIndex",
          "type": "(?string | undefined)",
          "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-control-state.html",
            "start": {
              "line": 49,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_boundFocusBlurHandler",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-control-state.html",
            "start": {
              "line": 53,
              "column": 6
            },
            "end": {
              "line": 58,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "__handleEventRetargeting",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-control-state.html",
            "start": {
              "line": 60,
              "column": 6
            },
            "end": {
              "line": 65,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "keyEventTarget",
          "type": "?EventTarget",
          "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 277,
              "column": 6
            },
            "end": {
              "line": 282,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "stopKeyboardEventPropagation",
          "type": "boolean",
          "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 288,
              "column": 6
            },
            "end": {
              "line": 288,
              "column": 65
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_boundKeyHandlers",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 290,
              "column": 6
            },
            "end": {
              "line": 295,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_imperativeKeyBindings",
          "type": "Object",
          "description": "own properties of everything on the \"prototype\".",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 299,
              "column": 6
            },
            "end": {
              "line": 304,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "keyBindings",
          "type": "!Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 100,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "pressed",
          "type": "boolean",
          "description": "If true, the user is currently holding down the button.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 27,
              "column": 6
            },
            "end": {
              "line": 33,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_pressedChanged\"",
              "readOnly": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "toggles",
          "type": "boolean",
          "description": "If true, the button toggles the active state with each tap or press\nof the spacebar.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 39,
              "column": 6
            },
            "end": {
              "line": 43,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "active",
          "type": "boolean",
          "description": "If true, the button is a toggle and is currently in the active state.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 53,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "pointerDown",
          "type": "boolean",
          "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 60,
              "column": 6
            },
            "end": {
              "line": 64,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "receivedFocusFromKeyboard",
          "type": "boolean",
          "description": "True if the input device that caused the element to receive focus\nwas a keyboard.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 70,
              "column": 6
            },
            "end": {
              "line": 73,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "ariaActiveAttribute",
          "type": "string",
          "description": "The aria attribute to be set if the button is a toggle and in the\nactive state.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 79,
              "column": 6
            },
            "end": {
              "line": 83,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_ariaActiveAttributeChanged\""
            }
          },
          "defaultValue": "\"aria-pressed\"",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_mouseEventRe",
          "type": "object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 106,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "hostAttributes",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 6
            },
            "end": {
              "line": 68,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-control-state.html",
            "start": {
              "line": 75,
              "column": 4
            },
            "end": {
              "line": 78,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_focusBlurHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-control-state.html",
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_disabledChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-control-state.html",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 125,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "disabled"
            },
            {
              "name": "old"
            }
          ],
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_changedControlState",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-control-state.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "registered",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 317,
              "column": 4
            },
            "end": {
              "line": 319,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 321,
              "column": 4
            },
            "end": {
              "line": 323,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 325,
              "column": 4
            },
            "end": {
              "line": 327,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "addOwnKeyBinding",
          "description": "Can be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 337,
              "column": 4
            },
            "end": {
              "line": 341,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventString",
              "type": "string"
            },
            {
              "name": "handlerName",
              "type": "string"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "removeOwnKeyBindings",
          "description": "When called, will remove all imperatively-added key bindings.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 346,
              "column": 4
            },
            "end": {
              "line": 350,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "keyboardEventMatchesKeys",
          "description": "Returns true if a keyboard event matches `eventString`.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 359,
              "column": 4
            },
            "end": {
              "line": 367,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            },
            {
              "name": "eventString",
              "type": "string"
            }
          ],
          "return": {
            "type": "boolean"
          },
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_collectKeyBindings",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 369,
              "column": 4
            },
            "end": {
              "line": 379,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_prepKeyBindings",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 381,
              "column": 4
            },
            "end": {
              "line": 403,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_addKeyBinding",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 405,
              "column": 4
            },
            "end": {
              "line": 412,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventString"
            },
            {
              "name": "handlerName"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_resetKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 414,
              "column": 4
            },
            "end": {
              "line": 420,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_listenKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 422,
              "column": 4
            },
            "end": {
              "line": 435,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_unlistenKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 437,
              "column": 4
            },
            "end": {
              "line": 452,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_onKeyBindingEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 454,
              "column": 4
            },
            "end": {
              "line": 475,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "keyBindings"
            },
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_triggerKeyHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 477,
              "column": 4
            },
            "end": {
              "line": 486,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "keyCombo"
            },
            {
              "name": "handlerName"
            },
            {
              "name": "keyboardEvent"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_tapHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 108,
              "column": 4
            },
            "end": {
              "line": 115,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_focusChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 117,
              "column": 4
            },
            "end": {
              "line": 123,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "focused"
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_detectKeyboardFocus",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 125,
              "column": 4
            },
            "end": {
              "line": 127,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "focused"
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_userActivate",
          "description": "'change' events",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 131,
              "column": 4
            },
            "end": {
              "line": 136,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "active"
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_downHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 138,
              "column": 4
            },
            "end": {
              "line": 142,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_upHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 144,
              "column": 4
            },
            "end": {
              "line": 147,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_spaceKeyDownHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 152,
              "column": 4
            },
            "end": {
              "line": 164,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "!KeyboardEvent",
              "description": "."
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_spaceKeyUpHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 169,
              "column": 4
            },
            "end": {
              "line": 182,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "!KeyboardEvent",
              "description": "."
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_asyncClick",
          "description": "event handler to unwind before triggering another event",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 186,
              "column": 4
            },
            "end": {
              "line": 190,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_pressedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 194,
              "column": 4
            },
            "end": {
              "line": 196,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pressed"
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_ariaActiveAttributeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 198,
              "column": 4
            },
            "end": {
              "line": 202,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_activeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 204,
              "column": 4
            },
            "end": {
              "line": 212,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "active"
            },
            {
              "name": "ariaActiveAttribute"
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_controlStateChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 214,
              "column": 4
            },
            "end": {
              "line": 220,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_changedButtonState",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 224,
              "column": 4
            },
            "end": {
              "line": 228,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronButtonState"
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 57,
          "column": 12
        },
        "end": {
          "line": 69,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "focused",
          "description": "If true, the element currently has focus.",
          "sourceRange": {
            "file": "..\\iron-control-state.html",
            "start": {
              "line": 25,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "disabled",
          "description": "If true, the user cannot interact with this element.",
          "sourceRange": {
            "file": "..\\iron-control-state.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "key-event-target",
          "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 277,
              "column": 6
            },
            "end": {
              "line": 282,
              "column": 7
            }
          },
          "metadata": {},
          "type": "?EventTarget",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "stop-keyboard-event-propagation",
          "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 288,
              "column": 6
            },
            "end": {
              "line": 288,
              "column": 65
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "pressed",
          "description": "If true, the user is currently holding down the button.",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 27,
              "column": 6
            },
            "end": {
              "line": 33,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "toggles",
          "description": "If true, the button toggles the active state with each tap or press\nof the spacebar.",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 39,
              "column": 6
            },
            "end": {
              "line": 43,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "active",
          "description": "If true, the button is a toggle and is currently in the active state.",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 53,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "pointer-down",
          "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 60,
              "column": 6
            },
            "end": {
              "line": 64,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "received-focus-from-keyboard",
          "description": "True if the input device that caused the element to receive focus\nwas a keyboard.",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 70,
              "column": 6
            },
            "end": {
              "line": 73,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "aria-active-attribute",
          "description": "The aria attribute to be set if the button is a toggle and in the\nactive state.",
          "sourceRange": {
            "file": "..\\iron-button-state.html",
            "start": {
              "line": 79,
              "column": 6
            },
            "end": {
              "line": 83,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronButtonState"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "focused-changed",
          "description": "Fired when the `focused` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "type": "CustomEvent",
          "name": "disabled-changed",
          "description": "Fired when the `disabled` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "type": "CustomEvent",
          "name": "active-changed",
          "description": "Fired when the `active` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronButtonState"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "components/iron-behaviors/demo/simple-button.html",
            "start": {
              "line": 51,
              "column": 4
            },
            "end": {
              "line": 51,
              "column": 17
            }
          }
        }
      ],
      "tagname": "simple-button"
    },
    {
      "description": "`<iron-input>` is a wrapper to a native `<input>` element, that adds two-way binding\nand prevention of invalid input. To use it, you must distribute a native `<input>`\nyourself. You can continue to use the native `input` as you would normally:\n\n    <iron-input>\n      <input>\n    </iron-input>\n\n    <iron-input>\n      <input type=\"email\" disabled>\n    </iron-input>\n\n### Two-way binding\n\nBy default you can only get notified of changes to a native `<input>`'s `value`\ndue to user input:\n\n    <input value=\"{{myValue::input}}\">\n\nThis means that if you imperatively set the value (i.e. `someNativeInput.value = 'foo'`),\nno events will be fired and this change cannot be observed.\n\n`iron-input` adds the `bind-value` property that mirrors the native `input`'s '`value` property; this\nproperty can be used for two-way data binding.\n`bind-value` will notify if it is changed either by user input or by script.\n\n    <iron-input bind-value=\"{{myValue}}\">\n      <input>\n    </iron-input>\n\nNote: this means that if you want to imperatively set the native `input`'s, you _must_\nset `bind-value` instead, so that the wrapper `iron-input` can be notified.\n\n### Validation\n\n`iron-input` uses the native `input`'s validation. For simplicity, `iron-input`\nhas a `validate()` method (which internally just checks the distributed `input`'s\nvalidity), which sets an `invalid` attribute that can also be used for styling.\n\nTo validate automatically as you type, you can use the `auto-validate` attribute.\n\n`iron-input` also fires an `iron-input-validate` event after `validate()` is\ncalled. You can use it to implement a custom validator:\n\n    var CatsOnlyValidator = {\n      validate: function(ironInput) {\n        var valid = !ironInput.bindValue || ironInput.bindValue === 'cat';\n        ironInput.invalid = !valid;\n        return valid;\n      }\n    }\n    ironInput.addEventListener('iron-input-validate', function() {\n      CatsOnly.validate(input2);\n    });\n\nYou can also use an element implementing an [`IronValidatorBehavior`](/element/PolymerElements/iron-validatable-behavior).\nThis example can also be found in the demo for this element:\n\n    <iron-input validator=\"cats-only\">\n      <input>\n    </iron-input>\n\n### Preventing invalid input\n\nIt may be desirable to only allow users to enter certain characters. You can use the\n`allowed-pattern` attribute to accomplish this. This feature\nis separate from validation, and `allowed-pattern` does not affect how the input is validated.\n\n    // Only allow typing digits, but a valid input has exactly 5 digits.\n    <iron-input allowed-pattern=\"[0-9]\">\n      <input pattern=\"\\d{5}\">\n    </iron-input>",
      "summary": "",
      "path": "components\\iron-input\\iron-input.html",
      "properties": [
        {
          "name": "validator",
          "type": "string",
          "description": "Name of the validator to use.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 49,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "invalid",
          "type": "boolean",
          "description": "True if the last call to `validate` is invalid.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 56,
              "column": 6
            },
            "end": {
              "line": 62,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_invalidChanged\""
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "bindValue",
          "type": "string",
          "description": "Use this property instead of `value` for two-way data binding, or to\nset a default value for the input. **Do not** use the distributed\ninput's `value` property to set a default value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 8
            },
            "end": {
              "line": 124,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "value",
          "type": "string",
          "description": "Computed property that echoes `bindValue` (mostly used for Polymer 1.0\nbackcompatibility, if you were one-way binding to the Polymer 1.0\n`input is=\"iron-input\"` value attribute).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 131,
              "column": 8
            },
            "end": {
              "line": 134,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "allowedPattern",
          "type": "string",
          "description": "Regex-like list of characters allowed as input; all characters not in the list\nwill be rejected. The recommended format should be a list of allowed characters,\nfor example, `[a-zA-Z0-9.+-!;:]`.\n\nThis pattern represents the allowed characters for the field; as the user inputs text,\neach individual character will be checked against the pattern (rather than checking\nthe entire value as a whole). If a character is not a match, it will be rejected.\n\nPasted input will have each character checked individually; if any character\ndoesn't match `allowedPattern`, the entire pasted string will be rejected.\n\nNote: if you were using `iron-input` in 1.0, you were also required to\nset `prevent-invalid-input`. This is no longer needed as of Polymer 2.0,\nand will be set automatically for you if an `allowedPattern` is provided.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 153,
              "column": 8
            },
            "end": {
              "line": 155,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "autoValidate",
          "type": "boolean",
          "description": "Set to true to auto-validate the input value as you type.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 160,
              "column": 8
            },
            "end": {
              "line": 163,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_inputElement",
          "type": "Object",
          "description": "The native input element.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 168,
              "column": 8
            },
            "end": {
              "line": 168,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "inputElement",
          "type": "Function",
          "description": "Returns the distributed input element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 203,
              "column": 6
            },
            "end": {
              "line": 205,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        },
        {
          "name": "_patternRegExp",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 217,
              "column": 6
            },
            "end": {
              "line": 229,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        }
      ],
      "methods": [
        {
          "name": "registered",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 65,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "_invalidChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "_validator",
          "description": "Recompute this every time it's needed, because we don't know if the\nunderlying IronValidatableBehaviorMeta has changed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 82,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "hasValidator",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "True if the validator `validator` exists."
          },
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "validate",
          "description": "Returns true if `value` is valid. The validator provided in `validator` will be used first,\nthen any constraints.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 343,
              "column": 6
            },
            "end": {
              "line": 365,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "True if the value is valid."
          }
        },
        {
          "name": "_getValidity",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 122,
              "column": 4
            },
            "end": {
              "line": 127,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 180,
              "column": 6
            },
            "end": {
              "line": 184,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 186,
              "column": 6
            },
            "end": {
              "line": 191,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 6
            },
            "end": {
              "line": 198,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_initSlottedInput",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 207,
              "column": 6
            },
            "end": {
              "line": 215,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_bindValueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 234,
              "column": 6
            },
            "end": {
              "line": 253,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "bindValue"
            },
            {
              "name": "inputElement"
            }
          ]
        },
        {
          "name": "_onInput",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 255,
              "column": 6
            },
            "end": {
              "line": 267,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_isPrintable",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 269,
              "column": 6
            },
            "end": {
              "line": 299,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "_onKeypress",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 301,
              "column": 6
            },
            "end": {
              "line": 323,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "_checkPatternValidity",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 325,
              "column": 6
            },
            "end": {
              "line": 336,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_announceInvalidCharacter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 367,
              "column": 6
            },
            "end": {
              "line": 369,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "message"
            }
          ]
        },
        {
          "name": "_computeValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 371,
              "column": 6
            },
            "end": {
              "line": 373,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "bindValue"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 102,
          "column": 12
        },
        "end": {
          "line": 374,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "validator",
          "description": "Name of the validator to use.",
          "sourceRange": {
            "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 49,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "invalid",
          "description": "True if the last call to `validate` is invalid.",
          "sourceRange": {
            "file": "..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 56,
              "column": 6
            },
            "end": {
              "line": 62,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "bind-value",
          "description": "Use this property instead of `value` for two-way data binding, or to\nset a default value for the input. **Do not** use the distributed\ninput's `value` property to set a default value.",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 8
            },
            "end": {
              "line": 124,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "value",
          "description": "Computed property that echoes `bindValue` (mostly used for Polymer 1.0\nbackcompatibility, if you were one-way binding to the Polymer 1.0\n`input is=\"iron-input\"` value attribute).",
          "sourceRange": {
            "start": {
              "line": 131,
              "column": 8
            },
            "end": {
              "line": 134,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "allowed-pattern",
          "description": "Regex-like list of characters allowed as input; all characters not in the list\nwill be rejected. The recommended format should be a list of allowed characters,\nfor example, `[a-zA-Z0-9.+-!;:]`.\n\nThis pattern represents the allowed characters for the field; as the user inputs text,\neach individual character will be checked against the pattern (rather than checking\nthe entire value as a whole). If a character is not a match, it will be rejected.\n\nPasted input will have each character checked individually; if any character\ndoesn't match `allowedPattern`, the entire pasted string will be rejected.\n\nNote: if you were using `iron-input` in 1.0, you were also required to\nset `prevent-invalid-input`. This is no longer needed as of Polymer 2.0,\nand will be set automatically for you if an `allowedPattern` is provided.",
          "sourceRange": {
            "start": {
              "line": 153,
              "column": 8
            },
            "end": {
              "line": 155,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "auto-validate",
          "description": "Set to true to auto-validate the input value as you type.",
          "sourceRange": {
            "start": {
              "line": 160,
              "column": 8
            },
            "end": {
              "line": 163,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "invalid-changed",
          "description": "Fired when the `invalid` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "iron-input-validate",
          "description": "iron-input-validate",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "components/iron-input/iron-input.html",
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 99,
              "column": 30
            }
          }
        }
      ],
      "tagname": "iron-input"
    },
    {
      "description": "`<paper-input-char-counter>` is a character counter for use with `<paper-input-container>`. It\nshows the number of characters entered in the input and the max length if it is specified.\n\n    <paper-input-container>\n      <input maxlength=\"20\">\n      <paper-input-char-counter></paper-input-char-counter>\n    </paper-input-container>\n\n### Styling\n\nThe following mixin is available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-char-counter` | Mixin applied to the element | `{}`",
      "summary": "",
      "path": "components\\paper-input\\paper-input-char-counter.html",
      "properties": [
        {
          "name": "_charCounterStr",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 6
            },
            "end": {
              "line": 68,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"0\""
        }
      ],
      "methods": [
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-input-addon-behavior.html",
            "start": {
              "line": 21,
              "column": 4
            },
            "end": {
              "line": 25,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PaperInputAddonBehavior"
        },
        {
          "name": "update",
          "description": "This overrides the update function in PaperInputAddonBehavior.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 82,
              "column": 4
            },
            "end": {
              "line": 96,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "state",
              "type": "{inputElement: (Element | undefined), value: (string | undefined), invalid: boolean}",
              "description": "    inputElement: The input element.\n    value: The input value.\n    invalid: True if the input value is invalid."
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 57,
          "column": 10
        },
        "end": {
          "line": 97,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "paper-input-char-counter"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\paper-input\\paper-input-container.html",
      "properties": [
        {
          "name": "noLabelFloat",
          "type": "boolean",
          "description": "Set to true to disable the floating label. The label disappears when the input value is\nnot null.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 395,
              "column": 6
            },
            "end": {
              "line": 398,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "alwaysFloatLabel",
          "type": "boolean",
          "description": "Set to true to always float the floating label.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 403,
              "column": 6
            },
            "end": {
              "line": 406,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "attrForValue",
          "type": "string",
          "description": "The attribute to listen for value changes on.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 411,
              "column": 6
            },
            "end": {
              "line": 414,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"bind-value\""
        },
        {
          "name": "autoValidate",
          "type": "boolean",
          "description": "Set to true to auto-validate the input value when it changes.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 419,
              "column": 6
            },
            "end": {
              "line": 422,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "invalid",
          "type": "boolean",
          "description": "True if the input is invalid. This property is set automatically when the input value\nchanges if auto-validating, or when the `iron-input-validate` event is heard from a child.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 428,
              "column": 6
            },
            "end": {
              "line": 432,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_invalidChanged\""
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "focused",
          "type": "boolean",
          "description": "True if the input has focus.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 437,
              "column": 6
            },
            "end": {
              "line": 442,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_addons",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 444,
              "column": 6
            },
            "end": {
              "line": 449,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_inputHasContent",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 451,
              "column": 6
            },
            "end": {
              "line": 454,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_inputSelector",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 456,
              "column": 6
            },
            "end": {
              "line": 459,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"input,iron-input,textarea,.paper-input-input\""
        },
        {
          "name": "_boundOnFocus",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 461,
              "column": 6
            },
            "end": {
              "line": 466,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_boundOnBlur",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 468,
              "column": 6
            },
            "end": {
              "line": 473,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_boundOnInput",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 475,
              "column": 6
            },
            "end": {
              "line": 480,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_boundValueChanged",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 482,
              "column": 6
            },
            "end": {
              "line": 487,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_valueChangedEvent",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 495,
              "column": 4
            },
            "end": {
              "line": 497,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        },
        {
          "name": "_propertyForValue",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 499,
              "column": 4
            },
            "end": {
              "line": 501,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        },
        {
          "name": "_inputElement",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 503,
              "column": 4
            },
            "end": {
              "line": 505,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        },
        {
          "name": "_inputElementValue",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 507,
              "column": 4
            },
            "end": {
              "line": 509,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 511,
              "column": 4
            },
            "end": {
              "line": 523,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 525,
              "column": 4
            },
            "end": {
              "line": 538,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onAddonAttached",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 541,
              "column": 4
            },
            "end": {
              "line": 552,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "_onFocus",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 555,
              "column": 4
            },
            "end": {
              "line": 557,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onBlur",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 560,
              "column": 4
            },
            "end": {
              "line": 563,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onInput",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 566,
              "column": 4
            },
            "end": {
              "line": 568,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "_onValueChanged",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 571,
              "column": 4
            },
            "end": {
              "line": 586,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "_handleValue",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 589,
              "column": 4
            },
            "end": {
              "line": 604,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inputElement"
            }
          ]
        },
        {
          "name": "_handleValueAndAutoValidate",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 607,
              "column": 4
            },
            "end": {
              "line": 621,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inputElement"
            }
          ]
        },
        {
          "name": "_onIronInputValidate",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 624,
              "column": 4
            },
            "end": {
              "line": 626,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "_invalidChanged",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 629,
              "column": 4
            },
            "end": {
              "line": 633,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "updateAddons",
          "description": "Call this to update the state of add-ons.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 639,
              "column": 4
            },
            "end": {
              "line": 643,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "state",
              "type": "Object",
              "description": "Add-on state."
            }
          ]
        },
        {
          "name": "_computeInputContentClass",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 646,
              "column": 4
            },
            "end": {
              "line": 683,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "noLabelFloat"
            },
            {
              "name": "alwaysFloatLabel"
            },
            {
              "name": "focused"
            },
            {
              "name": "invalid"
            },
            {
              "name": "_inputHasContent"
            }
          ]
        },
        {
          "name": "_computeUnderlineClass",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 686,
              "column": 4
            },
            "end": {
              "line": 694,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "focused"
            },
            {
              "name": "invalid"
            }
          ]
        },
        {
          "name": "_computeAddOnContentClass",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 697,
              "column": 4
            },
            "end": {
              "line": 705,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "focused"
            },
            {
              "name": "invalid"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 387,
          "column": 10
        },
        "end": {
          "line": 706,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "no-label-float",
          "description": "Set to true to disable the floating label. The label disappears when the input value is\nnot null.",
          "sourceRange": {
            "start": {
              "line": 395,
              "column": 6
            },
            "end": {
              "line": 398,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "always-float-label",
          "description": "Set to true to always float the floating label.",
          "sourceRange": {
            "start": {
              "line": 403,
              "column": 6
            },
            "end": {
              "line": 406,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "attr-for-value",
          "description": "The attribute to listen for value changes on.",
          "sourceRange": {
            "start": {
              "line": 411,
              "column": 6
            },
            "end": {
              "line": 414,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "auto-validate",
          "description": "Set to true to auto-validate the input value when it changes.",
          "sourceRange": {
            "start": {
              "line": 419,
              "column": 6
            },
            "end": {
              "line": 422,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "invalid",
          "description": "True if the input is invalid. This property is set automatically when the input value\nchanges if auto-validating, or when the `iron-input-validate` event is heard from a child.",
          "sourceRange": {
            "start": {
              "line": 428,
              "column": 6
            },
            "end": {
              "line": 432,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "focused",
          "description": "True if the input has focus.",
          "sourceRange": {
            "start": {
              "line": 437,
              "column": 6
            },
            "end": {
              "line": 442,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "focused-changed",
          "description": "Fired when the `focused` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "prefix",
          "range": {
            "file": "components/paper-input/paper-input-container.html",
            "start": {
              "line": 365,
              "column": 27
            },
            "end": {
              "line": 365,
              "column": 54
            }
          }
        },
        {
          "description": "",
          "name": "label",
          "range": {
            "file": "components/paper-input/paper-input-container.html",
            "start": {
              "line": 368,
              "column": 8
            },
            "end": {
              "line": 368,
              "column": 34
            }
          }
        },
        {
          "description": "",
          "name": "input",
          "range": {
            "file": "components/paper-input/paper-input-container.html",
            "start": {
              "line": 369,
              "column": 8
            },
            "end": {
              "line": 369,
              "column": 34
            }
          }
        },
        {
          "description": "",
          "name": "suffix",
          "range": {
            "file": "components/paper-input/paper-input-container.html",
            "start": {
              "line": 372,
              "column": 27
            },
            "end": {
              "line": 372,
              "column": 54
            }
          }
        },
        {
          "description": "",
          "name": "add-on",
          "range": {
            "file": "components/paper-input/paper-input-container.html",
            "start": {
              "line": 381,
              "column": 6
            },
            "end": {
              "line": 381,
              "column": 33
            }
          }
        }
      ],
      "tagname": "paper-input-container"
    },
    {
      "description": "`<paper-input-error>` is an error message for use with `<paper-input-container>`. The error is\ndisplayed when the `<paper-input-container>` is `invalid`.\n\n    <paper-input-container>\n      <input pattern=\"[0-9]*\">\n      <paper-input-error slot=\"add-on\">Only numbers are allowed!</paper-input-error>\n    </paper-input-container>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-container-invalid-color` | The foreground color of the error | `--error-color`\n`--paper-input-error`                   | Mixin applied to the error        | `{}`",
      "summary": "",
      "path": "components\\paper-input\\paper-input-error.html",
      "properties": [
        {
          "name": "invalid",
          "type": "boolean",
          "description": "True if the error is showing.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 71,
              "column": 6
            },
            "end": {
              "line": 75,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-input-addon-behavior.html",
            "start": {
              "line": 21,
              "column": 4
            },
            "end": {
              "line": 25,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PaperInputAddonBehavior"
        },
        {
          "name": "update",
          "description": "This overrides the update function in PaperInputAddonBehavior.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 4
            },
            "end": {
              "line": 91,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "state",
              "type": "{inputElement: (Element | undefined), value: (string | undefined), invalid: boolean}",
              "description": "    inputElement: The input element.\n    value: The input value.\n    invalid: True if the input value is invalid."
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 60,
          "column": 10
        },
        "end": {
          "line": 92,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "invalid",
          "description": "True if the error is showing.",
          "sourceRange": {
            "start": {
              "line": 71,
              "column": 6
            },
            "end": {
              "line": 75,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "components/paper-input/paper-input-error.html",
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 55,
              "column": 17
            }
          }
        }
      ],
      "tagname": "paper-input-error"
    },
    {
      "description": "Material design: [Text fields](https://www.google.com/design/spec/components/text-fields.html)\n\n`<paper-input>` is a single-line text field with Material Design styling.\n\n    <paper-input label=\"Input label\"></paper-input>\n\nIt may include an optional error message or character counter.\n\n    <paper-input error-message=\"Invalid input!\" label=\"Input label\"></paper-input>\n    <paper-input char-counter label=\"Input label\"></paper-input>\n\nIt can also include custom prefix or suffix elements, which are displayed\nbefore or after the text input itself. In order for an element to be\nconsidered as a prefix, it must have the `prefix` attribute (and similarly\nfor `suffix`).\n\n    <paper-input label=\"total\">\n      <div prefix>$</div>\n      <paper-icon-button slot=\"suffix\" icon=\"clear\"></paper-icon-button>\n    </paper-input>\n\nA `paper-input` can use the native `type=search` or `type=file` features.\nHowever, since we can't control the native styling of the input (search icon,\nfile button, date placeholder, etc.), in these cases the label will be\nautomatically floated. The `placeholder` attribute can still be used for\nadditional informational text.\n\n    <paper-input label=\"search!\" type=\"search\"\n        placeholder=\"search for cats\" autosave=\"test\" results=\"5\">\n    </paper-input>\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Focus\n\nTo focus a paper-input, you can call the native `focus()` method as long as the\npaper input has a tab index. Similarly, `blur()` will blur the element.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-container-ms-clear` | Mixin applied to the Internet Explorer reveal button (the eyeball) | {}",
      "summary": "",
      "path": "components\\paper-input\\paper-input.html",
      "properties": [
        {
          "name": "focused",
          "type": "boolean",
          "description": "If true, the element currently has focus.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 25,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "Set to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `<paper-input-container>`'s and the input's `disabled` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 68,
              "column": 6
            },
            "end": {
              "line": 71,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_oldTabIndex",
          "type": "(?string | undefined)",
          "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 49,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_boundFocusBlurHandler",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 53,
              "column": 6
            },
            "end": {
              "line": 58,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "__handleEventRetargeting",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 60,
              "column": 6
            },
            "end": {
              "line": 65,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "keyEventTarget",
          "type": "?EventTarget",
          "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 277,
              "column": 6
            },
            "end": {
              "line": 282,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "stopKeyboardEventPropagation",
          "type": "boolean",
          "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 288,
              "column": 6
            },
            "end": {
              "line": 288,
              "column": 65
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_boundKeyHandlers",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 290,
              "column": 6
            },
            "end": {
              "line": 295,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_imperativeKeyBindings",
          "type": "Object",
          "description": "own properties of everything on the \"prototype\".",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 299,
              "column": 6
            },
            "end": {
              "line": 304,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "keyBindings",
          "type": "!Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 382,
              "column": 4
            },
            "end": {
              "line": 384,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "label",
          "type": "string",
          "description": "The label for this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\n`<label>`'s content and `hidden` property, e.g.\n`<label hidden$=\"[[!label]]\">[[label]]</label>` in your `template`",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 50,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "value",
          "type": "(string | number | null | undefined)",
          "description": "The value for this element.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "invalid",
          "type": "boolean",
          "description": "Returns true if the value is invalid. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to both the\n`<paper-input-container>`'s and the input's `invalid` property.\n\nIf `autoValidate` is true, the `invalid` attribute is managed automatically,\nwhich can clobber attempts to manage it manually.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 81,
              "column": 6
            },
            "end": {
              "line": 85,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "allowedPattern",
          "type": "string",
          "description": "Set this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `allowedPattern`\nproperty.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 93,
              "column": 6
            },
            "end": {
              "line": 95,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "type",
          "type": "string",
          "description": "The type of the input. The supported types are the\n[native input's types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_<input>_types).\nIf you're using PaperInputBehavior to implement your own paper-input-like element,\nbind this to the (Polymer 1) `<input is=\"iron-input\">`'s or (Polymer 2)\n`<iron-input>`'s `type` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 104,
              "column": 6
            },
            "end": {
              "line": 106,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "list",
          "type": "string",
          "description": "The datalist of the input (if any). This should match the id of an existing `<datalist>`.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `list` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 113,
              "column": 6
            },
            "end": {
              "line": 115,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "pattern",
          "type": "string",
          "description": "A pattern to validate the `input` with. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `pattern` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 122,
              "column": 6
            },
            "end": {
              "line": 124,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "required",
          "type": "boolean",
          "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 61,
              "column": 6
            },
            "end": {
              "line": 64,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "errorMessage",
          "type": "string",
          "description": "The error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `<paper-input-error>`'s content, if using.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 141,
              "column": 6
            },
            "end": {
              "line": 143,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "charCounter",
          "type": "boolean",
          "description": "Set to true to show a character counter.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 148,
              "column": 6
            },
            "end": {
              "line": 151,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "noLabelFloat",
          "type": "boolean",
          "description": "Set to true to disable the floating label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<paper-input-container>`'s `noLabelFloat` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 158,
              "column": 6
            },
            "end": {
              "line": 161,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "alwaysFloatLabel",
          "type": "boolean",
          "description": "Set to true to always float the label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<paper-input-container>`'s `alwaysFloatLabel` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 168,
              "column": 6
            },
            "end": {
              "line": 171,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "autoValidate",
          "type": "boolean",
          "description": "Set to true to auto-validate the input value. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<paper-input-container>`'s `autoValidate` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 178,
              "column": 6
            },
            "end": {
              "line": 181,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "validator",
          "type": "string",
          "description": "Name of the validator to use. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `validator` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 188,
              "column": 6
            },
            "end": {
              "line": 190,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "autocomplete",
          "type": "string",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocomplete` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 198,
              "column": 6
            },
            "end": {
              "line": 201,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"off\"",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autofocus` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 207,
              "column": 6
            },
            "end": {
              "line": 210,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_autofocusChanged\""
            }
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "inputmode",
          "type": "string",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `inputmode` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 216,
              "column": 6
            },
            "end": {
              "line": 218,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "minlength",
          "type": "number",
          "description": "The minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `minlength` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 225,
              "column": 6
            },
            "end": {
              "line": 227,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "maxlength",
          "type": "number",
          "description": "The maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `maxlength` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 234,
              "column": 6
            },
            "end": {
              "line": 236,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "min",
          "type": "string",
          "description": "The minimum (numeric or date-time) input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `min` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 243,
              "column": 6
            },
            "end": {
              "line": 245,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "max",
          "type": "string",
          "description": "The maximum (numeric or date-time) input value.\nCan be a String (e.g. `\"2000-01-01\"`) or a Number (e.g. `2`).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `max` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 253,
              "column": 6
            },
            "end": {
              "line": 255,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "step",
          "type": "string",
          "description": "Limits the numeric or date-time increments.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `step` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 262,
              "column": 6
            },
            "end": {
              "line": 264,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "name",
          "type": "string",
          "description": "The name of this element.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 40,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "placeholder",
          "type": "string",
          "description": "A placeholder string in addition to the label. If this is set, the label will always float.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 277,
              "column": 6
            },
            "end": {
              "line": 281,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "readonly",
          "type": "boolean",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `readonly` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 287,
              "column": 6
            },
            "end": {
              "line": 290,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "size",
          "type": "number",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `size` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 296,
              "column": 6
            },
            "end": {
              "line": 298,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "autocapitalize",
          "type": "string",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocapitalize` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 306,
              "column": 6
            },
            "end": {
              "line": 309,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"none\"",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "autocorrect",
          "type": "string",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocorrect` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 315,
              "column": 6
            },
            "end": {
              "line": 318,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"off\"",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "autosave",
          "type": "string",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autosave` property,\nused with type=search.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 325,
              "column": 6
            },
            "end": {
              "line": 327,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "results",
          "type": "number",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `results` property,\nused with type=search.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 334,
              "column": 6
            },
            "end": {
              "line": 336,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "accept",
          "type": "string",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `accept` property,\nused with type=file.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 343,
              "column": 6
            },
            "end": {
              "line": 345,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "multiple",
          "type": "boolean",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the`<input is=\"iron-input\">`'s `multiple` property,\nused with type=file.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 352,
              "column": 6
            },
            "end": {
              "line": 354,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_ariaDescribedBy",
          "type": "string",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 357,
              "column": 6
            },
            "end": {
              "line": 360,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_ariaLabelledBy",
          "type": "string",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 363,
              "column": 6
            },
            "end": {
              "line": 366,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_inputId",
          "type": "string",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 369,
              "column": 6
            },
            "end": {
              "line": 372,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "hostAttributes",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 387,
              "column": 4
            },
            "end": {
              "line": 389,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_parentForm",
          "type": "Object",
          "description": "The form that the element is registered to.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 69,
              "column": 6
            },
            "end": {
              "line": 71,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "_focusableElement",
          "type": "Function",
          "description": "Returns a reference to the focusable element. Overridden from PaperInputBehavior\nto correctly focus the native input.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 302,
              "column": 4
            },
            "end": {
              "line": 304,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 75,
              "column": 4
            },
            "end": {
              "line": 78,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_focusBlurHandler",
          "description": "Forward focus to inputElement. Overriden from IronControlState.",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 468,
              "column": 4
            },
            "end": {
              "line": 475,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_disabledChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 125,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "disabled"
            },
            {
              "name": "old"
            }
          ],
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_changedControlState",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "registered",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 317,
              "column": 4
            },
            "end": {
              "line": 319,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 74,
              "column": 4
            },
            "end": {
              "line": 80,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 82,
              "column": 4
            },
            "end": {
              "line": 86,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "addOwnKeyBinding",
          "description": "Can be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 337,
              "column": 4
            },
            "end": {
              "line": 341,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventString",
              "type": "string"
            },
            {
              "name": "handlerName",
              "type": "string"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "removeOwnKeyBindings",
          "description": "When called, will remove all imperatively-added key bindings.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 346,
              "column": 4
            },
            "end": {
              "line": 350,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "keyboardEventMatchesKeys",
          "description": "Returns true if a keyboard event matches `eventString`.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 359,
              "column": 4
            },
            "end": {
              "line": 367,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            },
            {
              "name": "eventString",
              "type": "string"
            }
          ],
          "return": {
            "type": "boolean"
          },
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_collectKeyBindings",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 369,
              "column": 4
            },
            "end": {
              "line": 379,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_prepKeyBindings",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 381,
              "column": 4
            },
            "end": {
              "line": 403,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_addKeyBinding",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 405,
              "column": 4
            },
            "end": {
              "line": 412,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventString"
            },
            {
              "name": "handlerName"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_resetKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 414,
              "column": 4
            },
            "end": {
              "line": 420,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_listenKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 422,
              "column": 4
            },
            "end": {
              "line": 435,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_unlistenKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 437,
              "column": 4
            },
            "end": {
              "line": 452,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_onKeyBindingEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 454,
              "column": 4
            },
            "end": {
              "line": 475,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "keyBindings"
            },
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_triggerKeyHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 477,
              "column": 4
            },
            "end": {
              "line": 486,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "keyCombo"
            },
            {
              "name": "handlerName"
            },
            {
              "name": "keyboardEvent"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "inputElement",
          "description": "Returns a reference to the input element.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 395,
              "column": 4
            },
            "end": {
              "line": 407,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!HTMLElement"
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_focusableElement",
          "description": "Returns a reference to the focusable element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 413,
              "column": 4
            },
            "end": {
              "line": 415,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!HTMLElement"
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 417,
              "column": 4
            },
            "end": {
              "line": 422,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_appendStringWithSpace",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 436,
              "column": 4
            },
            "end": {
              "line": 443,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str"
            },
            {
              "name": "more"
            }
          ],
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_onAddonAttached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 445,
              "column": 4
            },
            "end": {
              "line": 454,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "validate",
          "description": "Validates the input element and sets an error style if needed.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 461,
              "column": 4
            },
            "end": {
              "line": 463,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean"
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_onShiftTabDown",
          "description": "Handler that is called when a shift+tab keypress is detected by the menu.",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 482,
              "column": 4
            },
            "end": {
              "line": 490,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "CustomEvent",
              "description": "A key combination event."
            }
          ],
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_handleAutoValidate",
          "description": "If `autoValidate` is true, then validates the element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 495,
              "column": 4
            },
            "end": {
              "line": 498,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "updateValueAndPreserveCaret",
          "description": "Restores the cursor to its original position after updating the value.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 504,
              "column": 4
            },
            "end": {
              "line": 520,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue",
              "type": "string",
              "description": "The value that should be saved."
            }
          ],
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_computeAlwaysFloatLabel",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 522,
              "column": 4
            },
            "end": {
              "line": 524,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "alwaysFloatLabel"
            },
            {
              "name": "placeholder"
            }
          ],
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_updateAriaLabelledBy",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 526,
              "column": 4
            },
            "end": {
              "line": 540,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_generateInputId",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 542,
              "column": 4
            },
            "end": {
              "line": 546,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_onChange",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 548,
              "column": 4
            },
            "end": {
              "line": 559,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_autofocusChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 561,
              "column": 4
            },
            "end": {
              "line": 586,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "beforeRegister",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 279,
              "column": 4
            },
            "end": {
              "line": 294,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onIronInputReady",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 313,
              "column": 4
            },
            "end": {
              "line": 328,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 271,
          "column": 10
        },
        "end": {
          "line": 329,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "focused",
          "description": "If true, the element currently has focus.",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 25,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "disabled",
          "description": "Set to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `<paper-input-container>`'s and the input's `disabled` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 68,
              "column": 6
            },
            "end": {
              "line": 71,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "key-event-target",
          "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 277,
              "column": 6
            },
            "end": {
              "line": 282,
              "column": 7
            }
          },
          "metadata": {},
          "type": "?EventTarget",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "stop-keyboard-event-propagation",
          "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 288,
              "column": 6
            },
            "end": {
              "line": 288,
              "column": 65
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "label",
          "description": "The label for this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\n`<label>`'s content and `hidden` property, e.g.\n`<label hidden$=\"[[!label]]\">[[label]]</label>` in your `template`",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 50,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "value",
          "description": "The value for this element.",
          "sourceRange": {
            "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {},
          "type": "(string | number | null | undefined)",
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "invalid",
          "description": "Returns true if the value is invalid. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to both the\n`<paper-input-container>`'s and the input's `invalid` property.\n\nIf `autoValidate` is true, the `invalid` attribute is managed automatically,\nwhich can clobber attempts to manage it manually.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 81,
              "column": 6
            },
            "end": {
              "line": 85,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "allowed-pattern",
          "description": "Set this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `allowedPattern`\nproperty.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 93,
              "column": 6
            },
            "end": {
              "line": 95,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "type",
          "description": "The type of the input. The supported types are the\n[native input's types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_<input>_types).\nIf you're using PaperInputBehavior to implement your own paper-input-like element,\nbind this to the (Polymer 1) `<input is=\"iron-input\">`'s or (Polymer 2)\n`<iron-input>`'s `type` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 104,
              "column": 6
            },
            "end": {
              "line": 106,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "list",
          "description": "The datalist of the input (if any). This should match the id of an existing `<datalist>`.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `list` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 113,
              "column": 6
            },
            "end": {
              "line": 115,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "pattern",
          "description": "A pattern to validate the `input` with. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `pattern` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 122,
              "column": 6
            },
            "end": {
              "line": 124,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "required",
          "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.",
          "sourceRange": {
            "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 61,
              "column": 6
            },
            "end": {
              "line": 64,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "error-message",
          "description": "The error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `<paper-input-error>`'s content, if using.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 141,
              "column": 6
            },
            "end": {
              "line": 143,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "char-counter",
          "description": "Set to true to show a character counter.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 148,
              "column": 6
            },
            "end": {
              "line": 151,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "no-label-float",
          "description": "Set to true to disable the floating label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<paper-input-container>`'s `noLabelFloat` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 158,
              "column": 6
            },
            "end": {
              "line": 161,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "always-float-label",
          "description": "Set to true to always float the label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<paper-input-container>`'s `alwaysFloatLabel` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 168,
              "column": 6
            },
            "end": {
              "line": 171,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "auto-validate",
          "description": "Set to true to auto-validate the input value. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<paper-input-container>`'s `autoValidate` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 178,
              "column": 6
            },
            "end": {
              "line": 181,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "validator",
          "description": "Name of the validator to use. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `validator` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 188,
              "column": 6
            },
            "end": {
              "line": 190,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "autocomplete",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocomplete` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 198,
              "column": 6
            },
            "end": {
              "line": 201,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "autofocus",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autofocus` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 207,
              "column": 6
            },
            "end": {
              "line": 210,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "inputmode",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `inputmode` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 216,
              "column": 6
            },
            "end": {
              "line": 218,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "minlength",
          "description": "The minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `minlength` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 225,
              "column": 6
            },
            "end": {
              "line": 227,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "maxlength",
          "description": "The maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `maxlength` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 234,
              "column": 6
            },
            "end": {
              "line": 236,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "min",
          "description": "The minimum (numeric or date-time) input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `min` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 243,
              "column": 6
            },
            "end": {
              "line": 245,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "max",
          "description": "The maximum (numeric or date-time) input value.\nCan be a String (e.g. `\"2000-01-01\"`) or a Number (e.g. `2`).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `max` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 253,
              "column": 6
            },
            "end": {
              "line": 255,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "step",
          "description": "Limits the numeric or date-time increments.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `step` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 262,
              "column": 6
            },
            "end": {
              "line": 264,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "name",
          "description": "The name of this element.",
          "sourceRange": {
            "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 40,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "placeholder",
          "description": "A placeholder string in addition to the label. If this is set, the label will always float.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 277,
              "column": 6
            },
            "end": {
              "line": 281,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "readonly",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `readonly` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 287,
              "column": 6
            },
            "end": {
              "line": 290,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "size",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `size` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 296,
              "column": 6
            },
            "end": {
              "line": 298,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "autocapitalize",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocapitalize` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 306,
              "column": 6
            },
            "end": {
              "line": 309,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "autocorrect",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocorrect` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 315,
              "column": 6
            },
            "end": {
              "line": 318,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "autosave",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autosave` property,\nused with type=search.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 325,
              "column": 6
            },
            "end": {
              "line": 327,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "results",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `results` property,\nused with type=search.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 334,
              "column": 6
            },
            "end": {
              "line": 336,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "accept",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `accept` property,\nused with type=file.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 343,
              "column": 6
            },
            "end": {
              "line": 345,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "multiple",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the`<input is=\"iron-input\">`'s `multiple` property,\nused with type=file.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 352,
              "column": 6
            },
            "end": {
              "line": 354,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "focused-changed",
          "description": "Fired when the `focused` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "type": "CustomEvent",
          "name": "disabled-changed",
          "description": "Fired when the `disabled` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "type": "CustomEvent",
          "name": "change",
          "description": "change",
          "metadata": {},
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "invalid-changed",
          "description": "Fired when the `invalid` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "iron-form-element-register",
          "description": "iron-form-element-register",
          "metadata": {},
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "iron-form-element-unregister",
          "description": "iron-form-element-unregister",
          "metadata": {},
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "prefix",
          "range": {
            "file": "components/paper-input/paper-input.html",
            "start": {
              "line": 165,
              "column": 6
            },
            "end": {
              "line": 165,
              "column": 47
            }
          }
        },
        {
          "description": "",
          "name": "suffix",
          "range": {
            "file": "components/paper-input/paper-input.html",
            "start": {
              "line": 171,
              "column": 6
            },
            "end": {
              "line": 171,
              "column": 47
            }
          }
        }
      ],
      "tagname": "paper-input"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-checked-element-behavior\\demo\\simple-checkbox.html",
      "properties": [
        {
          "name": "name",
          "type": "string",
          "description": "The name of this element.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 40,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "value",
          "type": "string",
          "description": "Overriden from Polymer.IronFormElementBehavior",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-checked-element-behavior.html",
            "start": {
              "line": 51,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 67
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_valueChanged\""
            }
          },
          "defaultValue": "\"on\"",
          "inheritedFrom": "Polymer.IronCheckedElementBehavior"
        },
        {
          "name": "required",
          "type": "boolean",
          "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 61,
              "column": 6
            },
            "end": {
              "line": 64,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "_parentForm",
          "type": "Object",
          "description": "The form that the element is registered to.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 69,
              "column": 6
            },
            "end": {
              "line": 71,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "validator",
          "type": "string",
          "description": "Name of the validator to use.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 49,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "invalid",
          "type": "boolean",
          "description": "True if the last call to `validate` is invalid.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 56,
              "column": 6
            },
            "end": {
              "line": 62,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_invalidChanged\""
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "checked",
          "type": "boolean",
          "description": "Gets or sets the state, `true` is checked and `false` is unchecked.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-checked-element-behavior.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_checkedChanged\""
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronCheckedElementBehavior"
        },
        {
          "name": "toggles",
          "type": "boolean",
          "description": "If true, the button toggles the active state with each tap or press\nof the spacebar.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-checked-element-behavior.html",
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 69
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true",
          "inheritedFrom": "Polymer.IronCheckedElementBehavior"
        },
        {
          "name": "label",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 19
            },
            "end": {
              "line": 43,
              "column": 64
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"not validated\""
        }
      ],
      "methods": [
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 74,
              "column": 4
            },
            "end": {
              "line": 80,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 82,
              "column": 4
            },
            "end": {
              "line": 86,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "registered",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 65,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "_invalidChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "_validator",
          "description": "Recompute this every time it's needed, because we don't know if the\nunderlying IronValidatableBehaviorMeta has changed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 82,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "hasValidator",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "True if the validator `validator` exists."
          },
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "validate",
          "description": "Returns true if the `value` is valid, and updates `invalid`. If you want\nyour element to have custom validation logic, do not override this method;\noverride `_getValidity(value)` instead.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 102,
              "column": 4
            },
            "end": {
              "line": 110,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "Deprecated: The value to be validated. By default,\nit is passed to the validator's `validate()` function, if a validator is set.\nIf this argument is not specified, then the element's `value` property\nis used, if it exists."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if `value` is valid."
          },
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "_getValidity",
          "description": "Returns false if the element is required and not checked, and true\notherwise.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-checked-element-behavior.html",
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_value",
              "type": "*=",
              "description": "Ignored."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "true if `required` is false or if `checked` is true."
          },
          "inheritedFrom": "Polymer.IronCheckedElementBehavior"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-checked-element-behavior.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 61,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronCheckedElementBehavior"
        },
        {
          "name": "_requiredChanged",
          "description": "Update the aria-required label when `required` is changed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-checked-element-behavior.html",
            "start": {
              "line": 76,
              "column": 4
            },
            "end": {
              "line": 82,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronCheckedElementBehavior"
        },
        {
          "name": "_checkedChanged",
          "description": "Fire `iron-changed` when the checked state changes.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-checked-element-behavior.html",
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 90,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronCheckedElementBehavior"
        },
        {
          "name": "_valueChanged",
          "description": "Reset value to 'on' if it is set to `undefined`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-checked-element-behavior.html",
            "start": {
              "line": 95,
              "column": 4
            },
            "end": {
              "line": 99,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronCheckedElementBehavior"
        },
        {
          "name": "_onCheckTap",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 47,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onClick",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 49,
              "column": 6
            },
            "end": {
              "line": 52,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 37,
          "column": 12
        },
        "end": {
          "line": 53,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "name",
          "description": "The name of this element.",
          "sourceRange": {
            "file": "..\\..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 40,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "value",
          "description": "Overriden from Polymer.IronFormElementBehavior",
          "sourceRange": {
            "file": "..\\iron-checked-element-behavior.html",
            "start": {
              "line": 51,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 67
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronCheckedElementBehavior"
        },
        {
          "name": "required",
          "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.",
          "sourceRange": {
            "file": "..\\..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 61,
              "column": 6
            },
            "end": {
              "line": 64,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "validator",
          "description": "Name of the validator to use.",
          "sourceRange": {
            "file": "..\\..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 49,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "invalid",
          "description": "True if the last call to `validate` is invalid.",
          "sourceRange": {
            "file": "..\\..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 56,
              "column": 6
            },
            "end": {
              "line": 62,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "checked",
          "description": "Gets or sets the state, `true` is checked and `false` is unchecked.",
          "sourceRange": {
            "file": "..\\iron-checked-element-behavior.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronCheckedElementBehavior"
        },
        {
          "name": "toggles",
          "description": "If true, the button toggles the active state with each tap or press\nof the spacebar.",
          "sourceRange": {
            "file": "..\\iron-checked-element-behavior.html",
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 69
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronCheckedElementBehavior"
        },
        {
          "name": "label",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 19
            },
            "end": {
              "line": 43,
              "column": 64
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "iron-form-element-register",
          "description": "iron-form-element-register",
          "metadata": {},
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "iron-form-element-unregister",
          "description": "iron-form-element-unregister",
          "metadata": {},
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "invalid-changed",
          "description": "Fired when the `invalid` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "iron-change",
          "description": "iron-change",
          "metadata": {},
          "inheritedFrom": "Polymer.IronCheckedElementBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "checked-changed",
          "description": "Fired when the `checked` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronCheckedElementBehavior"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "simple-checkbox"
    },
    {
      "description": "`iron-doc-module` renders documentation about a JavaScript Module from a\nJSON descriptor output by\n[Polymer Analyzer](https://github.com/Polymer/polymer-analyzer).\n\nThe descriptor should be an analysis format Analysis object, filtered\ndown to contain only the exported contents of a single module.",
      "summary": "",
      "path": "components\\iron-doc-viewer\\iron-doc-module.html",
      "properties": [
        {
          "name": "descriptor",
          "type": "Object",
          "description": "The [Polymer\nAnalyzer](https://github.com/Polymer/polymer-analyzer)-generated element\ndescriptor to display details for.",
          "privacy": "public",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 14,
              "column": 6
            },
            "end": {
              "line": 16,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "baseHref",
          "type": "string",
          "description": "The base href where this doc viewer is located.",
          "privacy": "public",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 21,
              "column": 6
            },
            "end": {
              "line": 21,
              "column": 41
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "fragmentPrefix",
          "type": "string",
          "description": "Prefix for fragment identifiers used in anchors.\nFor static routing `iron-component-page` can\nset this to a string identifying the current component.",
          "privacy": "public",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 28,
              "column": 47
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_showProtected",
          "type": "boolean",
          "description": "Whether protected members should be hidden or shown.",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 33,
              "column": 6
            },
            "end": {
              "line": 36,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_showInherited",
          "type": "boolean",
          "description": "Whether inherited members should be hidden or shown.",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 41,
              "column": 6
            },
            "end": {
              "line": 44,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "moduleSpecifier",
          "type": "string",
          "description": "The module specifier of this module, used to give an example of\nhow to import it. So if this is 'foo' we will tell users to do:\n`import {} from 'foo';`",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 130,
              "column": 8
            },
            "end": {
              "line": 130,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "_filterMembers",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items"
            },
            {
              "name": "showProtected"
            },
            {
              "name": "showInherited"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_noneToShow",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "showProtected"
            },
            {
              "name": "showInherited"
            },
            {
              "name": "descriptor"
            },
            {
              "name": "name"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "scrollToAnchor",
          "description": "Scroll to the descriptor (element, function, etc.) with an `anchor-id`\nmatching the given URL hash (`#` optional). If no hash is specified,\nuses `window.location.hash`.\n\nWhichever element or script is in charge of routing should call this\nmethod on initial page load and on `hashchange` events.",
          "privacy": "public",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 85,
              "column": 4
            },
            "end": {
              "line": 116,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hash"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_getElementName",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 118,
              "column": 4
            },
            "end": {
              "line": 129,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_getElementId",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 131,
              "column": 4
            },
            "end": {
              "line": 133,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_getPolymerBehaviors",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 135,
              "column": 4
            },
            "end": {
              "line": 137,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descriptor"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "_compareDescriptors",
          "description": "Compare two analysis descriptors (elements, functions, etc.) by\ndisplay name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 143,
              "column": 4
            },
            "end": {
              "line": 153,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ],
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 119,
          "column": 12
        },
        "end": {
          "line": 132,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "descriptor",
          "description": "The [Polymer\nAnalyzer](https://github.com/Polymer/polymer-analyzer)-generated element\ndescriptor to display details for.",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 14,
              "column": 6
            },
            "end": {
              "line": 16,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "base-href",
          "description": "The base href where this doc viewer is located.",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 21,
              "column": 6
            },
            "end": {
              "line": 21,
              "column": 41
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "fragment-prefix",
          "description": "Prefix for fragment identifiers used in anchors.\nFor static routing `iron-component-page` can\nset this to a string identifying the current component.",
          "sourceRange": {
            "file": "iron-doc-viewer-behavior.html",
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 28,
              "column": 47
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronDocViewerBehavior"
        },
        {
          "name": "module-specifier",
          "description": "The module specifier of this module, used to give an example of\nhow to import it. So if this is 'foo' we will tell users to do:\n`import {} from 'foo';`",
          "sourceRange": {
            "start": {
              "line": 130,
              "column": 8
            },
            "end": {
              "line": 130,
              "column": 31
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-doc-module"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-fit-behavior\\demo\\simple-fit.html",
      "properties": [
        {
          "name": "sizingTarget",
          "type": "!Element",
          "description": "The element that will receive a `max-height`/`width`. By default it is\nthe same as `this`, but it can be set to a child element. This is useful,\nfor example, for implementing a scrolling region inside the element.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 72,
              "column": 6
            },
            "end": {
              "line": 77,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "fitInto",
          "type": "Object",
          "description": "The element to fit `this` into.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 82,
              "column": 6
            },
            "end": {
              "line": 82,
              "column": 44
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "noOverlap",
          "type": "boolean",
          "description": "Will position the element around the positionTarget without overlapping\nit.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 88,
              "column": 6
            },
            "end": {
              "line": 88,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "positionTarget",
          "type": "!Element",
          "description": "The element that should be used to position the element. If not set, it\nwill default to the parent node.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 95,
              "column": 6
            },
            "end": {
              "line": 95,
              "column": 37
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "horizontalAlign",
          "type": "string",
          "description": "The orientation against which to align the element horizontally\nrelative to the `positionTarget`. Possible values are \"left\", \"right\",\n\"center\", \"auto\".",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 102,
              "column": 6
            },
            "end": {
              "line": 102,
              "column": 37
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "verticalAlign",
          "type": "string",
          "description": "The orientation against which to align the element vertically\nrelative to the `positionTarget`. Possible values are \"top\", \"bottom\",\n\"middle\", \"auto\".",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 109,
              "column": 6
            },
            "end": {
              "line": 109,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "dynamicAlign",
          "type": "boolean",
          "description": "If true, it will use `horizontalAlign` and `verticalAlign` values as\npreferred alignment and if there's not enough space, it will pick the\nvalues which minimize the cropping.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 116,
              "column": 6
            },
            "end": {
              "line": 116,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "horizontalOffset",
          "type": "number",
          "description": "A pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `horizontalAlign`.\n\nIf `horizontalAlign` is \"left\" or \"center\", this offset will increase or\ndecrease the distance to the left side of the screen: a negative offset\nwill move the dropdown to the left; a positive one, to the right.\n\nConversely if `horizontalAlign` is \"right\", this offset will increase\nor decrease the distance to the right side of the screen: a negative\noffset will move the dropdown to the right; a positive one, to the left.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 132,
              "column": 6
            },
            "end": {
              "line": 132,
              "column": 62
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "verticalOffset",
          "type": "number",
          "description": "A pixel value that will be added to the position calculated for the\ngiven `verticalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `verticalAlign`.\n\nIf `verticalAlign` is \"top\" or \"middle\", this offset will increase or\ndecrease the distance to the top side of the screen: a negative offset\nwill move the dropdown upwards; a positive one, downwards.\n\nConversely if `verticalAlign` is \"bottom\", this offset will increase\nor decrease the distance to the bottom side of the screen: a negative\noffset will move the dropdown downwards; a positive one, upwards.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 148,
              "column": 6
            },
            "end": {
              "line": 148,
              "column": 60
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "autoFitOnAttach",
          "type": "boolean",
          "description": "Set to true to auto-fit on attach.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 153,
              "column": 6
            },
            "end": {
              "line": 153,
              "column": 52
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "_fitInfo",
          "type": "?Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 156,
              "column": 6
            },
            "end": {
              "line": 156,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFitBehavior"
        }
      ],
      "methods": [
        {
          "name": "_fitWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 159,
              "column": 4
            },
            "end": {
              "line": 167,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "_fitHeight",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 169,
              "column": 4
            },
            "end": {
              "line": 177,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "_fitLeft",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 179,
              "column": 4
            },
            "end": {
              "line": 187,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "_fitTop",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 189,
              "column": 4
            },
            "end": {
              "line": 197,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "_defaultPositionTarget",
          "description": "The element that should be used to position the element,\nif no position target is configured.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 203,
              "column": 4
            },
            "end": {
              "line": 211,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "_localeHorizontalAlign",
          "description": "The horizontal align value, accounting for the RTL/LTR text direction.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 216,
              "column": 4
            },
            "end": {
              "line": 227,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "__shouldPosition",
          "description": "True if the element should be positioned instead of centered.",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 233,
              "column": 4
            },
            "end": {
              "line": 236,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 238,
              "column": 4
            },
            "end": {
              "line": 258,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 260,
              "column": 4
            },
            "end": {
              "line": 265,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "fit",
          "description": "Positions and fits the element into the `fitInto` element.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 270,
              "column": 4
            },
            "end": {
              "line": 274,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "_discoverInfo",
          "description": "Memoize information needed to position and size the target element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 280,
              "column": 4
            },
            "end": {
              "line": 319,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "resetFit",
          "description": "Resets the target element's position and size constraints, and clear\nthe memoized data.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 325,
              "column": 4
            },
            "end": {
              "line": 335,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "refit",
          "description": "Equivalent to calling `resetFit()` and `fit()`. Useful to call this after\nthe element or the `fitInto` element has been resized, or if any of the\npositioning properties (e.g. `horizontalAlign, verticalAlign`) is updated.\nIt preserves the scroll position of the sizingTarget.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 343,
              "column": 4
            },
            "end": {
              "line": 350,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "position",
          "description": "Positions the element according to `horizontalAlign, verticalAlign`.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 355,
              "column": 4
            },
            "end": {
              "line": 416,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "constrain",
          "description": "Constrains the size of the element to `fitInto` by setting `max-height`\nand/or `max-width`.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 422,
              "column": 4
            },
            "end": {
              "line": 452,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "_sizeDimension",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 458,
              "column": 4
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rect"
            },
            {
              "name": "positionedBy"
            },
            {
              "name": "start"
            },
            {
              "name": "end"
            },
            {
              "name": "extent"
            }
          ],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "__sizeDimension",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 465,
              "column": 4
            },
            "end": {
              "line": 476,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rect"
            },
            {
              "name": "positionedBy"
            },
            {
              "name": "start"
            },
            {
              "name": "end"
            },
            {
              "name": "extent"
            }
          ],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "center",
          "description": "Centers horizontally and vertically if not already positioned. This also\nsets `position:fixed`.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 482,
              "column": 4
            },
            "end": {
              "line": 515,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "__getNormalizedRect",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 517,
              "column": 4
            },
            "end": {
              "line": 529,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            }
          ],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "__getOffscreenArea",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 531,
              "column": 4
            },
            "end": {
              "line": 538,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "position"
            },
            {
              "name": "size"
            },
            {
              "name": "fitRect"
            }
          ],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "__getPosition",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 541,
              "column": 4
            },
            "end": {
              "line": 675,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hAlign"
            },
            {
              "name": "vAlign"
            },
            {
              "name": "size"
            },
            {
              "name": "sizeNoMargins"
            },
            {
              "name": "positionRect"
            },
            {
              "name": "fitRect"
            }
          ],
          "inheritedFrom": "Polymer.IronFitBehavior"
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 25,
          "column": 12
        },
        "end": {
          "line": 25,
          "column": 68
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "sizing-target",
          "description": "The element that will receive a `max-height`/`width`. By default it is\nthe same as `this`, but it can be set to a child element. This is useful,\nfor example, for implementing a scrolling region inside the element.",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 72,
              "column": 6
            },
            "end": {
              "line": 77,
              "column": 7
            }
          },
          "metadata": {},
          "type": "!Element",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "fit-into",
          "description": "The element to fit `this` into.",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 82,
              "column": 6
            },
            "end": {
              "line": 82,
              "column": 44
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "no-overlap",
          "description": "Will position the element around the positionTarget without overlapping\nit.",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 88,
              "column": 6
            },
            "end": {
              "line": 88,
              "column": 32
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "position-target",
          "description": "The element that should be used to position the element. If not set, it\nwill default to the parent node.",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 95,
              "column": 6
            },
            "end": {
              "line": 95,
              "column": 37
            }
          },
          "metadata": {},
          "type": "!Element",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "horizontal-align",
          "description": "The orientation against which to align the element horizontally\nrelative to the `positionTarget`. Possible values are \"left\", \"right\",\n\"center\", \"auto\".",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 102,
              "column": 6
            },
            "end": {
              "line": 102,
              "column": 37
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "vertical-align",
          "description": "The orientation against which to align the element vertically\nrelative to the `positionTarget`. Possible values are \"top\", \"bottom\",\n\"middle\", \"auto\".",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 109,
              "column": 6
            },
            "end": {
              "line": 109,
              "column": 35
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "dynamic-align",
          "description": "If true, it will use `horizontalAlign` and `verticalAlign` values as\npreferred alignment and if there's not enough space, it will pick the\nvalues which minimize the cropping.",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 116,
              "column": 6
            },
            "end": {
              "line": 116,
              "column": 35
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "horizontal-offset",
          "description": "A pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `horizontalAlign`.\n\nIf `horizontalAlign` is \"left\" or \"center\", this offset will increase or\ndecrease the distance to the left side of the screen: a negative offset\nwill move the dropdown to the left; a positive one, to the right.\n\nConversely if `horizontalAlign` is \"right\", this offset will increase\nor decrease the distance to the right side of the screen: a negative\noffset will move the dropdown to the right; a positive one, to the left.",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 132,
              "column": 6
            },
            "end": {
              "line": 132,
              "column": 62
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "vertical-offset",
          "description": "A pixel value that will be added to the position calculated for the\ngiven `verticalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `verticalAlign`.\n\nIf `verticalAlign` is \"top\" or \"middle\", this offset will increase or\ndecrease the distance to the top side of the screen: a negative offset\nwill move the dropdown upwards; a positive one, downwards.\n\nConversely if `verticalAlign` is \"bottom\", this offset will increase\nor decrease the distance to the bottom side of the screen: a negative\noffset will move the dropdown downwards; a positive one, upwards.",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 148,
              "column": 6
            },
            "end": {
              "line": 148,
              "column": 60
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "auto-fit-on-attach",
          "description": "Set to true to auto-fit on attach.",
          "sourceRange": {
            "file": "..\\iron-fit-behavior.html",
            "start": {
              "line": 153,
              "column": 6
            },
            "end": {
              "line": 153,
              "column": 52
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronFitBehavior"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "horizontal-offset-changed",
          "description": "Fired when the `horizontalOffset` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "vertical-offset-changed",
          "description": "Fired when the `verticalOffset` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronFitBehavior"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "components/iron-fit-behavior/demo/simple-fit.html",
            "start": {
              "line": 22,
              "column": 4
            },
            "end": {
              "line": 22,
              "column": 17
            }
          }
        }
      ],
      "tagname": "simple-fit"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-form-element-behavior\\demo\\simple-form.html",
      "properties": [
        {
          "name": "extends",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 17,
              "column": 4
            },
            "end": {
              "line": 17,
              "column": 19
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "formElements",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 20,
              "column": 6
            },
            "end": {
              "line": 23,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_elementRegistered",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 38,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_elementUnregistered",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 40,
              "column": 4
            },
            "end": {
              "line": 48,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 13,
          "column": 10
        },
        "end": {
          "line": 50,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "form-elements",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 20,
              "column": 6
            },
            "end": {
              "line": 23,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "form-elements-changed",
          "description": "Fired when the `formElements` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "simple-form"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-form-element-behavior\\demo\\simple-element.html",
      "properties": [
        {
          "name": "name",
          "type": "string",
          "description": "The name of this element.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-form-element-behavior.html",
            "start": {
              "line": 40,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "value",
          "type": "(string | number | null | undefined)",
          "description": "The value for this element.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-form-element-behavior.html",
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "required",
          "type": "boolean",
          "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-form-element-behavior.html",
            "start": {
              "line": 61,
              "column": 6
            },
            "end": {
              "line": 64,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "_parentForm",
          "type": "Object",
          "description": "The form that the element is registered to.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-form-element-behavior.html",
            "start": {
              "line": 69,
              "column": 6
            },
            "end": {
              "line": 71,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "extends",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 18,
              "column": 4
            },
            "end": {
              "line": 18,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-form-element-behavior.html",
            "start": {
              "line": 74,
              "column": 4
            },
            "end": {
              "line": 80,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-form-element-behavior.html",
            "start": {
              "line": 82,
              "column": 4
            },
            "end": {
              "line": 86,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 14,
          "column": 10
        },
        "end": {
          "line": 24,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "name",
          "description": "The name of this element.",
          "sourceRange": {
            "file": "..\\iron-form-element-behavior.html",
            "start": {
              "line": 40,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "value",
          "description": "The value for this element.",
          "sourceRange": {
            "file": "..\\iron-form-element-behavior.html",
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {},
          "type": "(string | number | null | undefined)",
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "required",
          "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.",
          "sourceRange": {
            "file": "..\\iron-form-element-behavior.html",
            "start": {
              "line": 61,
              "column": 6
            },
            "end": {
              "line": 64,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "iron-form-element-register",
          "description": "iron-form-element-register",
          "metadata": {},
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "iron-form-element-unregister",
          "description": "iron-form-element-unregister",
          "metadata": {},
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "simple-element"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-input\\demo\\cats-only.html",
      "properties": [],
      "methods": [
        {
          "name": "validate",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 21,
              "column": 4
            },
            "end": {
              "line": 23,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 14,
          "column": 10
        },
        "end": {
          "line": 24,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "cats-only"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-location\\demo\\index.html",
      "properties": [
        {
          "name": "historyElementsAdded",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 12
            },
            "end": {
              "line": 97,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "dwellTime",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 99,
              "column": 12
            },
            "end": {
              "line": 102,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "2000"
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 10
            },
            "end": {
              "line": 110,
              "column": 11
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "checkHistorySize",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 10
            },
            "end": {
              "line": 115,
              "column": 11
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "inSeconds",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 10
            },
            "end": {
              "line": 123,
              "column": 11
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dwellTime"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 92,
          "column": 16
        },
        "end": {
          "line": 124,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "history-elements-added",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 12
            },
            "end": {
              "line": 97,
              "column": 13
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "dwell-time",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 99,
              "column": 12
            },
            "end": {
              "line": 102,
              "column": 13
            }
          },
          "metadata": {},
          "type": "number"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-location-demo"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-location\\iron-query-params.html",
      "properties": [
        {
          "name": "paramsString",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 20,
              "column": 6
            },
            "end": {
              "line": 24,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"paramsStringChanged\""
            }
          }
        },
        {
          "name": "paramsObject",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 6
            },
            "end": {
              "line": 32,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}"
        },
        {
          "name": "_dontReact",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 6
            },
            "end": {
              "line": 37,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "hostAttributes",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 40,
              "column": 4
            },
            "end": {
              "line": 42,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "paramsStringChanged",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 4
            },
            "end": {
              "line": 52,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "paramsObjectChanged",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_encodeParams",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 80,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "params"
            }
          ]
        },
        {
          "name": "_decodeParams",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 82,
              "column": 4
            },
            "end": {
              "line": 96,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "paramString"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 16,
          "column": 10
        },
        "end": {
          "line": 97,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "params-string",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 20,
              "column": 6
            },
            "end": {
              "line": 24,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "params-object",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 6
            },
            "end": {
              "line": 32,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "params-string-changed",
          "description": "Fired when the `paramsString` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "params-object-changed",
          "description": "Fired when the `paramsObject` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-query-params"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-location\\demo\\iron-query-params.html",
      "properties": [
        {
          "name": "params",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 12
            },
            "end": {
              "line": 62,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"paramsChanged\""
            }
          }
        },
        {
          "name": "paramsInvalid",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 12
            },
            "end": {
              "line": 66,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "paramString",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 68,
              "column": 12
            },
            "end": {
              "line": 71,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"paramStringChanged\""
            }
          }
        },
        {
          "name": "stringifiedParams",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 12
            },
            "end": {
              "line": 76,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"stringifedParamsChanged\""
            }
          }
        }
      ],
      "methods": [
        {
          "name": "paramStringChanged",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 79,
              "column": 10
            },
            "end": {
              "line": 91,
              "column": 11
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "stringifedParamsChanged",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 93,
              "column": 10
            },
            "end": {
              "line": 108,
              "column": 11
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "paramsChanged",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 10
            },
            "end": {
              "line": 117,
              "column": 11
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 57,
          "column": 16
        },
        "end": {
          "line": 118,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "params",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 12
            },
            "end": {
              "line": 62,
              "column": 13
            }
          },
          "metadata": {}
        },
        {
          "name": "params-invalid",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 12
            },
            "end": {
              "line": 66,
              "column": 13
            }
          },
          "metadata": {}
        },
        {
          "name": "param-string",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 68,
              "column": 12
            },
            "end": {
              "line": 71,
              "column": 13
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "stringified-params",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 12
            },
            "end": {
              "line": 76,
              "column": 13
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "iron-query-params-demo"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-meta\\demo\\index.html",
      "properties": [],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 8
            },
            "end": {
              "line": 50,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 46,
          "column": 14
        },
        "end": {
          "line": 51,
          "column": 7
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "meta-test"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-meta\\demo\\index.html",
      "properties": [],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 57,
              "column": 6
            },
            "end": {
              "line": 60,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 54,
          "column": 12
        },
        "end": {
          "line": 61,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "type-one"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-meta\\demo\\index.html",
      "properties": [],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 6
            },
            "end": {
              "line": 69,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 63,
          "column": 12
        },
        "end": {
          "line": 70,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "type-two"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-overlay-behavior\\demo\\simple-overlay.html",
      "properties": [
        {
          "name": "sizingTarget",
          "type": "!Element",
          "description": "The element that will receive a `max-height`/`width`. By default it is\nthe same as `this`, but it can be set to a child element. This is useful,\nfor example, for implementing a scrolling region inside the element.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 72,
              "column": 6
            },
            "end": {
              "line": 77,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "fitInto",
          "type": "Object",
          "description": "The element to fit `this` into.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 82,
              "column": 6
            },
            "end": {
              "line": 82,
              "column": 44
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "noOverlap",
          "type": "boolean",
          "description": "Will position the element around the positionTarget without overlapping\nit.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 88,
              "column": 6
            },
            "end": {
              "line": 88,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "positionTarget",
          "type": "!Element",
          "description": "The element that should be used to position the element. If not set, it\nwill default to the parent node.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 95,
              "column": 6
            },
            "end": {
              "line": 95,
              "column": 37
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "horizontalAlign",
          "type": "string",
          "description": "The orientation against which to align the element horizontally\nrelative to the `positionTarget`. Possible values are \"left\", \"right\",\n\"center\", \"auto\".",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 102,
              "column": 6
            },
            "end": {
              "line": 102,
              "column": 37
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "verticalAlign",
          "type": "string",
          "description": "The orientation against which to align the element vertically\nrelative to the `positionTarget`. Possible values are \"top\", \"bottom\",\n\"middle\", \"auto\".",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 109,
              "column": 6
            },
            "end": {
              "line": 109,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "dynamicAlign",
          "type": "boolean",
          "description": "If true, it will use `horizontalAlign` and `verticalAlign` values as\npreferred alignment and if there's not enough space, it will pick the\nvalues which minimize the cropping.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 116,
              "column": 6
            },
            "end": {
              "line": 116,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "horizontalOffset",
          "type": "number",
          "description": "A pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `horizontalAlign`.\n\nIf `horizontalAlign` is \"left\" or \"center\", this offset will increase or\ndecrease the distance to the left side of the screen: a negative offset\nwill move the dropdown to the left; a positive one, to the right.\n\nConversely if `horizontalAlign` is \"right\", this offset will increase\nor decrease the distance to the right side of the screen: a negative\noffset will move the dropdown to the right; a positive one, to the left.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 132,
              "column": 6
            },
            "end": {
              "line": 132,
              "column": 62
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "verticalOffset",
          "type": "number",
          "description": "A pixel value that will be added to the position calculated for the\ngiven `verticalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `verticalAlign`.\n\nIf `verticalAlign` is \"top\" or \"middle\", this offset will increase or\ndecrease the distance to the top side of the screen: a negative offset\nwill move the dropdown upwards; a positive one, downwards.\n\nConversely if `verticalAlign` is \"bottom\", this offset will increase\nor decrease the distance to the bottom side of the screen: a negative\noffset will move the dropdown downwards; a positive one, upwards.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 148,
              "column": 6
            },
            "end": {
              "line": 148,
              "column": 60
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "autoFitOnAttach",
          "type": "boolean",
          "description": "Set to true to auto-fit on attach.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 153,
              "column": 6
            },
            "end": {
              "line": 153,
              "column": 52
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "_fitInfo",
          "type": "?Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 156,
              "column": 6
            },
            "end": {
              "line": 156,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "_parentResizable",
          "type": "Object",
          "description": "The closest ancestor element that implements `IronResizableBehavior`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_parentResizableChanged\""
            }
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyingDescendant",
          "type": "boolean",
          "description": "True if this element is currently notifying its descendant elements of\nresize.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "opened",
          "type": "boolean",
          "description": "True if the overlay is currently displayed.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 81
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_openedChanged\""
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "canceled",
          "type": "boolean",
          "description": "True if the overlay was canceled when it was last closed.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 35,
              "column": 6
            },
            "end": {
              "line": 40,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_canceledChanged\"",
              "readOnly": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "withBackdrop",
          "type": "boolean",
          "description": "Set to true to display a backdrop behind the overlay. It traps the focus\nwithin the light DOM of the overlay.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 46,
              "column": 6
            },
            "end": {
              "line": 46,
              "column": 69
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_withBackdropChanged\""
            }
          },
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "noAutoFocus",
          "type": "boolean",
          "description": "Set to true to disable auto-focusing the overlay or child nodes with\nthe `autofocus` attribute` when the overlay is opened.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 52,
              "column": 6
            },
            "end": {
              "line": 52,
              "column": 48
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "noCancelOnEscKey",
          "type": "boolean",
          "description": "Set to true to disable canceling the overlay with the ESC key.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 57,
              "column": 6
            },
            "end": {
              "line": 57,
              "column": 53
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "noCancelOnOutsideClick",
          "type": "boolean",
          "description": "Set to true to disable canceling the overlay by clicking outside it.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 62,
              "column": 6
            },
            "end": {
              "line": 62,
              "column": 59
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "closingReason",
          "type": "Object",
          "description": "Contains the reason(s) this overlay was last closed (see\n`iron-overlay-closed`). `IronOverlayBehavior` provides the `canceled`\nreason; implementers of the behavior can provide other reasons in\naddition to `canceled`.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 70,
              "column": 6
            },
            "end": {
              "line": 74,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "restoreFocusOnClose",
          "type": "boolean",
          "description": "Set to true to enable restoring of focus when overlay is closed.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 79,
              "column": 6
            },
            "end": {
              "line": 79,
              "column": 56
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "allowClickThrough",
          "type": "boolean",
          "description": "Set to true to allow clicks to go through overlays.\nWhen the user clicks outside this overlay, the click may\nclose the overlay below.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 86,
              "column": 6
            },
            "end": {
              "line": 86,
              "column": 40
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "alwaysOnTop",
          "type": "boolean",
          "description": "Set to true to keep overlay always on top.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 91,
              "column": 6
            },
            "end": {
              "line": 91,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "scrollAction",
          "type": "string",
          "description": "Determines which action to perform when scroll outside an opened overlay\nhappens. Possible values: lock - blocks scrolling from happening, refit -\ncomputes the new position on the overlay cancel - causes the overlay to\nclose",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 99,
              "column": 6
            },
            "end": {
              "line": 99,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_manager",
          "type": "!Polymer.IronOverlayManagerClass",
          "description": "Shortcut to access to the overlay manager.",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 106,
              "column": 6
            },
            "end": {
              "line": 106,
              "column": 65
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_focusedChild",
          "type": "?Node",
          "description": "The node being focused.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 112,
              "column": 6
            },
            "end": {
              "line": 112,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        }
      ],
      "methods": [
        {
          "name": "_fitWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 159,
              "column": 4
            },
            "end": {
              "line": 167,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "_fitHeight",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 169,
              "column": 4
            },
            "end": {
              "line": 177,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "_fitLeft",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 179,
              "column": 4
            },
            "end": {
              "line": 187,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "_fitTop",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 189,
              "column": 4
            },
            "end": {
              "line": 197,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "_defaultPositionTarget",
          "description": "The element that should be used to position the element,\nif no position target is configured.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 203,
              "column": 4
            },
            "end": {
              "line": 211,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "_localeHorizontalAlign",
          "description": "The horizontal align value, accounting for the RTL/LTR text direction.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 216,
              "column": 4
            },
            "end": {
              "line": 227,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "__shouldPosition",
          "description": "True if the element should be positioned instead of centered.",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 233,
              "column": 4
            },
            "end": {
              "line": 236,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 177,
              "column": 4
            },
            "end": {
              "line": 183,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 185,
              "column": 4
            },
            "end": {
              "line": 207,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "fit",
          "description": "Positions and fits the element into the `fitInto` element.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 270,
              "column": 4
            },
            "end": {
              "line": 274,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "_discoverInfo",
          "description": "Memoize information needed to position and size the target element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 280,
              "column": 4
            },
            "end": {
              "line": 319,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "resetFit",
          "description": "Resets the target element's position and size constraints, and clear\nthe memoized data.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 325,
              "column": 4
            },
            "end": {
              "line": 335,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "refit",
          "description": "Equivalent to calling `resetFit()` and `fit()`. Useful to call this after\nthe element or the `fitInto` element has been resized, or if any of the\npositioning properties (e.g. `horizontalAlign, verticalAlign`) is updated.\nIt preserves the scroll position of the sizingTarget.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 343,
              "column": 4
            },
            "end": {
              "line": 350,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "position",
          "description": "Positions the element according to `horizontalAlign, verticalAlign`.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 355,
              "column": 4
            },
            "end": {
              "line": 416,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "constrain",
          "description": "Constrains the size of the element to `fitInto` by setting `max-height`\nand/or `max-width`.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 422,
              "column": 4
            },
            "end": {
              "line": 452,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "_sizeDimension",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 458,
              "column": 4
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rect"
            },
            {
              "name": "positionedBy"
            },
            {
              "name": "start"
            },
            {
              "name": "end"
            },
            {
              "name": "extent"
            }
          ],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "__sizeDimension",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 465,
              "column": 4
            },
            "end": {
              "line": 476,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rect"
            },
            {
              "name": "positionedBy"
            },
            {
              "name": "start"
            },
            {
              "name": "end"
            },
            {
              "name": "extent"
            }
          ],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "center",
          "description": "Centers horizontally and vertically if not already positioned. This also\nsets `position:fixed`.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 482,
              "column": 4
            },
            "end": {
              "line": 515,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "__getNormalizedRect",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 517,
              "column": 4
            },
            "end": {
              "line": 529,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            }
          ],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "__getOffscreenArea",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 531,
              "column": 4
            },
            "end": {
              "line": 538,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "position"
            },
            {
              "name": "size"
            },
            {
              "name": "fitRect"
            }
          ],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "__getPosition",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 541,
              "column": 4
            },
            "end": {
              "line": 675,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hAlign"
            },
            {
              "name": "vAlign"
            },
            {
              "name": "size"
            },
            {
              "name": "sizeNoMargins"
            },
            {
              "name": "positionRect"
            },
            {
              "name": "fitRect"
            }
          ],
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "notifyResize",
          "description": "Can be called to manually notify a resizable and its descendant\nresizables of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "assignParentResizable",
          "description": "Used to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 98,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "stopResizeNotificationsFor",
          "description": "Used to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "resizerShouldNotify",
          "description": "This method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 59
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "A candidate descendant element that\nimplements `IronResizableBehavior`."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the `element` should be notified of resize."
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onDescendantIronResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 126,
              "column": 4
            },
            "end": {
              "line": 138,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_fireResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 140,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onIronRequestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 147,
              "column": 4
            },
            "end": {
              "line": 162,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_parentResizableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 164,
              "column": 4
            },
            "end": {
              "line": 168,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyDescendant",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 170,
              "column": 4
            },
            "end": {
              "line": 181,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descendant"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_requestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior\\iron-resizable-behavior.html",
            "start": {
              "line": 183,
              "column": 4
            },
            "end": {
              "line": 211,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "backdropElement",
          "description": "The backdrop element.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 126,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!Element"
          },
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_focusNode",
          "description": "Returns the node to give focus to.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 132,
              "column": 4
            },
            "end": {
              "line": 135,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!Node"
          },
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_focusableNodes",
          "description": "Array of nodes that can receive focus (overlay included), ordered by\n`tabindex`. This is used to retrieve which is the first and last focusable\nnodes in order to wrap the focus for overlays `with-backdrop`.\n\nIf you know what is your content (specifically the first and last focusable\nchildren), you can override this method to return only `[firstFocusable,\nlastFocusable];`",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 148,
              "column": 4
            },
            "end": {
              "line": 150,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!Array.<!Node>"
          },
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 155,
              "column": 4
            },
            "end": {
              "line": 175,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "toggle",
          "description": "Toggle the opened state of the overlay.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 212,
              "column": 4
            },
            "end": {
              "line": 215,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "open",
          "description": "Open the overlay.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 220,
              "column": 4
            },
            "end": {
              "line": 223,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "close",
          "description": "Close the overlay.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 228,
              "column": 4
            },
            "end": {
              "line": 231,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "cancel",
          "description": "Cancels the overlay.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 237,
              "column": 4
            },
            "end": {
              "line": 246,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "Event=",
              "description": "The original event"
            }
          ],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "invalidateTabbables",
          "description": "Invalidates the cached tabbable nodes. To be called when any of the\nfocusable content changes (e.g. a button is disabled).",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 252,
              "column": 4
            },
            "end": {
              "line": 254,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_ensureSetup",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 256,
              "column": 4
            },
            "end": {
              "line": 263,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_openedChanged",
          "description": "Called when `opened` changes.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 270,
              "column": 4
            },
            "end": {
              "line": 287,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "opened",
              "type": "boolean="
            }
          ],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_canceledChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 289,
              "column": 4
            },
            "end": {
              "line": 292,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_withBackdropChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 294,
              "column": 4
            },
            "end": {
              "line": 306,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_prepareRenderOpened",
          "description": "tasks which must occur before opening; e.g. making the element visible.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 328,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_renderOpened",
          "description": "Tasks which cause the overlay to actually open; typically play an\nanimation.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 335,
              "column": 4
            },
            "end": {
              "line": 337,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_renderClosed",
          "description": "Tasks which cause the overlay to actually close; typically play an\nanimation.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 344,
              "column": 4
            },
            "end": {
              "line": 346,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_finishRenderOpened",
          "description": "Tasks to be performed at the end of open action. Will fire\n`iron-overlay-opened`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 353,
              "column": 4
            },
            "end": {
              "line": 358,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_finishRenderClosed",
          "description": "Tasks to be performed at the end of close action. Will fire\n`iron-overlay-closed`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 365,
              "column": 4
            },
            "end": {
              "line": 373,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_preparePositioning",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 375,
              "column": 4
            },
            "end": {
              "line": 379,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_finishPositioning",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 381,
              "column": 4
            },
            "end": {
              "line": 394,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_applyFocus",
          "description": "Applies focus according to the opened state.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 400,
              "column": 4
            },
            "end": {
              "line": 423,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_onCaptureClick",
          "description": "Cancels (closes) the overlay. Call when click happens outside the overlay.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 430,
              "column": 4
            },
            "end": {
              "line": 434,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "!Event"
            }
          ],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_onCaptureFocus",
          "description": "Keeps track of the focused child. If withBackdrop, traps focus within\noverlay.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 442,
              "column": 4
            },
            "end": {
              "line": 453,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "!Event"
            }
          ],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_onCaptureEsc",
          "description": "Handles the ESC key event and cancels (closes) the overlay.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 460,
              "column": 4
            },
            "end": {
              "line": 464,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "!Event"
            }
          ],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_onCaptureTab",
          "description": "Handles TAB key events to track focus changes.\nWill wrap focus for overlays withBackdrop.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 472,
              "column": 4
            },
            "end": {
              "line": 516,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "!Event"
            }
          ],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_onIronResize",
          "description": "Refits if the overlay is opened and not animating.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 522,
              "column": 4
            },
            "end": {
              "line": 526,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "_onNodesChange",
          "description": "Will call notifyResize if overlay is opened.\nCan be overridden in order to avoid multiple observers on the same node.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 533,
              "column": 4
            },
            "end": {
              "line": 539,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "__ensureFirstLastFocusables",
          "description": "Will set first and last focusable nodes if any of them is not set.",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 545,
              "column": 4
            },
            "end": {
              "line": 551,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "__openedChanged",
          "description": "Tasks executed when opened changes: prepare for the opening, move the\nfocus, update the manager, render opened/closed.",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 558,
              "column": 4
            },
            "end": {
              "line": 574,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "__deraf",
          "description": "Debounces the execution of a callback to the next animation frame.",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 582,
              "column": 4
            },
            "end": {
              "line": 591,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "jobname",
              "type": "!string"
            },
            {
              "name": "callback",
              "type": "!Function",
              "description": "Always bound to `this`"
            }
          ],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "__updateScrollObservers",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 599,
              "column": 4
            },
            "end": {
              "line": 610,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isAttached",
              "type": "boolean"
            },
            {
              "name": "opened",
              "type": "boolean"
            },
            {
              "name": "scrollAction",
              "type": "string="
            }
          ],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "__addScrollListeners",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 615,
              "column": 4
            },
            "end": {
              "line": 637,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "__removeScrollListeners",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 642,
              "column": 4
            },
            "end": {
              "line": 654,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "__isValidScrollAction",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 661,
              "column": 4
            },
            "end": {
              "line": 664,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "scrollAction",
              "type": "string="
            }
          ],
          "return": {
            "type": "boolean"
          },
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "__onCaptureScroll",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 669,
              "column": 4
            },
            "end": {
              "line": 691,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "__saveScrollPosition",
          "description": "Memoizes the scroll position of the outside scrolling element.",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 697,
              "column": 4
            },
            "end": {
              "line": 708,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "__restoreScrollPosition",
          "description": "Resets the scroll position of the outside scrolling element.",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 714,
              "column": 4
            },
            "end": {
              "line": 725,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 31,
          "column": 10
        },
        "end": {
          "line": 37,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "sizing-target",
          "description": "The element that will receive a `max-height`/`width`. By default it is\nthe same as `this`, but it can be set to a child element. This is useful,\nfor example, for implementing a scrolling region inside the element.",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 72,
              "column": 6
            },
            "end": {
              "line": 77,
              "column": 7
            }
          },
          "metadata": {},
          "type": "!Element",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "fit-into",
          "description": "The element to fit `this` into.",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 82,
              "column": 6
            },
            "end": {
              "line": 82,
              "column": 44
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "no-overlap",
          "description": "Will position the element around the positionTarget without overlapping\nit.",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 88,
              "column": 6
            },
            "end": {
              "line": 88,
              "column": 32
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "position-target",
          "description": "The element that should be used to position the element. If not set, it\nwill default to the parent node.",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 95,
              "column": 6
            },
            "end": {
              "line": 95,
              "column": 37
            }
          },
          "metadata": {},
          "type": "!Element",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "horizontal-align",
          "description": "The orientation against which to align the element horizontally\nrelative to the `positionTarget`. Possible values are \"left\", \"right\",\n\"center\", \"auto\".",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 102,
              "column": 6
            },
            "end": {
              "line": 102,
              "column": 37
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "vertical-align",
          "description": "The orientation against which to align the element vertically\nrelative to the `positionTarget`. Possible values are \"top\", \"bottom\",\n\"middle\", \"auto\".",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 109,
              "column": 6
            },
            "end": {
              "line": 109,
              "column": 35
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "dynamic-align",
          "description": "If true, it will use `horizontalAlign` and `verticalAlign` values as\npreferred alignment and if there's not enough space, it will pick the\nvalues which minimize the cropping.",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 116,
              "column": 6
            },
            "end": {
              "line": 116,
              "column": 35
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "horizontal-offset",
          "description": "A pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `horizontalAlign`.\n\nIf `horizontalAlign` is \"left\" or \"center\", this offset will increase or\ndecrease the distance to the left side of the screen: a negative offset\nwill move the dropdown to the left; a positive one, to the right.\n\nConversely if `horizontalAlign` is \"right\", this offset will increase\nor decrease the distance to the right side of the screen: a negative\noffset will move the dropdown to the right; a positive one, to the left.",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 132,
              "column": 6
            },
            "end": {
              "line": 132,
              "column": 62
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "vertical-offset",
          "description": "A pixel value that will be added to the position calculated for the\ngiven `verticalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `verticalAlign`.\n\nIf `verticalAlign` is \"top\" or \"middle\", this offset will increase or\ndecrease the distance to the top side of the screen: a negative offset\nwill move the dropdown upwards; a positive one, downwards.\n\nConversely if `verticalAlign` is \"bottom\", this offset will increase\nor decrease the distance to the bottom side of the screen: a negative\noffset will move the dropdown downwards; a positive one, upwards.",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 148,
              "column": 6
            },
            "end": {
              "line": 148,
              "column": 60
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "auto-fit-on-attach",
          "description": "Set to true to auto-fit on attach.",
          "sourceRange": {
            "file": "..\\..\\iron-fit-behavior\\iron-fit-behavior.html",
            "start": {
              "line": 153,
              "column": 6
            },
            "end": {
              "line": 153,
              "column": 52
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "name": "opened",
          "description": "True if the overlay is currently displayed.",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 81
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "canceled",
          "description": "True if the overlay was canceled when it was last closed.",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 35,
              "column": 6
            },
            "end": {
              "line": 40,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "with-backdrop",
          "description": "Set to true to display a backdrop behind the overlay. It traps the focus\nwithin the light DOM of the overlay.",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 46,
              "column": 6
            },
            "end": {
              "line": 46,
              "column": 69
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "no-auto-focus",
          "description": "Set to true to disable auto-focusing the overlay or child nodes with\nthe `autofocus` attribute` when the overlay is opened.",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 52,
              "column": 6
            },
            "end": {
              "line": 52,
              "column": 48
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "no-cancel-on-esc-key",
          "description": "Set to true to disable canceling the overlay with the ESC key.",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 57,
              "column": 6
            },
            "end": {
              "line": 57,
              "column": 53
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "no-cancel-on-outside-click",
          "description": "Set to true to disable canceling the overlay by clicking outside it.",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 62,
              "column": 6
            },
            "end": {
              "line": 62,
              "column": 59
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "closing-reason",
          "description": "Contains the reason(s) this overlay was last closed (see\n`iron-overlay-closed`). `IronOverlayBehavior` provides the `canceled`\nreason; implementers of the behavior can provide other reasons in\naddition to `canceled`.",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 70,
              "column": 6
            },
            "end": {
              "line": 74,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "restore-focus-on-close",
          "description": "Set to true to enable restoring of focus when overlay is closed.",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 79,
              "column": 6
            },
            "end": {
              "line": 79,
              "column": 56
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "allow-click-through",
          "description": "Set to true to allow clicks to go through overlays.\nWhen the user clicks outside this overlay, the click may\nclose the overlay below.",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 86,
              "column": 6
            },
            "end": {
              "line": 86,
              "column": 40
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "always-on-top",
          "description": "Set to true to keep overlay always on top.",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 91,
              "column": 6
            },
            "end": {
              "line": 91,
              "column": 34
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "name": "scroll-action",
          "description": "Determines which action to perform when scroll outside an opened overlay\nhappens. Possible values: lock - blocks scrolling from happening, refit -\ncomputes the new position on the overlay cancel - causes the overlay to\nclose",
          "sourceRange": {
            "file": "..\\iron-overlay-behavior.html",
            "start": {
              "line": 99,
              "column": 6
            },
            "end": {
              "line": 99,
              "column": 34
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "horizontal-offset-changed",
          "description": "Fired when the `horizontalOffset` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "vertical-offset-changed",
          "description": "Fired when the `verticalOffset` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronFitBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "opened-changed",
          "description": "Fired when the `opened` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronOverlayBehaviorImpl"
        },
        {
          "type": "CustomEvent",
          "name": "iron-overlay-canceled",
          "description": "iron-overlay-canceled",
          "metadata": {},
          "inheritedFrom": "Polymer.IronOverlayBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "iron-overlay-closed",
          "description": "iron-overlay-closed",
          "metadata": {},
          "inheritedFrom": "Polymer.IronOverlayBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "iron-overlay-opened",
          "description": "iron-overlay-opened",
          "metadata": {},
          "inheritedFrom": "Polymer.IronOverlayBehavior"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "components/iron-overlay-behavior/demo/simple-overlay.html",
            "start": {
              "line": 23,
              "column": 4
            },
            "end": {
              "line": 23,
              "column": 17
            }
          }
        }
      ],
      "tagname": "simple-overlay"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-resizable-behavior\\demo\\src\\x-app.html",
      "properties": [
        {
          "name": "_parentResizable",
          "type": "Object",
          "description": "The closest ancestor element that implements `IronResizableBehavior`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_parentResizableChanged\""
            }
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyingDescendant",
          "type": "boolean",
          "description": "True if this element is currently notifying its descendant elements of\nresize.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "x",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 6
            },
            "end": {
              "line": 41,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "y",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 6
            },
            "end": {
              "line": 46,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "parent",
          "type": "Function",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 57,
              "column": 4
            },
            "end": {
              "line": 63,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        }
      ],
      "methods": [
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 4
            },
            "end": {
              "line": 55,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 74,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "notifyResize",
          "description": "Can be called to manually notify a resizable and its descendant\nresizables of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "assignParentResizable",
          "description": "Used to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 98,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "stopResizeNotificationsFor",
          "description": "Used to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "resizerShouldNotify",
          "description": "This method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 59
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "A candidate descendant element that\nimplements `IronResizableBehavior`."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the `element` should be notified of resize."
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onDescendantIronResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 126,
              "column": 4
            },
            "end": {
              "line": 138,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_fireResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 140,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onIronRequestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 147,
              "column": 4
            },
            "end": {
              "line": 162,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_parentResizableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 164,
              "column": 4
            },
            "end": {
              "line": 168,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyDescendant",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 170,
              "column": 4
            },
            "end": {
              "line": 181,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descendant"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_requestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 183,
              "column": 4
            },
            "end": {
              "line": 211,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onIronResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 4
            },
            "end": {
              "line": 70,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 29,
          "column": 10
        },
        "end": {
          "line": 71,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "x",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 6
            },
            "end": {
              "line": 41,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "y",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 6
            },
            "end": {
              "line": 46,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "x-puck"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-resizable-behavior\\demo\\src\\x-app.html",
      "properties": [
        {
          "name": "_parentResizable",
          "type": "Object",
          "description": "The closest ancestor element that implements `IronResizableBehavior`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_parentResizableChanged\""
            }
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyingDescendant",
          "type": "boolean",
          "description": "True if this element is currently notifying its descendant elements of\nresize.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronResizableBehavior"
        }
      ],
      "methods": [
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 64,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 74,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "notifyResize",
          "description": "Can be called to manually notify a resizable and its descendant\nresizables of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "assignParentResizable",
          "description": "Used to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 98,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "stopResizeNotificationsFor",
          "description": "Used to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "resizerShouldNotify",
          "description": "This method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 59
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "A candidate descendant element that\nimplements `IronResizableBehavior`."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the `element` should be notified of resize."
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onDescendantIronResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 126,
              "column": 4
            },
            "end": {
              "line": 138,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_fireResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 140,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onIronRequestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 147,
              "column": 4
            },
            "end": {
              "line": 162,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_parentResizableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 164,
              "column": 4
            },
            "end": {
              "line": 168,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyDescendant",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 170,
              "column": 4
            },
            "end": {
              "line": 181,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descendant"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_requestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-resizable-behavior.html",
            "start": {
              "line": 183,
              "column": 4
            },
            "end": {
              "line": 211,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 95,
          "column": 10
        },
        "end": {
          "line": 102,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "x-app"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-scroll-target-behavior\\demo\\x-scrollable.html",
      "properties": [
        {
          "name": "scrollTarget",
          "type": "HTMLElement",
          "description": "Specifies the element that will handle the scroll event\non the behalf of the current element. This is typically a reference to an\nelement, but there are a few more posibilities:\n\n### Elements id\n\n```html\n<div id=\"scrollable-element\" style=\"overflow: auto;\">\n <x-element scroll-target=\"scrollable-element\">\n   <!-- Content-->\n </x-element>\n</div>\n```\nIn this case, the `scrollTarget` will point to the outer div element.\n\n### Document scrolling\n\nFor document scrolling, you can use the reserved word `document`:\n\n```html\n<x-element scroll-target=\"document\">\n  <!-- Content -->\n</x-element>\n```\n\n### Elements reference\n\n```js\nappHeader.scrollTarget = document.querySelector('#scrollable-element');\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-scroll-target-behavior.html",
            "start": {
              "line": 63,
              "column": 6
            },
            "end": {
              "line": 68,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_shouldHaveListener",
          "type": "boolean",
          "description": "True if the event listener should be installed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-scroll-target-behavior.html",
            "start": {
              "line": 76,
              "column": 4
            },
            "end": {
              "line": 76,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "xScrollTop",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 6
            },
            "end": {
              "line": 58,
              "column": 58
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "xScrollLeft",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 6
            },
            "end": {
              "line": 60,
              "column": 59
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "itemCount",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 6
            },
            "end": {
              "line": 62,
              "column": 43
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "200"
        }
      ],
      "methods": [
        {
          "name": "_scrollTargetChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-scroll-target-behavior.html",
            "start": {
              "line": 78,
              "column": 4
            },
            "end": {
              "line": 103,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "scrollTarget"
            },
            {
              "name": "isAttached"
            }
          ],
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_scrollHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_defaultScrollTarget",
          "description": "The default scroll target. Consumers of this behavior may want to customize\nthe default scroll target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-scroll-target-behavior.html",
            "start": {
              "line": 119,
              "column": 4
            },
            "end": {
              "line": 121,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_doc",
          "description": "Shortcut for the document element",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-scroll-target-behavior.html",
            "start": {
              "line": 128,
              "column": 4
            },
            "end": {
              "line": 130,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_scrollTop",
          "description": "Sets the number of pixels that the content of an element is scrolled\nupward.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-scroll-target-behavior.html",
            "start": {
              "line": 166,
              "column": 4
            },
            "end": {
              "line": 172,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "top"
            }
          ],
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_scrollLeft",
          "description": "Sets the number of pixels that the content of an element is scrolled to the\nleft.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-scroll-target-behavior.html",
            "start": {
              "line": 180,
              "column": 4
            },
            "end": {
              "line": 186,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "left"
            }
          ],
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "scroll",
          "description": "Scrolls the content to a particular place.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-scroll-target-behavior.html",
            "start": {
              "line": 196,
              "column": 4
            },
            "end": {
              "line": 214,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "leftOrOptions",
              "type": "(number | !{left: number, top: number})",
              "description": "The left position or scroll options"
            },
            {
              "name": "top",
              "type": "number=",
              "description": "The top position"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_scrollTargetWidth",
          "description": "Gets the width of the scroll target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-scroll-target-behavior.html",
            "start": {
              "line": 221,
              "column": 4
            },
            "end": {
              "line": 227,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_scrollTargetHeight",
          "description": "Gets the height of the scroll target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-scroll-target-behavior.html",
            "start": {
              "line": 234,
              "column": 4
            },
            "end": {
              "line": 240,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_isValidScrollTarget",
          "description": "Returns true if the scroll target is a valid HTMLElement.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-scroll-target-behavior.html",
            "start": {
              "line": 247,
              "column": 4
            },
            "end": {
              "line": 249,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean"
          },
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "_toggleScrollListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-scroll-target-behavior.html",
            "start": {
              "line": 251,
              "column": 4
            },
            "end": {
              "line": 264,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "yes"
            },
            {
              "name": "scrollTarget"
            }
          ],
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "toggleScrollListener",
          "description": "Enables or disables the scroll event listener.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-scroll-target-behavior.html",
            "start": {
              "line": 271,
              "column": 4
            },
            "end": {
              "line": 274,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "yes",
              "type": "boolean",
              "description": "True to add the event, False to remove it."
            }
          ],
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 68,
              "column": 4
            },
            "end": {
              "line": 70,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getItems",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 4
            },
            "end": {
              "line": 83,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "itemCount"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 52,
          "column": 10
        },
        "end": {
          "line": 84,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "scroll-target",
          "description": "Specifies the element that will handle the scroll event\non the behalf of the current element. This is typically a reference to an\nelement, but there are a few more posibilities:\n\n### Elements id\n\n```html\n<div id=\"scrollable-element\" style=\"overflow: auto;\">\n <x-element scroll-target=\"scrollable-element\">\n   <!-- Content-->\n </x-element>\n</div>\n```\nIn this case, the `scrollTarget` will point to the outer div element.\n\n### Document scrolling\n\nFor document scrolling, you can use the reserved word `document`:\n\n```html\n<x-element scroll-target=\"document\">\n  <!-- Content -->\n</x-element>\n```\n\n### Elements reference\n\n```js\nappHeader.scrollTarget = document.querySelector('#scrollable-element');\n```",
          "sourceRange": {
            "file": "..\\iron-scroll-target-behavior.html",
            "start": {
              "line": 63,
              "column": 6
            },
            "end": {
              "line": 68,
              "column": 7
            }
          },
          "metadata": {},
          "type": "HTMLElement",
          "inheritedFrom": "Polymer.IronScrollTargetBehavior"
        },
        {
          "name": "x-scroll-top",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 6
            },
            "end": {
              "line": 58,
              "column": 58
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "x-scroll-left",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 6
            },
            "end": {
              "line": 60,
              "column": 59
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "item-count",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 6
            },
            "end": {
              "line": 62,
              "column": 43
            }
          },
          "metadata": {},
          "type": "number"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "x-scrollable"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-validatable-behavior\\demo\\cats-only.html",
      "properties": [],
      "methods": [
        {
          "name": "validateObject",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 23,
              "column": 4
            },
            "end": {
              "line": 32,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ]
        },
        {
          "name": "validate",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "values"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 15,
          "column": 10
        },
        "end": {
          "line": 43,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "cats-only"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\iron-validatable-behavior\\demo\\validatable-input.html",
      "properties": [
        {
          "name": "validator",
          "type": "string",
          "description": "Name of the validator to use.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-validatable-behavior.html",
            "start": {
              "line": 49,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "invalid",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 8
            },
            "end": {
              "line": 36,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "registered",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-validatable-behavior.html",
            "start": {
              "line": 65,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "_invalidChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-validatable-behavior.html",
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "_validator",
          "description": "Recompute this every time it's needed, because we don't know if the\nunderlying IronValidatableBehaviorMeta has changed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-validatable-behavior.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 82,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "hasValidator",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-validatable-behavior.html",
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "True if the validator `validator` exists."
          },
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "validate",
          "description": "Returns true if the `value` is valid, and updates `invalid`. If you want\nyour element to have custom validation logic, do not override this method;\noverride `_getValidity(value)` instead.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-validatable-behavior.html",
            "start": {
              "line": 102,
              "column": 4
            },
            "end": {
              "line": 110,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "Deprecated: The value to be validated. By default,\nit is passed to the validator's `validate()` function, if a validator is set.\nIf this argument is not specified, then the element's `value` property\nis used, if it exists."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if `value` is valid."
          },
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "_getValidity",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-validatable-behavior.html",
            "start": {
              "line": 122,
              "column": 4
            },
            "end": {
              "line": 127,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "_onInput",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 6
            },
            "end": {
              "line": 49,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 29,
          "column": 12
        },
        "end": {
          "line": 50,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "validator",
          "description": "Name of the validator to use.",
          "sourceRange": {
            "file": "..\\iron-validatable-behavior.html",
            "start": {
              "line": 49,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "invalid",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 8
            },
            "end": {
              "line": 36,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "invalid-changed",
          "description": "Fired when the `invalid` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "validatable-input"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\paper-behaviors\\demo\\paper-button.html",
      "properties": [
        {
          "name": "keyEventTarget",
          "type": "?EventTarget",
          "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 277,
              "column": 6
            },
            "end": {
              "line": 282,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "stopKeyboardEventPropagation",
          "type": "boolean",
          "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 288,
              "column": 6
            },
            "end": {
              "line": 288,
              "column": 65
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_boundKeyHandlers",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 290,
              "column": 6
            },
            "end": {
              "line": 295,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_imperativeKeyBindings",
          "type": "Object",
          "description": "own properties of everything on the \"prototype\".",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 299,
              "column": 6
            },
            "end": {
              "line": 304,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "keyBindings",
          "type": "!Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 100,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "pressed",
          "type": "boolean",
          "description": "If true, the user is currently holding down the button.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 27,
              "column": 6
            },
            "end": {
              "line": 33,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_pressedChanged\"",
              "readOnly": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "toggles",
          "type": "boolean",
          "description": "If true, the button toggles the active state with each tap or press\nof the spacebar.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 39,
              "column": 6
            },
            "end": {
              "line": 43,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "active",
          "type": "boolean",
          "description": "If true, the button is a toggle and is currently in the active state.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 53,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "pointerDown",
          "type": "boolean",
          "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 60,
              "column": 6
            },
            "end": {
              "line": 64,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "receivedFocusFromKeyboard",
          "type": "boolean",
          "description": "True if the input device that caused the element to receive focus\nwas a keyboard.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 70,
              "column": 6
            },
            "end": {
              "line": 73,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "ariaActiveAttribute",
          "type": "string",
          "description": "The aria attribute to be set if the button is a toggle and in the\nactive state.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 79,
              "column": 6
            },
            "end": {
              "line": 83,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_ariaActiveAttributeChanged\""
            }
          },
          "defaultValue": "\"aria-pressed\"",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_mouseEventRe",
          "type": "object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 106,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "focused",
          "type": "boolean",
          "description": "If true, the element currently has focus.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 25,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "If true, the user cannot interact with this element.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_disabledChanged\""
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_oldTabIndex",
          "type": "(?string | undefined)",
          "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 49,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_boundFocusBlurHandler",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 53,
              "column": 6
            },
            "end": {
              "line": 58,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "__handleEventRetargeting",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 60,
              "column": 6
            },
            "end": {
              "line": 65,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "noink",
          "type": "boolean",
          "description": "If true, the element will not produce a ripple effect when interacted\nwith via the pointer.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\paper-ripple-behavior.html",
            "start": {
              "line": 30,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 55
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_noinkChanged\""
            }
          },
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "_rippleContainer",
          "type": "(Element | undefined)",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\paper-ripple-behavior.html",
            "start": {
              "line": 35,
              "column": 6
            },
            "end": {
              "line": 37,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "elevation",
          "type": "number",
          "description": "The z-depth of this element, from 0-5. Setting to 0 will remove the\nshadow, and each increasing number greater than 0 will be \"deeper\"\nthan the last.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\paper-button-behavior.html",
            "start": {
              "line": 27,
              "column": 6
            },
            "end": {
              "line": 27,
              "column": 73
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "Polymer.PaperButtonBehavior"
        },
        {
          "name": "hostAttributes",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\paper-button-behavior.html",
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 35,
              "column": 67
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperButtonBehavior"
        }
      ],
      "methods": [
        {
          "name": "registered",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 317,
              "column": 4
            },
            "end": {
              "line": 319,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 321,
              "column": 4
            },
            "end": {
              "line": 323,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 325,
              "column": 4
            },
            "end": {
              "line": 327,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "addOwnKeyBinding",
          "description": "Can be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 337,
              "column": 4
            },
            "end": {
              "line": 341,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventString",
              "type": "string"
            },
            {
              "name": "handlerName",
              "type": "string"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "removeOwnKeyBindings",
          "description": "When called, will remove all imperatively-added key bindings.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 346,
              "column": 4
            },
            "end": {
              "line": 350,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "keyboardEventMatchesKeys",
          "description": "Returns true if a keyboard event matches `eventString`.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 359,
              "column": 4
            },
            "end": {
              "line": 367,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            },
            {
              "name": "eventString",
              "type": "string"
            }
          ],
          "return": {
            "type": "boolean"
          },
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_collectKeyBindings",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 369,
              "column": 4
            },
            "end": {
              "line": 379,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_prepKeyBindings",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 381,
              "column": 4
            },
            "end": {
              "line": 403,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_addKeyBinding",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 405,
              "column": 4
            },
            "end": {
              "line": 412,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventString"
            },
            {
              "name": "handlerName"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_resetKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 414,
              "column": 4
            },
            "end": {
              "line": 420,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_listenKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 422,
              "column": 4
            },
            "end": {
              "line": 435,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_unlistenKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 437,
              "column": 4
            },
            "end": {
              "line": 452,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_onKeyBindingEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 454,
              "column": 4
            },
            "end": {
              "line": 475,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "keyBindings"
            },
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_triggerKeyHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 477,
              "column": 4
            },
            "end": {
              "line": 486,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "keyCombo"
            },
            {
              "name": "handlerName"
            },
            {
              "name": "keyboardEvent"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_tapHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 108,
              "column": 4
            },
            "end": {
              "line": 115,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_focusChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 117,
              "column": 4
            },
            "end": {
              "line": 123,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "focused"
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_detectKeyboardFocus",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 125,
              "column": 4
            },
            "end": {
              "line": 127,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "focused"
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_userActivate",
          "description": "'change' events",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 131,
              "column": 4
            },
            "end": {
              "line": 136,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "active"
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_downHandler",
          "description": "In addition to the functionality provided in `IronButtonState`, ensures\na ripple effect is created when the element is in a `pressed` state.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\paper-ripple-behavior.html",
            "start": {
              "line": 54,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "_upHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 144,
              "column": 4
            },
            "end": {
              "line": 147,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_spaceKeyDownHandler",
          "description": "In addition to `IronButtonState` behavior, when space key goes down,\ncreate a ripple down effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\paper-button-behavior.html",
            "start": {
              "line": 59,
              "column": 4
            },
            "end": {
              "line": 65,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "!KeyboardEvent",
              "description": "."
            }
          ],
          "inheritedFrom": "Polymer.PaperButtonBehavior"
        },
        {
          "name": "_spaceKeyUpHandler",
          "description": "In addition to `IronButtonState` behavior, when space key goes up,\ncreate a ripple up effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\paper-button-behavior.html",
            "start": {
              "line": 73,
              "column": 4
            },
            "end": {
              "line": 78,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "!KeyboardEvent",
              "description": "."
            }
          ],
          "inheritedFrom": "Polymer.PaperButtonBehavior"
        },
        {
          "name": "_asyncClick",
          "description": "event handler to unwind before triggering another event",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 186,
              "column": 4
            },
            "end": {
              "line": 190,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_pressedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 194,
              "column": 4
            },
            "end": {
              "line": 196,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pressed"
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_ariaActiveAttributeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 198,
              "column": 4
            },
            "end": {
              "line": 202,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_activeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 204,
              "column": 4
            },
            "end": {
              "line": 212,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "active"
            },
            {
              "name": "ariaActiveAttribute"
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_controlStateChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 214,
              "column": 4
            },
            "end": {
              "line": 220,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_changedButtonState",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 224,
              "column": 4
            },
            "end": {
              "line": 228,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 75,
              "column": 4
            },
            "end": {
              "line": 78,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_focusBlurHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_disabledChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 125,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "disabled"
            },
            {
              "name": "old"
            }
          ],
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_changedControlState",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_buttonStateChanged",
          "description": "Ensures a `<paper-ripple>` element is available when the element is\nfocused.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\paper-ripple-behavior.html",
            "start": {
              "line": 44,
              "column": 4
            },
            "end": {
              "line": 48,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "ensureRipple",
          "description": "Ensures this element contains a ripple effect. For startup efficiency\nthe ripple effect is dynamically on demand when needed.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\paper-ripple-behavior.html",
            "start": {
              "line": 67,
              "column": 4
            },
            "end": {
              "line": 86,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "optTriggeringEvent",
              "type": "!Event=",
              "description": "(optional) event that triggered the\nripple."
            }
          ],
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "getRipple",
          "description": "Returns the `<paper-ripple>` element used by this element to create\nripple effects. The element's ripple is created on demand, when\nnecessary, and calling this method will force the\nripple to be created.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\paper-ripple-behavior.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 97,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "hasRipple",
          "description": "Returns true if this element currently contains a ripple effect.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\paper-ripple-behavior.html",
            "start": {
              "line": 103,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean"
          },
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "_createRipple",
          "description": "Create the element's ripple effect via creating a `<paper-ripple>`.\nOverride this method to customize the ripple element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\paper-ripple-behavior.html",
            "start": {
              "line": 112,
              "column": 4
            },
            "end": {
              "line": 116,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!PaperRippleElement",
            "desc": "Returns a `<paper-ripple>` element."
          },
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "_noinkChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\paper-ripple-behavior.html",
            "start": {
              "line": 118,
              "column": 4
            },
            "end": {
              "line": 122,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "noink"
            }
          ],
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "_calculateElevation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\paper-button-behavior.html",
            "start": {
              "line": 37,
              "column": 4
            },
            "end": {
              "line": 47,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PaperButtonBehavior"
        },
        {
          "name": "_computeKeyboardClass",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\paper-button-behavior.html",
            "start": {
              "line": 49,
              "column": 4
            },
            "end": {
              "line": 51,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "receivedFocusFromKeyboard"
            }
          ],
          "inheritedFrom": "Polymer.PaperButtonBehavior"
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 56,
          "column": 12
        },
        "end": {
          "line": 60,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "key-event-target",
          "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 277,
              "column": 6
            },
            "end": {
              "line": 282,
              "column": 7
            }
          },
          "metadata": {},
          "type": "?EventTarget",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "stop-keyboard-event-propagation",
          "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 288,
              "column": 6
            },
            "end": {
              "line": 288,
              "column": 65
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "pressed",
          "description": "If true, the user is currently holding down the button.",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 27,
              "column": 6
            },
            "end": {
              "line": 33,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "toggles",
          "description": "If true, the button toggles the active state with each tap or press\nof the spacebar.",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 39,
              "column": 6
            },
            "end": {
              "line": 43,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "active",
          "description": "If true, the button is a toggle and is currently in the active state.",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 53,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "pointer-down",
          "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 60,
              "column": 6
            },
            "end": {
              "line": 64,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "received-focus-from-keyboard",
          "description": "True if the input device that caused the element to receive focus\nwas a keyboard.",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 70,
              "column": 6
            },
            "end": {
              "line": 73,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "aria-active-attribute",
          "description": "The aria attribute to be set if the button is a toggle and in the\nactive state.",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 79,
              "column": 6
            },
            "end": {
              "line": 83,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "focused",
          "description": "If true, the element currently has focus.",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 25,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "disabled",
          "description": "If true, the user cannot interact with this element.",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "noink",
          "description": "If true, the element will not produce a ripple effect when interacted\nwith via the pointer.",
          "sourceRange": {
            "file": "..\\paper-ripple-behavior.html",
            "start": {
              "line": 30,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 55
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "elevation",
          "description": "The z-depth of this element, from 0-5. Setting to 0 will remove the\nshadow, and each increasing number greater than 0 will be \"deeper\"\nthan the last.",
          "sourceRange": {
            "file": "..\\paper-button-behavior.html",
            "start": {
              "line": 27,
              "column": 6
            },
            "end": {
              "line": 27,
              "column": 73
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "Polymer.PaperButtonBehavior"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "active-changed",
          "description": "Fired when the `active` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "type": "CustomEvent",
          "name": "focused-changed",
          "description": "Fired when the `focused` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "type": "CustomEvent",
          "name": "disabled-changed",
          "description": "Fired when the `disabled` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronControlState"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "components/paper-behaviors/demo/paper-button.html",
            "start": {
              "line": 51,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 19
            }
          }
        }
      ],
      "tagname": "paper-button"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\paper-behaviors\\demo\\paper-radio-button.html",
      "properties": [
        {
          "name": "keyEventTarget",
          "type": "?EventTarget",
          "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 277,
              "column": 6
            },
            "end": {
              "line": 282,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "stopKeyboardEventPropagation",
          "type": "boolean",
          "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 288,
              "column": 6
            },
            "end": {
              "line": 288,
              "column": 65
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_boundKeyHandlers",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 290,
              "column": 6
            },
            "end": {
              "line": 295,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_imperativeKeyBindings",
          "type": "Object",
          "description": "own properties of everything on the \"prototype\".",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 299,
              "column": 6
            },
            "end": {
              "line": 304,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "keyBindings",
          "type": "!Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 100,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "pressed",
          "type": "boolean",
          "description": "If true, the user is currently holding down the button.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 27,
              "column": 6
            },
            "end": {
              "line": 33,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_pressedChanged\"",
              "readOnly": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "toggles",
          "type": "boolean",
          "description": "If true, the button toggles the active state with each tap or press\nof the spacebar.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-checked-element-behavior\\iron-checked-element-behavior.html",
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 69
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true",
          "inheritedFrom": "Polymer.IronCheckedElementBehavior"
        },
        {
          "name": "active",
          "type": "boolean",
          "description": "If true, the button is a toggle and is currently in the active state.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 53,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "pointerDown",
          "type": "boolean",
          "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 60,
              "column": 6
            },
            "end": {
              "line": 64,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "receivedFocusFromKeyboard",
          "type": "boolean",
          "description": "True if the input device that caused the element to receive focus\nwas a keyboard.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 70,
              "column": 6
            },
            "end": {
              "line": 73,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "ariaActiveAttribute",
          "type": "string",
          "description": "The aria attribute to be set if the button is a toggle and in the\nactive state.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 79,
              "column": 6
            },
            "end": {
              "line": 83,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_ariaActiveAttributeChanged\""
            }
          },
          "defaultValue": "\"aria-pressed\"",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_mouseEventRe",
          "type": "object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 106,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "focused",
          "type": "boolean",
          "description": "If true, the element currently has focus.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 25,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "If true, the user cannot interact with this element.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_disabledChanged\""
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_oldTabIndex",
          "type": "(?string | undefined)",
          "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 49,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_boundFocusBlurHandler",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 53,
              "column": 6
            },
            "end": {
              "line": 58,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "__handleEventRetargeting",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 60,
              "column": 6
            },
            "end": {
              "line": 65,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "noink",
          "type": "boolean",
          "description": "If true, the element will not produce a ripple effect when interacted\nwith via the pointer.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\paper-ripple-behavior.html",
            "start": {
              "line": 30,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 55
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_noinkChanged\""
            }
          },
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "_rippleContainer",
          "type": "(Element | undefined)",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\paper-ripple-behavior.html",
            "start": {
              "line": 35,
              "column": 6
            },
            "end": {
              "line": 37,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "name",
          "type": "string",
          "description": "The name of this element.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 40,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "value",
          "type": "string",
          "description": "Overriden from Polymer.IronFormElementBehavior",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-checked-element-behavior\\iron-checked-element-behavior.html",
            "start": {
              "line": 51,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 67
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_valueChanged\""
            }
          },
          "defaultValue": "\"on\"",
          "inheritedFrom": "Polymer.IronCheckedElementBehavior"
        },
        {
          "name": "required",
          "type": "boolean",
          "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 61,
              "column": 6
            },
            "end": {
              "line": 64,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "_parentForm",
          "type": "Object",
          "description": "The form that the element is registered to.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 69,
              "column": 6
            },
            "end": {
              "line": 71,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "validator",
          "type": "string",
          "description": "Name of the validator to use.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 49,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "invalid",
          "type": "boolean",
          "description": "True if the last call to `validate` is invalid.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 56,
              "column": 6
            },
            "end": {
              "line": 62,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_invalidChanged\""
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "checked",
          "type": "boolean",
          "description": "Gets or sets the state, `true` is checked and `false` is unchecked.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-checked-element-behavior\\iron-checked-element-behavior.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_checkedChanged\""
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronCheckedElementBehavior"
        },
        {
          "name": "hostAttributes",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 6
            },
            "end": {
              "line": 97,
              "column": 37
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "registered",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 65,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 74,
              "column": 4
            },
            "end": {
              "line": 80,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 82,
              "column": 4
            },
            "end": {
              "line": 86,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "addOwnKeyBinding",
          "description": "Can be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 337,
              "column": 4
            },
            "end": {
              "line": 341,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventString",
              "type": "string"
            },
            {
              "name": "handlerName",
              "type": "string"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "removeOwnKeyBindings",
          "description": "When called, will remove all imperatively-added key bindings.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 346,
              "column": 4
            },
            "end": {
              "line": 350,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "keyboardEventMatchesKeys",
          "description": "Returns true if a keyboard event matches `eventString`.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 359,
              "column": 4
            },
            "end": {
              "line": 367,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            },
            {
              "name": "eventString",
              "type": "string"
            }
          ],
          "return": {
            "type": "boolean"
          },
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_collectKeyBindings",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 369,
              "column": 4
            },
            "end": {
              "line": 379,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_prepKeyBindings",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 381,
              "column": 4
            },
            "end": {
              "line": 403,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_addKeyBinding",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 405,
              "column": 4
            },
            "end": {
              "line": 412,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventString"
            },
            {
              "name": "handlerName"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_resetKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 414,
              "column": 4
            },
            "end": {
              "line": 420,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_listenKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 422,
              "column": 4
            },
            "end": {
              "line": 435,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_unlistenKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 437,
              "column": 4
            },
            "end": {
              "line": 452,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_onKeyBindingEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 454,
              "column": 4
            },
            "end": {
              "line": 475,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "keyBindings"
            },
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_triggerKeyHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 477,
              "column": 4
            },
            "end": {
              "line": 486,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "keyCombo"
            },
            {
              "name": "handlerName"
            },
            {
              "name": "keyboardEvent"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_tapHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 108,
              "column": 4
            },
            "end": {
              "line": 115,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_focusChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 117,
              "column": 4
            },
            "end": {
              "line": 123,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "focused"
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_detectKeyboardFocus",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 125,
              "column": 4
            },
            "end": {
              "line": 127,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "focused"
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_userActivate",
          "description": "'change' events",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 131,
              "column": 4
            },
            "end": {
              "line": 136,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "active"
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_downHandler",
          "description": "In addition to the functionality provided in `IronButtonState`, ensures\na ripple effect is created when the element is in a `pressed` state.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\paper-ripple-behavior.html",
            "start": {
              "line": 54,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "_upHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 144,
              "column": 4
            },
            "end": {
              "line": 147,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_spaceKeyDownHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 152,
              "column": 4
            },
            "end": {
              "line": 164,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "!KeyboardEvent",
              "description": "."
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_spaceKeyUpHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 169,
              "column": 4
            },
            "end": {
              "line": 182,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "!KeyboardEvent",
              "description": "."
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_asyncClick",
          "description": "event handler to unwind before triggering another event",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 186,
              "column": 4
            },
            "end": {
              "line": 190,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_pressedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 194,
              "column": 4
            },
            "end": {
              "line": 196,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pressed"
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_ariaActiveAttributeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 198,
              "column": 4
            },
            "end": {
              "line": 202,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_activeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 204,
              "column": 4
            },
            "end": {
              "line": 212,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "active"
            },
            {
              "name": "ariaActiveAttribute"
            }
          ],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_controlStateChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 214,
              "column": 4
            },
            "end": {
              "line": 220,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "_changedButtonState",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 224,
              "column": 4
            },
            "end": {
              "line": 228,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 99,
              "column": 6
            },
            "end": {
              "line": 101,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_focusBlurHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_disabledChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 125,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "disabled"
            },
            {
              "name": "old"
            }
          ],
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_changedControlState",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_buttonStateChanged",
          "description": "Synchronizes the element's `active` and `checked` state.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\paper-checked-element-behavior.html",
            "start": {
              "line": 39,
              "column": 4
            },
            "end": {
              "line": 47,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PaperCheckedElementBehavior"
        },
        {
          "name": "ensureRipple",
          "description": "Ensures this element contains a ripple effect. For startup efficiency\nthe ripple effect is dynamically on demand when needed.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\paper-ripple-behavior.html",
            "start": {
              "line": 67,
              "column": 4
            },
            "end": {
              "line": 86,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "optTriggeringEvent",
              "type": "!Event=",
              "description": "(optional) event that triggered the\nripple."
            }
          ],
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "getRipple",
          "description": "Returns the `<paper-ripple>` element used by this element to create\nripple effects. The element's ripple is created on demand, when\nnecessary, and calling this method will force the\nripple to be created.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\paper-ripple-behavior.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 97,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "hasRipple",
          "description": "Returns true if this element currently contains a ripple effect.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\paper-ripple-behavior.html",
            "start": {
              "line": 103,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean"
          },
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "_createRipple",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 103,
              "column": 6
            },
            "end": {
              "line": 106,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_noinkChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\paper-ripple-behavior.html",
            "start": {
              "line": 118,
              "column": 4
            },
            "end": {
              "line": 122,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "noink"
            }
          ],
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "_focusedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\paper-inky-focus-behavior.html",
            "start": {
              "line": 24,
              "column": 4
            },
            "end": {
              "line": 31,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "receivedFocusFromKeyboard"
            }
          ],
          "inheritedFrom": "Polymer.PaperInkyFocusBehavior"
        },
        {
          "name": "_invalidChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "_validator",
          "description": "Recompute this every time it's needed, because we don't know if the\nunderlying IronValidatableBehaviorMeta has changed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 82,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "hasValidator",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "True if the validator `validator` exists."
          },
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "validate",
          "description": "Returns true if the `value` is valid, and updates `invalid`. If you want\nyour element to have custom validation logic, do not override this method;\noverride `_getValidity(value)` instead.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 102,
              "column": 4
            },
            "end": {
              "line": 110,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "Deprecated: The value to be validated. By default,\nit is passed to the validator's `validate()` function, if a validator is set.\nIf this argument is not specified, then the element's `value` property\nis used, if it exists."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if `value` is valid."
          },
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "_getValidity",
          "description": "Returns false if the element is required and not checked, and true\notherwise.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-checked-element-behavior\\iron-checked-element-behavior.html",
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_value",
              "type": "*=",
              "description": "Ignored."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "true if `required` is false or if `checked` is true."
          },
          "inheritedFrom": "Polymer.IronCheckedElementBehavior"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-checked-element-behavior\\iron-checked-element-behavior.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 61,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronCheckedElementBehavior"
        },
        {
          "name": "_requiredChanged",
          "description": "Update the aria-required label when `required` is changed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-checked-element-behavior\\iron-checked-element-behavior.html",
            "start": {
              "line": 76,
              "column": 4
            },
            "end": {
              "line": 82,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronCheckedElementBehavior"
        },
        {
          "name": "_checkedChanged",
          "description": "Synchronizes the element's checked state with its ripple effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\paper-checked-element-behavior.html",
            "start": {
              "line": 25,
              "column": 4
            },
            "end": {
              "line": 34,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PaperCheckedElementBehavior"
        },
        {
          "name": "_valueChanged",
          "description": "Reset value to 'on' if it is set to `undefined`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-checked-element-behavior\\iron-checked-element-behavior.html",
            "start": {
              "line": 95,
              "column": 4
            },
            "end": {
              "line": 99,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronCheckedElementBehavior"
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 92,
          "column": 12
        },
        "end": {
          "line": 107,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "key-event-target",
          "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 277,
              "column": 6
            },
            "end": {
              "line": 282,
              "column": 7
            }
          },
          "metadata": {},
          "type": "?EventTarget",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "stop-keyboard-event-propagation",
          "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
          "sourceRange": {
            "file": "..\\..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 288,
              "column": 6
            },
            "end": {
              "line": 288,
              "column": 65
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "pressed",
          "description": "If true, the user is currently holding down the button.",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 27,
              "column": 6
            },
            "end": {
              "line": 33,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "toggles",
          "description": "If true, the button toggles the active state with each tap or press\nof the spacebar.",
          "sourceRange": {
            "file": "..\\..\\iron-checked-element-behavior\\iron-checked-element-behavior.html",
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 69
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronCheckedElementBehavior"
        },
        {
          "name": "active",
          "description": "If true, the button is a toggle and is currently in the active state.",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 53,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "pointer-down",
          "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 60,
              "column": 6
            },
            "end": {
              "line": 64,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "received-focus-from-keyboard",
          "description": "True if the input device that caused the element to receive focus\nwas a keyboard.",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 70,
              "column": 6
            },
            "end": {
              "line": 73,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "aria-active-attribute",
          "description": "The aria attribute to be set if the button is a toggle and in the\nactive state.",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-button-state.html",
            "start": {
              "line": 79,
              "column": 6
            },
            "end": {
              "line": 83,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "name": "focused",
          "description": "If true, the element currently has focus.",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 25,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "disabled",
          "description": "If true, the user cannot interact with this element.",
          "sourceRange": {
            "file": "..\\..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "noink",
          "description": "If true, the element will not produce a ripple effect when interacted\nwith via the pointer.",
          "sourceRange": {
            "file": "..\\paper-ripple-behavior.html",
            "start": {
              "line": 30,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 55
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "name",
          "description": "The name of this element.",
          "sourceRange": {
            "file": "..\\..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 40,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "value",
          "description": "Overriden from Polymer.IronFormElementBehavior",
          "sourceRange": {
            "file": "..\\..\\iron-checked-element-behavior\\iron-checked-element-behavior.html",
            "start": {
              "line": 51,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 67
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronCheckedElementBehavior"
        },
        {
          "name": "required",
          "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.",
          "sourceRange": {
            "file": "..\\..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 61,
              "column": 6
            },
            "end": {
              "line": 64,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "validator",
          "description": "Name of the validator to use.",
          "sourceRange": {
            "file": "..\\..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 49,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "invalid",
          "description": "True if the last call to `validate` is invalid.",
          "sourceRange": {
            "file": "..\\..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 56,
              "column": 6
            },
            "end": {
              "line": 62,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "checked",
          "description": "Gets or sets the state, `true` is checked and `false` is unchecked.",
          "sourceRange": {
            "file": "..\\..\\iron-checked-element-behavior\\iron-checked-element-behavior.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronCheckedElementBehavior"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "active-changed",
          "description": "Fired when the `active` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronButtonState"
        },
        {
          "type": "CustomEvent",
          "name": "focused-changed",
          "description": "Fired when the `focused` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "type": "CustomEvent",
          "name": "disabled-changed",
          "description": "Fired when the `disabled` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "type": "CustomEvent",
          "name": "iron-form-element-register",
          "description": "iron-form-element-register",
          "metadata": {},
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "iron-form-element-unregister",
          "description": "iron-form-element-unregister",
          "metadata": {},
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "invalid-changed",
          "description": "Fired when the `invalid` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "iron-change",
          "description": "iron-change",
          "metadata": {},
          "inheritedFrom": "Polymer.IronCheckedElementBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "checked-changed",
          "description": "Fired when the `checked` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronCheckedElementBehavior"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "paper-radio-button"
    },
    {
      "description": "This is a lighter version of `paper-icon-button`. Its goal is performance, not\ndeveloper ergonomics, so as a result it has fewer features than `paper-icon-button`\nitself. To use it, you must distribute a `button` containing the `iron-icon` you\nwant to use:\n\n<link rel=\"import\" href=\"../iron-icon/iron-icon.html\">\n<link rel=\"import\" href=\"../paper-icon-button/paper-icon-button-light.html\">\n<link rel=\"import\" href=\"../iron-icons/iron-icons.html\">\n\n<paper-icon-button-light>\n  <button title=\"heart\">\n    <iron-icon icon=\"favorite\"></iron-icon>\n  </button>\n</paper-icon-button-light>\n\nNote that this button is assumed to be distributed at the startup of\n`paper-icon-button-light`. Dynamically adding a `button` to this element is\nnot supported.\n\nThe `title`/`disabled` etc. attributes go on the distributed button, not on the wrapper.\n\nThe following custom properties and mixins are also available for styling:\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-icon-button-light-ripple` | Mixin applied to the paper ripple | `{}`",
      "summary": "",
      "path": "components\\paper-icon-button\\paper-icon-button-light.html",
      "properties": [
        {
          "name": "noink",
          "type": "boolean",
          "description": "If true, the element will not produce a ripple effect when interacted\nwith via the pointer.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\paper-behaviors\\paper-ripple-behavior.html",
            "start": {
              "line": 30,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 55
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_noinkChanged\""
            }
          },
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "_rippleContainer",
          "type": "(Element | undefined)",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\paper-behaviors\\paper-ripple-behavior.html",
            "start": {
              "line": 35,
              "column": 6
            },
            "end": {
              "line": 37,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        }
      ],
      "methods": [
        {
          "name": "_buttonStateChanged",
          "description": "Ensures a `<paper-ripple>` element is available when the element is\nfocused.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\paper-behaviors\\paper-ripple-behavior.html",
            "start": {
              "line": 44,
              "column": 4
            },
            "end": {
              "line": 48,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "_downHandler",
          "description": "In addition to the functionality provided in `IronButtonState`, ensures\na ripple effect is created when the element is in a `pressed` state.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\paper-behaviors\\paper-ripple-behavior.html",
            "start": {
              "line": 54,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "ensureRipple",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 119,
              "column": 6
            },
            "end": {
              "line": 126,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "var_args",
              "type": "...*"
            }
          ]
        },
        {
          "name": "getRipple",
          "description": "Returns the `<paper-ripple>` element used by this element to create\nripple effects. The element's ripple is created on demand, when\nnecessary, and calling this method will force the\nripple to be created.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\paper-behaviors\\paper-ripple-behavior.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 97,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "hasRipple",
          "description": "Returns true if this element currently contains a ripple effect.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\paper-behaviors\\paper-ripple-behavior.html",
            "start": {
              "line": 103,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean"
          },
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "_createRipple",
          "description": "Create the element's ripple effect via creating a `<paper-ripple>`.\nOverride this method to customize the ripple element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\paper-behaviors\\paper-ripple-behavior.html",
            "start": {
              "line": 112,
              "column": 4
            },
            "end": {
              "line": 116,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!PaperRippleElement",
            "desc": "Returns a `<paper-ripple>` element."
          },
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "_noinkChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\paper-behaviors\\paper-ripple-behavior.html",
            "start": {
              "line": 118,
              "column": 4
            },
            "end": {
              "line": 122,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "noink"
            }
          ],
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 6
            },
            "end": {
              "line": 109,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_rippleDown",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 6
            },
            "end": {
              "line": 112,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_rippleUp",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 6
            },
            "end": {
              "line": 115,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/paper-icon-button-light.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 87,
          "column": 12
        },
        "end": {
          "line": 127,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "noink",
          "description": "If true, the element will not produce a ripple effect when interacted\nwith via the pointer.",
          "sourceRange": {
            "file": "..\\paper-behaviors\\paper-ripple-behavior.html",
            "start": {
              "line": 30,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 55
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.PaperRippleBehavior"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "components/paper-icon-button/paper-icon-button-light.html",
            "start": {
              "line": 83,
              "column": 4
            },
            "end": {
              "line": 83,
              "column": 17
            }
          }
        }
      ],
      "tagname": "paper-icon-button-light"
    },
    {
      "description": "`<paper-textarea>` is a multi-line text field with Material Design styling.\n\n    <paper-textarea label=\"Textarea label\"></paper-textarea>\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Validation\n\nCurrently only `required` and `maxlength` validation is supported.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.",
      "summary": "",
      "path": "components\\paper-input\\paper-textarea.html",
      "properties": [
        {
          "name": "focused",
          "type": "boolean",
          "description": "If true, the element currently has focus.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 25,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "Set to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `<paper-input-container>`'s and the input's `disabled` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 68,
              "column": 6
            },
            "end": {
              "line": 71,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_oldTabIndex",
          "type": "(?string | undefined)",
          "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 49,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_boundFocusBlurHandler",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 53,
              "column": 6
            },
            "end": {
              "line": 58,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "__handleEventRetargeting",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 60,
              "column": 6
            },
            "end": {
              "line": 65,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "keyEventTarget",
          "type": "?EventTarget",
          "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 277,
              "column": 6
            },
            "end": {
              "line": 282,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "stopKeyboardEventPropagation",
          "type": "boolean",
          "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 288,
              "column": 6
            },
            "end": {
              "line": 288,
              "column": 65
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_boundKeyHandlers",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 290,
              "column": 6
            },
            "end": {
              "line": 295,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_imperativeKeyBindings",
          "type": "Object",
          "description": "own properties of everything on the \"prototype\".",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 299,
              "column": 6
            },
            "end": {
              "line": 304,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "keyBindings",
          "type": "!Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 382,
              "column": 4
            },
            "end": {
              "line": 384,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "label",
          "type": "string",
          "description": "The label for this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\n`<label>`'s content and `hidden` property, e.g.\n`<label hidden$=\"[[!label]]\">[[label]]</label>` in your `template`",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 50,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "value",
          "type": "(string | number | null | undefined)",
          "description": "The value for this element.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "invalid",
          "type": "boolean",
          "description": "Returns true if the value is invalid. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to both the\n`<paper-input-container>`'s and the input's `invalid` property.\n\nIf `autoValidate` is true, the `invalid` attribute is managed automatically,\nwhich can clobber attempts to manage it manually.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 81,
              "column": 6
            },
            "end": {
              "line": 85,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "allowedPattern",
          "type": "string",
          "description": "Set this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `allowedPattern`\nproperty.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 93,
              "column": 6
            },
            "end": {
              "line": 95,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "type",
          "type": "string",
          "description": "The type of the input. The supported types are the\n[native input's types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_<input>_types).\nIf you're using PaperInputBehavior to implement your own paper-input-like element,\nbind this to the (Polymer 1) `<input is=\"iron-input\">`'s or (Polymer 2)\n`<iron-input>`'s `type` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 104,
              "column": 6
            },
            "end": {
              "line": 106,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "list",
          "type": "string",
          "description": "The datalist of the input (if any). This should match the id of an existing `<datalist>`.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `list` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 113,
              "column": 6
            },
            "end": {
              "line": 115,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "pattern",
          "type": "string",
          "description": "A pattern to validate the `input` with. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `pattern` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 122,
              "column": 6
            },
            "end": {
              "line": 124,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "required",
          "type": "boolean",
          "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 61,
              "column": 6
            },
            "end": {
              "line": 64,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "errorMessage",
          "type": "string",
          "description": "The error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `<paper-input-error>`'s content, if using.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 141,
              "column": 6
            },
            "end": {
              "line": 143,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "charCounter",
          "type": "boolean",
          "description": "Set to true to show a character counter.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 148,
              "column": 6
            },
            "end": {
              "line": 151,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "noLabelFloat",
          "type": "boolean",
          "description": "Set to true to disable the floating label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<paper-input-container>`'s `noLabelFloat` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 158,
              "column": 6
            },
            "end": {
              "line": 161,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "alwaysFloatLabel",
          "type": "boolean",
          "description": "Set to true to always float the label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<paper-input-container>`'s `alwaysFloatLabel` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 168,
              "column": 6
            },
            "end": {
              "line": 171,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "autoValidate",
          "type": "boolean",
          "description": "Set to true to auto-validate the input value. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<paper-input-container>`'s `autoValidate` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 178,
              "column": 6
            },
            "end": {
              "line": 181,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "validator",
          "type": "string",
          "description": "Name of the validator to use. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `validator` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 188,
              "column": 6
            },
            "end": {
              "line": 190,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "autocomplete",
          "type": "string",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocomplete` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 198,
              "column": 6
            },
            "end": {
              "line": 201,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"off\"",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autofocus` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 207,
              "column": 6
            },
            "end": {
              "line": 210,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_autofocusChanged\""
            }
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "inputmode",
          "type": "string",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `inputmode` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 216,
              "column": 6
            },
            "end": {
              "line": 218,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "minlength",
          "type": "number",
          "description": "The minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `minlength` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 225,
              "column": 6
            },
            "end": {
              "line": 227,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "maxlength",
          "type": "number",
          "description": "The maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `maxlength` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 234,
              "column": 6
            },
            "end": {
              "line": 236,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "min",
          "type": "string",
          "description": "The minimum (numeric or date-time) input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `min` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 243,
              "column": 6
            },
            "end": {
              "line": 245,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "max",
          "type": "string",
          "description": "The maximum (numeric or date-time) input value.\nCan be a String (e.g. `\"2000-01-01\"`) or a Number (e.g. `2`).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `max` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 253,
              "column": 6
            },
            "end": {
              "line": 255,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "step",
          "type": "string",
          "description": "Limits the numeric or date-time increments.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `step` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 262,
              "column": 6
            },
            "end": {
              "line": 264,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "name",
          "type": "string",
          "description": "The name of this element.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 40,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "placeholder",
          "type": "string",
          "description": "A placeholder string in addition to the label. If this is set, the label will always float.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 277,
              "column": 6
            },
            "end": {
              "line": 281,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "readonly",
          "type": "boolean",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `readonly` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 287,
              "column": 6
            },
            "end": {
              "line": 290,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "size",
          "type": "number",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `size` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 296,
              "column": 6
            },
            "end": {
              "line": 298,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "autocapitalize",
          "type": "string",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocapitalize` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 306,
              "column": 6
            },
            "end": {
              "line": 309,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"none\"",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "autocorrect",
          "type": "string",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocorrect` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 315,
              "column": 6
            },
            "end": {
              "line": 318,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"off\"",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "autosave",
          "type": "string",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autosave` property,\nused with type=search.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 325,
              "column": 6
            },
            "end": {
              "line": 327,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "results",
          "type": "number",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `results` property,\nused with type=search.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 334,
              "column": 6
            },
            "end": {
              "line": 336,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "accept",
          "type": "string",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `accept` property,\nused with type=file.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 343,
              "column": 6
            },
            "end": {
              "line": 345,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "multiple",
          "type": "boolean",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the`<input is=\"iron-input\">`'s `multiple` property,\nused with type=file.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 352,
              "column": 6
            },
            "end": {
              "line": 354,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_ariaDescribedBy",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 6
            },
            "end": {
              "line": 111,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_ariaDescribedByChanged\""
            }
          }
        },
        {
          "name": "_ariaLabelledBy",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 103,
              "column": 6
            },
            "end": {
              "line": 106,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_ariaLabelledByChanged\""
            }
          }
        },
        {
          "name": "_inputId",
          "type": "string",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 369,
              "column": 6
            },
            "end": {
              "line": 372,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "hostAttributes",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 387,
              "column": 4
            },
            "end": {
              "line": 389,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_parentForm",
          "type": "Object",
          "description": "The form that the element is registered to.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 69,
              "column": 6
            },
            "end": {
              "line": 71,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "rows",
          "type": "number",
          "description": "The initial number of rows.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 6
            },
            "end": {
              "line": 123,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1"
        },
        {
          "name": "maxRows",
          "type": "number",
          "description": "The maximum number of rows this element can grow to until it\nscrolls. 0 means no maximum.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 133,
              "column": 6
            },
            "end": {
              "line": 136,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "selectionStart",
          "type": "Function",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 142,
              "column": 4
            },
            "end": {
              "line": 144,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "selectionEnd",
          "type": "Function",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 152,
              "column": 4
            },
            "end": {
              "line": 154,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_focusableElement",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 167,
              "column": 4
            },
            "end": {
              "line": 169,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 75,
              "column": 4
            },
            "end": {
              "line": 78,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_focusBlurHandler",
          "description": "Forward focus to inputElement. Overriden from IronControlState.",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 468,
              "column": 4
            },
            "end": {
              "line": 475,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_disabledChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 125,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "disabled"
            },
            {
              "name": "old"
            }
          ],
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "_changedControlState",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "registered",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 317,
              "column": 4
            },
            "end": {
              "line": 319,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 74,
              "column": 4
            },
            "end": {
              "line": 80,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 82,
              "column": 4
            },
            "end": {
              "line": 86,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "addOwnKeyBinding",
          "description": "Can be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 337,
              "column": 4
            },
            "end": {
              "line": 341,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventString",
              "type": "string"
            },
            {
              "name": "handlerName",
              "type": "string"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "removeOwnKeyBindings",
          "description": "When called, will remove all imperatively-added key bindings.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 346,
              "column": 4
            },
            "end": {
              "line": 350,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "keyboardEventMatchesKeys",
          "description": "Returns true if a keyboard event matches `eventString`.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 359,
              "column": 4
            },
            "end": {
              "line": 367,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            },
            {
              "name": "eventString",
              "type": "string"
            }
          ],
          "return": {
            "type": "boolean"
          },
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_collectKeyBindings",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 369,
              "column": 4
            },
            "end": {
              "line": 379,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_prepKeyBindings",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 381,
              "column": 4
            },
            "end": {
              "line": 403,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_addKeyBinding",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 405,
              "column": 4
            },
            "end": {
              "line": 412,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventString"
            },
            {
              "name": "handlerName"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_resetKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 414,
              "column": 4
            },
            "end": {
              "line": 420,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_listenKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 422,
              "column": 4
            },
            "end": {
              "line": 435,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_unlistenKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 437,
              "column": 4
            },
            "end": {
              "line": 452,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_onKeyBindingEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 454,
              "column": 4
            },
            "end": {
              "line": 475,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "keyBindings"
            },
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "_triggerKeyHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 477,
              "column": 4
            },
            "end": {
              "line": 486,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "keyCombo"
            },
            {
              "name": "handlerName"
            },
            {
              "name": "keyboardEvent"
            }
          ],
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "inputElement",
          "description": "Returns a reference to the input element.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 395,
              "column": 4
            },
            "end": {
              "line": 407,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!HTMLElement"
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_focusableElement",
          "description": "Returns a reference to the focusable element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 413,
              "column": 4
            },
            "end": {
              "line": 415,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!HTMLElement"
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 417,
              "column": 4
            },
            "end": {
              "line": 422,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_appendStringWithSpace",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 436,
              "column": 4
            },
            "end": {
              "line": 443,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str"
            },
            {
              "name": "more"
            }
          ],
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_onAddonAttached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 445,
              "column": 4
            },
            "end": {
              "line": 454,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "validate",
          "description": "Validates the input element and sets an error style if needed.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 461,
              "column": 4
            },
            "end": {
              "line": 463,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean"
          },
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_onShiftTabDown",
          "description": "Handler that is called when a shift+tab keypress is detected by the menu.",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 482,
              "column": 4
            },
            "end": {
              "line": 490,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "CustomEvent",
              "description": "A key combination event."
            }
          ],
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_handleAutoValidate",
          "description": "If `autoValidate` is true, then validates the element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 495,
              "column": 4
            },
            "end": {
              "line": 498,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "updateValueAndPreserveCaret",
          "description": "Restores the cursor to its original position after updating the value.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 504,
              "column": 4
            },
            "end": {
              "line": 520,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue",
              "type": "string",
              "description": "The value that should be saved."
            }
          ],
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_computeAlwaysFloatLabel",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 522,
              "column": 4
            },
            "end": {
              "line": 524,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "alwaysFloatLabel"
            },
            {
              "name": "placeholder"
            }
          ],
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_updateAriaLabelledBy",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 526,
              "column": 4
            },
            "end": {
              "line": 540,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_generateInputId",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 542,
              "column": 4
            },
            "end": {
              "line": 546,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_onChange",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 548,
              "column": 4
            },
            "end": {
              "line": 559,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_autofocusChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 561,
              "column": 4
            },
            "end": {
              "line": 586,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "_ariaLabelledByChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 159,
              "column": 4
            },
            "end": {
              "line": 161,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ariaLabelledBy"
            }
          ]
        },
        {
          "name": "_ariaDescribedByChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 4
            },
            "end": {
              "line": 165,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ariaDescribedBy"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 94,
          "column": 10
        },
        "end": {
          "line": 170,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "focused",
          "description": "If true, the element currently has focus.",
          "sourceRange": {
            "file": "..\\iron-behaviors\\iron-control-state.html",
            "start": {
              "line": 25,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "name": "disabled",
          "description": "Set to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `<paper-input-container>`'s and the input's `disabled` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 68,
              "column": 6
            },
            "end": {
              "line": 71,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "key-event-target",
          "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 277,
              "column": 6
            },
            "end": {
              "line": 282,
              "column": 7
            }
          },
          "metadata": {},
          "type": "?EventTarget",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "stop-keyboard-event-propagation",
          "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
          "sourceRange": {
            "file": "..\\iron-a11y-keys-behavior\\iron-a11y-keys-behavior.html",
            "start": {
              "line": 288,
              "column": 6
            },
            "end": {
              "line": 288,
              "column": 65
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronA11yKeysBehavior"
        },
        {
          "name": "label",
          "description": "The label for this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\n`<label>`'s content and `hidden` property, e.g.\n`<label hidden$=\"[[!label]]\">[[label]]</label>` in your `template`",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 50,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "value",
          "description": "The value for this element.",
          "sourceRange": {
            "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {},
          "type": "(string | number | null | undefined)",
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "invalid",
          "description": "Returns true if the value is invalid. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to both the\n`<paper-input-container>`'s and the input's `invalid` property.\n\nIf `autoValidate` is true, the `invalid` attribute is managed automatically,\nwhich can clobber attempts to manage it manually.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 81,
              "column": 6
            },
            "end": {
              "line": 85,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "allowed-pattern",
          "description": "Set this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `allowedPattern`\nproperty.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 93,
              "column": 6
            },
            "end": {
              "line": 95,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "type",
          "description": "The type of the input. The supported types are the\n[native input's types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_<input>_types).\nIf you're using PaperInputBehavior to implement your own paper-input-like element,\nbind this to the (Polymer 1) `<input is=\"iron-input\">`'s or (Polymer 2)\n`<iron-input>`'s `type` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 104,
              "column": 6
            },
            "end": {
              "line": 106,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "list",
          "description": "The datalist of the input (if any). This should match the id of an existing `<datalist>`.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `list` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 113,
              "column": 6
            },
            "end": {
              "line": 115,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "pattern",
          "description": "A pattern to validate the `input` with. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `pattern` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 122,
              "column": 6
            },
            "end": {
              "line": 124,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "required",
          "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.",
          "sourceRange": {
            "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 61,
              "column": 6
            },
            "end": {
              "line": 64,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "error-message",
          "description": "The error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `<paper-input-error>`'s content, if using.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 141,
              "column": 6
            },
            "end": {
              "line": 143,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "char-counter",
          "description": "Set to true to show a character counter.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 148,
              "column": 6
            },
            "end": {
              "line": 151,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "no-label-float",
          "description": "Set to true to disable the floating label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<paper-input-container>`'s `noLabelFloat` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 158,
              "column": 6
            },
            "end": {
              "line": 161,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "always-float-label",
          "description": "Set to true to always float the label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<paper-input-container>`'s `alwaysFloatLabel` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 168,
              "column": 6
            },
            "end": {
              "line": 171,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "auto-validate",
          "description": "Set to true to auto-validate the input value. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<paper-input-container>`'s `autoValidate` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 178,
              "column": 6
            },
            "end": {
              "line": 181,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "validator",
          "description": "Name of the validator to use. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `validator` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 188,
              "column": 6
            },
            "end": {
              "line": 190,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "autocomplete",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocomplete` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 198,
              "column": 6
            },
            "end": {
              "line": 201,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "autofocus",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autofocus` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 207,
              "column": 6
            },
            "end": {
              "line": 210,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "inputmode",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `inputmode` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 216,
              "column": 6
            },
            "end": {
              "line": 218,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "minlength",
          "description": "The minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `minlength` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 225,
              "column": 6
            },
            "end": {
              "line": 227,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "maxlength",
          "description": "The maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `maxlength` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 234,
              "column": 6
            },
            "end": {
              "line": 236,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "min",
          "description": "The minimum (numeric or date-time) input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `min` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 243,
              "column": 6
            },
            "end": {
              "line": 245,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "max",
          "description": "The maximum (numeric or date-time) input value.\nCan be a String (e.g. `\"2000-01-01\"`) or a Number (e.g. `2`).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `max` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 253,
              "column": 6
            },
            "end": {
              "line": 255,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "step",
          "description": "Limits the numeric or date-time increments.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `step` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 262,
              "column": 6
            },
            "end": {
              "line": 264,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "name",
          "description": "The name of this element.",
          "sourceRange": {
            "file": "..\\iron-form-element-behavior\\iron-form-element-behavior.html",
            "start": {
              "line": 40,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "placeholder",
          "description": "A placeholder string in addition to the label. If this is set, the label will always float.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 277,
              "column": 6
            },
            "end": {
              "line": 281,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "readonly",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `readonly` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 287,
              "column": 6
            },
            "end": {
              "line": 290,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "size",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `size` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 296,
              "column": 6
            },
            "end": {
              "line": 298,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "autocapitalize",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocapitalize` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 306,
              "column": 6
            },
            "end": {
              "line": 309,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "autocorrect",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocorrect` property.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 315,
              "column": 6
            },
            "end": {
              "line": 318,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "autosave",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autosave` property,\nused with type=search.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 325,
              "column": 6
            },
            "end": {
              "line": 327,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "results",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `results` property,\nused with type=search.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 334,
              "column": 6
            },
            "end": {
              "line": 336,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "accept",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `accept` property,\nused with type=file.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 343,
              "column": 6
            },
            "end": {
              "line": 345,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "multiple",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the`<input is=\"iron-input\">`'s `multiple` property,\nused with type=file.",
          "sourceRange": {
            "file": "paper-input-behavior.html",
            "start": {
              "line": 352,
              "column": 6
            },
            "end": {
              "line": 354,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "name": "rows",
          "description": "The initial number of rows.",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 6
            },
            "end": {
              "line": 123,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "max-rows",
          "description": "The maximum number of rows this element can grow to until it\nscrolls. 0 means no maximum.",
          "sourceRange": {
            "start": {
              "line": 133,
              "column": 6
            },
            "end": {
              "line": 136,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "focused-changed",
          "description": "Fired when the `focused` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "type": "CustomEvent",
          "name": "disabled-changed",
          "description": "Fired when the `disabled` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronControlState"
        },
        {
          "type": "CustomEvent",
          "name": "change",
          "description": "change",
          "metadata": {},
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "invalid-changed",
          "description": "Fired when the `invalid` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.PaperInputBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "iron-form-element-register",
          "description": "iron-form-element-register",
          "metadata": {},
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "iron-form-element-unregister",
          "description": "iron-form-element-unregister",
          "metadata": {},
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "paper-textarea"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\paper-input\\demo\\ssn-validator.html",
      "properties": [],
      "methods": [
        {
          "name": "validate",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 21,
              "column": 4
            },
            "end": {
              "line": 24,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 14,
          "column": 10
        },
        "end": {
          "line": 25,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "ssn-validator"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\paper-input\\demo\\ssn-input.html",
      "properties": [
        {
          "name": "validator",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 104,
              "column": 8
            },
            "end": {
              "line": 107,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"ssn-validator\""
        },
        {
          "name": "invalid",
          "type": "boolean",
          "description": "True if the last call to `validate` is invalid.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 56,
              "column": 6
            },
            "end": {
              "line": 62,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_invalidChanged\""
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "value",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 8
            },
            "end": {
              "line": 87,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "_ssn1",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 8
            },
            "end": {
              "line": 92,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\""
        },
        {
          "name": "_ssn2",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 8
            },
            "end": {
              "line": 97,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\""
        },
        {
          "name": "_ssn3",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 99,
              "column": 8
            },
            "end": {
              "line": 102,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\""
        }
      ],
      "methods": [
        {
          "name": "registered",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 65,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "_invalidChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "_validator",
          "description": "Recompute this every time it's needed, because we don't know if the\nunderlying IronValidatableBehaviorMeta has changed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 82,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "hasValidator",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "True if the validator `validator` exists."
          },
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "validate",
          "description": "Returns true if the `value` is valid, and updates `invalid`. If you want\nyour element to have custom validation logic, do not override this method;\noverride `_getValidity(value)` instead.",
          "privacy": "public",
          "sourceRange": {
            "file": "..\\..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 102,
              "column": 4
            },
            "end": {
              "line": 110,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "Deprecated: The value to be validated. By default,\nit is passed to the validator's `validate()` function, if a validator is set.\nIf this argument is not specified, then the element's `value` property\nis used, if it exists."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if `value` is valid."
          },
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "_getValidity",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "..\\..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 122,
              "column": 4
            },
            "end": {
              "line": 127,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "_computeValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 6
            },
            "end": {
              "line": 116,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ssn1"
            },
            {
              "name": "ssn2"
            },
            {
              "name": "ssn3"
            }
          ]
        },
        {
          "name": "beforeRegister",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 6
            },
            "end": {
              "line": 124,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 76,
          "column": 12
        },
        "end": {
          "line": 125,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "validator",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 104,
              "column": 8
            },
            "end": {
              "line": 107,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "invalid",
          "description": "True if the last call to `validate` is invalid.",
          "sourceRange": {
            "file": "..\\..\\iron-validatable-behavior\\iron-validatable-behavior.html",
            "start": {
              "line": 56,
              "column": 6
            },
            "end": {
              "line": 62,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "value",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 8
            },
            "end": {
              "line": 87,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "invalid-changed",
          "description": "Fired when the `invalid` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "ssn-input"
    },
    {
      "description": "The `<paper-styles>` component provides simple ways to use Material Design CSS styles\nin your application. The following imports are available:\n\n1. [color.html](https://github.com/PolymerElements/paper-styles/blob/master/color.html):\na complete list of the colors defined in the Material Design [palette](https://www.google.com/design/spec/style/color.html)\n\n2. [default-theme.html](https://github.com/PolymerElements/paper-styles/blob/master/default-theme.html): text,\nbackground and accent colors that match the default Material Design theme\n\n3. [shadow.html](https://github.com/PolymerElements/paper-styles/blob/master/shadow.html): Material Design\n[elevation](https://www.google.com/design/spec/what-is-material/elevation-shadows.html) and shadow styles\n\n4. [typography.html](https://github.com/PolymerElements/paper-styles/blob/master/typography.html):\nMaterial Design [font](http://www.google.com/design/spec/style/typography.html#typography-styles) styles and sizes\n\n5. [demo-pages.html](https://github.com/PolymerElements/paper-styles/blob/master/demo-pages.html): generic styles\nused in the PolymerElements demo pages\n\nWe recommend importing each of these individual files, and using the style mixins\navailable in each ones, rather than the aggregated `paper-styles.html` as a whole.",
      "summary": "",
      "path": "components\\paper-styles\\paper-styles.html",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": "demo"
        },
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 35,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "paper-styles"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\prism-element\\demo\\prism-demo.html",
      "properties": [
        {
          "name": "code",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 8
            },
            "end": {
              "line": 37,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_render\""
            }
          }
        },
        {
          "name": "lang",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 8
            },
            "end": {
              "line": 41,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 6
            },
            "end": {
              "line": 46,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_render",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 50,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "highlight",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 6
            },
            "end": {
              "line": 54,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "code"
            },
            {
              "name": "lang"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 30,
          "column": 12
        },
        "end": {
          "line": 55,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "code",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 8
            },
            "end": {
              "line": 37,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "lang",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 8
            },
            "end": {
              "line": 41,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "prism-demo"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\shadycss\\examples\\custom-style-element.js",
      "properties": [],
      "methods": [
        {
          "name": "getStyle",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 4
            },
            "end": {
              "line": 36,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 25,
          "column": 2
        },
        "end": {
          "line": 37,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "CustomStyle",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "custom-style"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\webcomponentsjs\\tests\\imports\\a1-define.html",
      "properties": [],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 15,
              "column": 4
            },
            "end": {
              "line": 18,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 14,
          "column": 2
        },
        "end": {
          "line": 19,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "A1",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "a-1"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\webcomponentsjs\\tests\\imports\\a1-define.html",
      "properties": [],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 24,
              "column": 4
            },
            "end": {
              "line": 26,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 23,
          "column": 2
        },
        "end": {
          "line": 27,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLStyleElement",
      "name": "SpecialStyle",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "special-style"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\webcomponentsjs\\tests\\ce-upgrade-order.html",
      "properties": [],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 10
            },
            "end": {
              "line": 27,
              "column": 11
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 24,
          "column": 8
        },
        "end": {
          "line": 28,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "XFoo",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "x-foo"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\webcomponentsjs\\tests\\ce-upgradedocumenttree.html",
      "properties": [],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 10
            },
            "end": {
              "line": 34,
              "column": 11
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 31,
          "column": 8
        },
        "end": {
          "line": 35,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "XTest",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "x-test"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\webcomponentsjs\\tests\\imports\\simple-element.html",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 25,
          "column": 2
        },
        "end": {
          "line": 38,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "SimpleElement",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "simple-element"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\webcomponentsjs\\tests\\load.html",
      "properties": [],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 10
            },
            "end": {
              "line": 34,
              "column": 11
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 31,
          "column": 8
        },
        "end": {
          "line": 35,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "MyElement",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "my-element"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\webcomponentsjs\\tests\\smoke.html",
      "properties": [],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 23,
              "column": 10
            },
            "end": {
              "line": 25,
              "column": 11
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 22,
          "column": 8
        },
        "end": {
          "line": 26,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "XFoo",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "x-foo"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\webcomponentsjs\\tests\\smoke.html",
      "properties": [],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 10
            },
            "end": {
              "line": 34,
              "column": 11
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 31,
          "column": 8
        },
        "end": {
          "line": 35,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "XZot",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "x-zot"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\webcomponentsjs\\tests\\template-and-CE.html",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 32,
          "column": 6
        },
        "end": {
          "line": 38,
          "column": 7
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "XChild",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "x-child"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\webcomponentsjs\\tests\\template-and-CE.html",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 40,
          "column": 6
        },
        "end": {
          "line": 50,
          "column": 7
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "XAfter",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "x-after"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\webcomponentsjs\\tests\\imports\\element-import.html",
      "properties": [],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 13,
              "column": 4
            },
            "end": {
              "line": 15,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 12,
          "column": 2
        },
        "end": {
          "line": 16,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "XFoo",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "x-foo"
    },
    {
      "description": "### General Info `<simple-search>`\n`<simple-search>` shows a search input area on your page.\nTo use, insert `<simple-search>` in the body:\n    <body>\n      <simple-search></simple-search>\nExample:\nTo show the search\n```\n    <body>\n      <simple-search static-open></simple-search>\n```\n### Documentation Page\nhttps://agnieszka-miszkurka.github.io/simple-search-polymer/\n### Demo Page\nhttps://agnieszka-miszkurka.github.io/simple-search-polymer/demo/\n### Styling\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--search-primary-color` | The color of the buttons | `#303F9F`",
      "summary": "",
      "path": "simple-search.html",
      "properties": [
        {
          "name": "isOpen",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 16
            },
            "end": {
              "line": 85,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_isOpenChanged\""
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "staticOpen",
          "type": "boolean",
          "description": "If this is true the search area will always show. Can be set with the static-open attribute.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 16
            },
            "end": {
              "line": 90,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_toggleClass",
          "type": "string",
          "description": "The class once the state isOpen is set to true.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 92,
              "column": 16
            },
            "end": {
              "line": 95,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\""
        }
      ],
      "methods": [
        {
          "name": "_toggle",
          "description": "Toggles the search area",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 12
            },
            "end": {
              "line": 108,
              "column": 13
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void",
            "desc": "No return parameter."
          }
        },
        {
          "name": "_isOpenChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 109,
              "column": 12
            },
            "end": {
              "line": 114,
              "column": 13
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "searchAction",
          "description": "Fires the search event",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 12
            },
            "end": {
              "line": 122,
              "column": 13
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void",
            "desc": "No return parameter."
          }
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 12
            },
            "end": {
              "line": 125,
              "column": 13
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 78,
          "column": 16
        },
        "end": {
          "line": 126,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "is-open",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 16
            },
            "end": {
              "line": 85,
              "column": 17
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "static-open",
          "description": "If this is true the search area will always show. Can be set with the static-open attribute.",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 16
            },
            "end": {
              "line": 90,
              "column": 17
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "simple-search"
    }
  ],
  "classes": [
    {
      "description": "Event API wrapper class returned from `Polymer.dom.(target)` when\n`target` is an `Event`.",
      "summary": "",
      "path": "components\\polymer\\lib\\legacy\\polymer.dom.html",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 259,
          "column": 2
        },
        "end": {
          "line": 289,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "EventApi"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\polymer\\lib\\legacy\\class.html",
      "properties": [],
      "methods": [
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 173,
              "column": 8
            },
            "end": {
              "line": 178,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_registered",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 183,
              "column": 8
            },
            "end": {
              "line": 198,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_applyListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 203,
              "column": 8
            },
            "end": {
              "line": 210,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_ensureAttributes",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 218,
              "column": 8
            },
            "end": {
              "line": 225,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 230,
              "column": 8
            },
            "end": {
              "line": 235,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 240,
              "column": 8
            },
            "end": {
              "line": 245,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 250,
              "column": 8
            },
            "end": {
              "line": 255,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "attributeChanged",
          "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 266,
              "column": 8
            },
            "end": {
              "line": 271,
              "column": 8
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of attribute that changed"
            },
            {
              "name": "old",
              "type": "?string",
              "description": "Old attribute value"
            },
            {
              "name": "value",
              "type": "?string",
              "description": "New attribute value"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 144,
          "column": 6
        },
        "end": {
          "line": 272,
          "column": 7
        }
      },
      "privacy": "public",
      "superclass": "Base",
      "name": "PolymerGenerated"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\polymer\\lib\\utils\\templatize.html",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 60,
          "column": 41
        },
        "end": {
          "line": 60,
          "column": 49
        }
      },
      "privacy": "public"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\polymer\\lib\\utils\\templatize.html",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 296,
          "column": 18
        },
        "end": {
          "line": 296,
          "column": 40
        }
      },
      "privacy": "private",
      "name": "klass"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\polymer\\lib\\utils\\templatize.html",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 314,
          "column": 12
        },
        "end": {
          "line": 314,
          "column": 53
        }
      },
      "privacy": "public",
      "superclass": "base",
      "name": "templateInfo.templatizeTemplateClass"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\polymer\\lib\\utils\\templatize.html",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 520,
          "column": 20
        },
        "end": {
          "line": 520,
          "column": 63
        }
      },
      "privacy": "private",
      "superclass": "baseClass",
      "name": "klass"
    },
    {
      "description": "Class representing a static string value which can be used to filter\nstrings by asseting that they have been created via this class. The\n`value` property returns the string passed to the constructor.",
      "summary": "",
      "path": "components\\polymer\\lib\\utils\\html-tag.html",
      "properties": [
        {
          "name": "value",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 22,
              "column": 8
            },
            "end": {
              "line": 22,
              "column": 18
            }
          },
          "metadata": {},
          "defaultValue": "string.toString()"
        }
      ],
      "methods": [
        {
          "name": "toString",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 27,
              "column": 6
            },
            "end": {
              "line": 29,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "LiteralString string value"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 19,
          "column": 4
        },
        "end": {
          "line": 30,
          "column": 5
        }
      },
      "privacy": "public",
      "name": "LiteralString"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\shadycss\\src\\css-parse.js",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 18,
          "column": 0
        },
        "end": {
          "line": 45,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "StyleNode"
    },
    {
      "description": "--foo: {border: 2px} -> {properties: {(--foo, ['border'])}, dependants: {'element-name': proto}}",
      "summary": "",
      "path": "components\\shadycss\\src\\apply-shim.js",
      "properties": [
        {
          "name": "_map",
          "type": "!Object.<string, !MixinMapEntry>",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 4
            },
            "end": {
              "line": 108,
              "column": 13
            }
          },
          "metadata": {},
          "defaultValue": "{}"
        }
      ],
      "methods": [
        {
          "name": "set",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 2
            },
            "end": {
              "line": 120,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "props",
              "type": "!PropertyEntry"
            }
          ]
        },
        {
          "name": "get",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 2
            },
            "end": {
              "line": 128,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string"
            }
          ],
          "return": {
            "type": "MixinMapEntry"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 105,
          "column": 0
        },
        "end": {
          "line": 129,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "MixinMap"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\shadycss\\src\\apply-shim.js",
      "properties": [
        {
          "name": "_currentElement",
          "type": "?string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 141,
              "column": 4
            },
            "end": {
              "line": 141,
              "column": 24
            }
          },
          "metadata": {},
          "defaultValue": "null"
        },
        {
          "name": "_measureElement",
          "type": "HTMLMetaElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 4
            },
            "end": {
              "line": 143,
              "column": 24
            }
          },
          "metadata": {},
          "defaultValue": "null"
        }
      ],
      "methods": [
        {
          "name": "detectMixin",
          "description": "return true if `cssText` contains a mixin definition or consumption",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 2
            },
            "end": {
              "line": 153,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cssText",
              "type": "string"
            }
          ],
          "return": {
            "type": "boolean"
          }
        },
        {
          "name": "gatherStyles",
          "description": "Gather styles into one style for easier processing",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 160,
              "column": 2
            },
            "end": {
              "line": 169,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement"
            }
          ],
          "return": {
            "type": "HTMLStyleElement"
          }
        },
        {
          "name": "transformTemplate",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 182,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement"
            },
            {
              "name": "elementName",
              "type": "string"
            }
          ],
          "return": {
            "type": "StyleNode"
          }
        },
        {
          "name": "transformStyle",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 2
            },
            "end": {
              "line": 193,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "style",
              "type": "!HTMLStyleElement"
            },
            {
              "name": "elementName",
              "type": "string",
              "defaultValue": "''"
            }
          ],
          "return": {
            "type": "StyleNode"
          }
        },
        {
          "name": "transformCustomStyle",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 2
            },
            "end": {
              "line": 208,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "style",
              "type": "!HTMLStyleElement"
            }
          ],
          "return": {
            "type": "StyleNode"
          }
        },
        {
          "name": "transformRules",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 213,
              "column": 2
            },
            "end": {
              "line": 219,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rules",
              "type": "StyleNode"
            },
            {
              "name": "elementName",
              "type": "string"
            }
          ]
        },
        {
          "name": "transformRule",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 223,
              "column": 2
            },
            "end": {
              "line": 231,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rule",
              "type": "!StyleNode"
            }
          ]
        },
        {
          "name": "transformCssText",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 236,
              "column": 2
            },
            "end": {
              "line": 242,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cssText",
              "type": "string"
            }
          ],
          "return": {
            "type": "string"
          }
        },
        {
          "name": "_getInitialValueForProperty",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 247,
              "column": 2
            },
            "end": {
              "line": 255,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string"
            }
          ],
          "return": {
            "type": "string"
          }
        },
        {
          "name": "_consumeCssProperties",
          "description": "replace mixin consumption with variable consumption",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 261,
              "column": 2
            },
            "end": {
              "line": 284,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text",
              "type": "string"
            }
          ],
          "return": {
            "type": "string"
          }
        },
        {
          "name": "_atApplyToCssProperties",
          "description": "produce variable consumption at the site of mixin consumption\n`@apply` --foo; -> for all props (${propname}: var(--foo_-_${propname}, ${fallback[propname]}}))\nExample:\n border: var(--foo_-_border); padding: var(--foo_-_padding, 2px)",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 295,
              "column": 2
            },
            "end": {
              "line": 325,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mixinName",
              "type": "string"
            },
            {
              "name": "fallbacks",
              "type": "Object"
            }
          ],
          "return": {
            "type": "string"
          }
        },
        {
          "name": "_replaceInitialOrInherit",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 332,
              "column": 2
            },
            "end": {
              "line": 349,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string"
            },
            {
              "name": "value",
              "type": "string"
            }
          ],
          "return": {
            "type": "string"
          }
        },
        {
          "name": "_cssTextToMap",
          "description": "\"parse\" a mixin definition into a map of properties and values\ncssTextToMap('border: 2px solid black') -> ('border', '2px solid black')",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 357,
              "column": 2
            },
            "end": {
              "line": 375,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text",
              "type": "string"
            }
          ],
          "return": {
            "type": "!Object.<string, string>"
          }
        },
        {
          "name": "_invalidateMixinEntry",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 380,
              "column": 2
            },
            "end": {
              "line": 389,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mixinEntry",
              "type": "MixinMapEntry"
            }
          ]
        },
        {
          "name": "_produceCssProperties",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 398,
              "column": 2
            },
            "end": {
              "line": 459,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "matchText",
              "type": "string"
            },
            {
              "name": "propertyName",
              "type": "string"
            },
            {
              "name": "valueProperty",
              "type": "?string"
            },
            {
              "name": "valueMixin",
              "type": "?string"
            }
          ],
          "return": {
            "type": "string"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 138,
          "column": 0
        },
        "end": {
          "line": 460,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "ApplyShim"
    },
    {
      "description": "This interface is provided to add document-level <style> elements to ShadyCSS for processing.\nThese styles must be processed by ShadyCSS to simulate ShadowRoot upper-bound encapsulation from outside styles\nIn addition, these styles may also need to be processed for @apply rules and CSS Custom Properties\n\nTo add document-level styles to ShadyCSS, one can call `ShadyCSS.addDocumentStyle(styleElement)` or `ShadyCSS.addDocumentStyle({getStyle: () => styleElement})`\n\nIn addition, if the process used to discover document-level styles can be synchronously flushed, one should set `ShadyCSS.documentStyleFlush`.\nThis function will be called when calculating styles.\n\nAn example usage of the document-level styling api can be found in `examples/document-style-lib.js`",
      "summary": "",
      "path": "components\\shadycss\\src\\custom-style-interface.js",
      "properties": [],
      "methods": [
        {
          "name": "enqueueDocumentValidation",
          "description": "Queue a validation for new custom styles to batch style recalculations",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 51,
              "column": 2
            },
            "end": {
              "line": 57,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "addCustomStyle",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 61,
              "column": 2
            },
            "end": {
              "line": 67,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "style",
              "type": "!HTMLStyleElement"
            }
          ]
        },
        {
          "name": "getStyleForCustomStyle",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 2
            },
            "end": {
              "line": 83,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "customStyle",
              "type": "!CustomStyleProvider"
            }
          ],
          "return": {
            "type": "HTMLStyleElement"
          }
        },
        {
          "name": "processStyles",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 2
            },
            "end": {
              "line": 106,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!Array.<!CustomStyleProvider>"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 42,
          "column": 15
        },
        "end": {
          "line": 107,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "CustomStyleInterface"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\shadycss\\entrypoints\\apply-shim.js",
      "properties": [
        {
          "name": "customStyleInterface",
          "type": "?CustomStyleInterfaceInterface",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 27,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 29
            }
          },
          "metadata": {},
          "defaultValue": "null"
        }
      ],
      "methods": [
        {
          "name": "ensure",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 2
            },
            "end": {
              "line": 50,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "prepareTemplate",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement"
            },
            {
              "name": "elementName",
              "type": "string"
            }
          ]
        },
        {
          "name": "flushCustomStyles",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 2
            },
            "end": {
              "line": 79,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "styleSubtree",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 2
            },
            "end": {
              "line": 101,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "HTMLElement"
            },
            {
              "name": "properties",
              "type": "Object="
            }
          ]
        },
        {
          "name": "styleElement",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 105,
              "column": 2
            },
            "end": {
              "line": 126,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "HTMLElement"
            }
          ]
        },
        {
          "name": "styleDocument",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 130,
              "column": 2
            },
            "end": {
              "line": 133,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "properties",
              "type": "Object="
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 24,
          "column": 0
        },
        "end": {
          "line": 134,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "ApplyShimInterface"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\shadycss\\src\\style-transformer.js",
      "properties": [],
      "methods": [
        {
          "name": "dom",
          "description": "Given a node and scope name, add a scoping class to each node\nin the tree. This facilitates transforming css into scoped rules.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 49,
              "column": 2
            },
            "end": {
              "line": 56,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "?"
            },
            {
              "name": "scope",
              "type": "?"
            },
            {
              "name": "shouldRemoveScope",
              "type": "?="
            }
          ]
        },
        {
          "name": "_transformDom",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 2
            },
            "end": {
              "line": 70,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            },
            {
              "name": "selector"
            },
            {
              "name": "shouldRemoveScope"
            }
          ]
        },
        {
          "name": "element",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 2
            },
            "end": {
              "line": 103,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "?"
            },
            {
              "name": "scope",
              "type": "?"
            },
            {
              "name": "shouldRemoveScope",
              "type": "?="
            }
          ]
        },
        {
          "name": "elementStyles",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 2
            },
            "end": {
              "line": 126,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "?"
            },
            {
              "name": "styleRules",
              "type": "?"
            },
            {
              "name": "callback",
              "type": "?="
            }
          ]
        },
        {
          "name": "css",
          "description": "(e.g. :host) to use the scoping selector.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 2
            },
            "end": {
              "line": 145,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rules"
            },
            {
              "name": "scope"
            },
            {
              "name": "ext"
            },
            {
              "name": "callback"
            }
          ]
        },
        {
          "name": "_calcElementScope",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 2
            },
            "end": {
              "line": 153,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "scope"
            }
          ]
        },
        {
          "name": "_calcHostScope",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "scope"
            },
            {
              "name": "ext"
            }
          ]
        },
        {
          "name": "rule",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 159,
              "column": 2
            },
            "end": {
              "line": 162,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rule"
            },
            {
              "name": "scope"
            },
            {
              "name": "hostScope"
            }
          ]
        },
        {
          "name": "_transformRule",
          "description": "transforms a css rule to a scoped rule.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 172,
              "column": 2
            },
            "end": {
              "line": 177,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rule",
              "type": "StyleNode"
            },
            {
              "name": "transformer",
              "type": "Function"
            },
            {
              "name": "scope",
              "type": "string="
            },
            {
              "name": "hostScope",
              "type": "string="
            }
          ]
        },
        {
          "name": "_transformRuleCss",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 185,
              "column": 2
            },
            "end": {
              "line": 195,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rule",
              "type": "StyleNode"
            },
            {
              "name": "transformer",
              "type": "Function"
            },
            {
              "name": "scope",
              "type": "string="
            },
            {
              "name": "hostScope",
              "type": "string="
            }
          ]
        },
        {
          "name": "_twiddleNthPlus",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 2
            },
            "end": {
              "line": 210,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector",
              "type": "string"
            }
          ],
          "return": {
            "type": "string"
          }
        },
        {
          "name": "_transformComplexSelector",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 217,
              "column": 2
            },
            "end": {
              "line": 240,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector",
              "type": "string"
            },
            {
              "name": "scope",
              "type": "string"
            },
            {
              "name": "hostScope",
              "type": "string="
            }
          ]
        },
        {
          "name": "_transformCompoundSelector",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 242,
              "column": 2
            },
            "end": {
              "line": 271,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            },
            {
              "name": "combinator"
            },
            {
              "name": "scope"
            },
            {
              "name": "hostScope"
            }
          ]
        },
        {
          "name": "_transformSimpleSelector",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 273,
              "column": 2
            },
            "end": {
              "line": 277,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            },
            {
              "name": "scope"
            }
          ]
        },
        {
          "name": "_transformHostSelector",
          "description": ":host(...) -> scopeName...",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 280,
              "column": 2
            },
            "end": {
              "line": 310,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            },
            {
              "name": "hostScope"
            }
          ]
        },
        {
          "name": "documentRule",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 315,
              "column": 2
            },
            "end": {
              "line": 320,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rule",
              "type": "StyleNode"
            }
          ]
        },
        {
          "name": "normalizeRootSelector",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 325,
              "column": 2
            },
            "end": {
              "line": 329,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rule",
              "type": "StyleNode"
            }
          ]
        },
        {
          "name": "_transformDocumentSelector",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 334,
              "column": 2
            },
            "end": {
              "line": 338,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector",
              "type": "string"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 38,
          "column": 0
        },
        "end": {
          "line": 339,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "StyleTransformer"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\shadycss\\src\\style-info.js",
      "properties": [
        {
          "name": "styleRules",
          "type": "StyleNode",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 4
            },
            "end": {
              "line": 48,
              "column": 19
            }
          },
          "metadata": {},
          "defaultValue": "ast || null"
        },
        {
          "name": "placeholder",
          "type": "Node",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 50,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 20
            }
          },
          "metadata": {},
          "defaultValue": "placeholder || null"
        },
        {
          "name": "ownStylePropertyNames",
          "type": "!Array.<string>",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 4
            },
            "end": {
              "line": 52,
              "column": 30
            }
          },
          "metadata": {},
          "defaultValue": "ownStylePropertyNames || []"
        },
        {
          "name": "overrideStyleProperties",
          "type": "Array.<Object>",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 4
            },
            "end": {
              "line": 54,
              "column": 32
            }
          },
          "metadata": {},
          "defaultValue": "null"
        },
        {
          "name": "elementName",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 56,
              "column": 20
            }
          },
          "metadata": {},
          "defaultValue": "elementName || ''"
        },
        {
          "name": "cssBuild",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 4
            },
            "end": {
              "line": 58,
              "column": 17
            }
          },
          "metadata": {},
          "defaultValue": "cssBuild || ''"
        },
        {
          "name": "typeExtension",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 22
            }
          },
          "metadata": {},
          "defaultValue": "typeExtension || ''"
        },
        {
          "name": "styleProperties",
          "type": "Object.<string, string>",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 62,
              "column": 24
            }
          },
          "metadata": {},
          "defaultValue": "null"
        },
        {
          "name": "scopeSelector",
          "type": "?string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 4
            },
            "end": {
              "line": 64,
              "column": 22
            }
          },
          "metadata": {},
          "defaultValue": "null"
        },
        {
          "name": "customStyle",
          "type": "HTMLStyleElement",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 66,
              "column": 20
            }
          },
          "metadata": {},
          "defaultValue": "null"
        }
      ],
      "methods": [
        {
          "name": "_getStyleRules",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 68,
              "column": 2
            },
            "end": {
              "line": 70,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [
        {
          "name": "get",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 22,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element"
            }
          ],
          "return": {
            "type": "StyleInfo"
          }
        },
        {
          "name": "set",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 2
            },
            "end": {
              "line": 37,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!Element"
            },
            {
              "name": "styleInfo",
              "type": "StyleInfo"
            }
          ],
          "return": {
            "type": "StyleInfo"
          }
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 17,
          "column": 15
        },
        "end": {
          "line": 71,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "StyleInfo"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\shadycss\\src\\style-properties.js",
      "properties": [],
      "methods": [
        {
          "name": "decorateStyles",
          "description": "decorates styles with rule info and returns an array of used style property names",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 2
            },
            "end": {
              "line": 64,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rules",
              "type": "StyleNode"
            }
          ],
          "return": {
            "type": "Array.<string>"
          }
        },
        {
          "name": "decorateRule",
          "description": "decorate a single rule with property info",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 2
            },
            "end": {
              "line": 81,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rule"
            }
          ]
        },
        {
          "name": "collectProperties",
          "description": "collects the custom properties from a rule's cssText",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 2
            },
            "end": {
              "line": 108,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rule"
            },
            {
              "name": "properties"
            }
          ]
        },
        {
          "name": "collectCssText",
          "description": "returns cssText of properties that consume variables/mixins",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 111,
              "column": 2
            },
            "end": {
              "line": 113,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rule"
            }
          ]
        },
        {
          "name": "collectConsumingCssText",
          "description": "but not production, so strip out {...}",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 2
            },
            "end": {
              "line": 120,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cssText"
            }
          ]
        },
        {
          "name": "collectPropertiesInCssText",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 2
            },
            "end": {
              "line": 132,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cssText"
            },
            {
              "name": "props"
            }
          ]
        },
        {
          "name": "reify",
          "description": "turns custom properties into realized values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 2
            },
            "end": {
              "line": 143,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props"
            }
          ]
        },
        {
          "name": "valueForProperty",
          "description": "can have values that are: (a) literal, (b) variables, (c) @apply mixins.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 152,
              "column": 2
            },
            "end": {
              "line": 183,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property"
            },
            {
              "name": "props"
            }
          ]
        },
        {
          "name": "valueForProperties",
          "description": "note: we do not yet support mixin within mixin",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 186,
              "column": 2
            },
            "end": {
              "line": 210,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property"
            },
            {
              "name": "props"
            }
          ]
        },
        {
          "name": "applyProperties",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 212,
              "column": 2
            },
            "end": {
              "line": 222,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rule"
            },
            {
              "name": "props"
            }
          ]
        },
        {
          "name": "applyKeyframeTransforms",
          "description": "functions which take in cssText and spit out transformed cssText.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 227,
              "column": 2
            },
            "end": {
              "line": 262,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rule"
            },
            {
              "name": "keyframeTransforms"
            }
          ]
        },
        {
          "name": "propertyDataFromStyles",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 270,
              "column": 2
            },
            "end": {
              "line": 294,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rules",
              "type": "StyleNode"
            },
            {
              "name": "element",
              "type": "Element"
            }
          ]
        },
        {
          "name": "whenHostOrRootRule",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 302,
              "column": 2
            },
            "end": {
              "line": 352,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "scope",
              "type": "Element"
            },
            {
              "name": "rule",
              "type": "StyleNode"
            },
            {
              "name": "cssBuild",
              "type": "(string | undefined)"
            },
            {
              "name": "callback",
              "type": "function (Object)"
            }
          ]
        },
        {
          "name": "hostAndRootPropertiesForScope",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 358,
              "column": 2
            },
            "end": {
              "line": 376,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "scope",
              "type": "Element"
            },
            {
              "name": "rules",
              "type": "StyleNode"
            }
          ],
          "return": {
            "type": "Object"
          }
        },
        {
          "name": "transformStyles",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 383,
              "column": 2
            },
            "end": {
              "line": 407,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "Element"
            },
            {
              "name": "properties",
              "type": "Object"
            },
            {
              "name": "scopeSelector",
              "type": "string"
            }
          ]
        },
        {
          "name": "_elementKeyframeTransforms",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 415,
              "column": 2
            },
            "end": {
              "line": 431,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "Element"
            },
            {
              "name": "rules",
              "type": "StyleNode"
            },
            {
              "name": "scopeSelector",
              "type": "string"
            }
          ],
          "return": {
            "type": "Object"
          }
        },
        {
          "name": "_keyframesRuleTransformer",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 439,
              "column": 2
            },
            "end": {
              "line": 445,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "keyframesRule",
              "type": "StyleNode"
            }
          ],
          "return": {
            "type": "function (string): string"
          }
        },
        {
          "name": "_scopeKeyframes",
          "description": "Transforms `@keyframes` names to be unique for the current host.\nExample: @keyframes foo-anim -> @keyframes foo-anim-x-foo-0",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 454,
              "column": 2
            },
            "end": {
              "line": 463,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rule",
              "type": "StyleNode"
            },
            {
              "name": "scopeId",
              "type": "string"
            }
          ]
        },
        {
          "name": "_scopeSelector",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 479,
              "column": 2
            },
            "end": {
              "line": 490,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rule",
              "type": "StyleNode"
            },
            {
              "name": "hostRx",
              "type": "RegExp"
            },
            {
              "name": "hostSelector",
              "type": "string"
            },
            {
              "name": "scopeId",
              "type": "string"
            }
          ]
        },
        {
          "name": "applyElementScopeSelector",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 497,
              "column": 2
            },
            "end": {
              "line": 508,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "Element"
            },
            {
              "name": "selector",
              "type": "string"
            },
            {
              "name": "old",
              "type": "string"
            }
          ]
        },
        {
          "name": "applyElementStyle",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 517,
              "column": 2
            },
            "end": {
              "line": 573,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "HTMLElement"
            },
            {
              "name": "properties",
              "type": "Object"
            },
            {
              "name": "selector",
              "type": "string"
            },
            {
              "name": "style",
              "type": "HTMLStyleElement"
            }
          ],
          "return": {
            "type": "HTMLStyleElement"
          }
        },
        {
          "name": "applyCustomStyle",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 579,
              "column": 2
            },
            "end": {
              "line": 598,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "style",
              "type": "Element"
            },
            {
              "name": "properties",
              "type": "Object"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 36,
          "column": 0
        },
        "end": {
          "line": 599,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "StyleProperties"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\shadycss\\src\\style-cache.js",
      "properties": [],
      "methods": [
        {
          "name": "_validate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 18,
              "column": 2
            },
            "end": {
              "line": 26,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cacheEntry"
            },
            {
              "name": "properties"
            },
            {
              "name": "ownPropertyNames"
            }
          ]
        },
        {
          "name": "store",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 28,
              "column": 2
            },
            "end": {
              "line": 35,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "tagname"
            },
            {
              "name": "properties"
            },
            {
              "name": "styleElement"
            },
            {
              "name": "scopeSelector"
            }
          ]
        },
        {
          "name": "fetch",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 37,
              "column": 2
            },
            "end": {
              "line": 49,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "tagname"
            },
            {
              "name": "properties"
            },
            {
              "name": "ownPropertyNames"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 11,
          "column": 15
        },
        "end": {
          "line": 50,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "StyleCache"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\shadycss\\src\\scoping-shim.js",
      "properties": [
        {
          "name": "_customStyleInterface",
          "type": "?CustomStyleInterfaceInterface",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 4
            },
            "end": {
              "line": 42,
              "column": 30
            }
          },
          "metadata": {},
          "defaultValue": "null"
        }
      ],
      "methods": [
        {
          "name": "flush",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 2
            },
            "end": {
              "line": 49,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_generateScopeSelector",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 50,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            }
          ]
        },
        {
          "name": "getStyleAst",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 2
            },
            "end": {
              "line": 56,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "style"
            }
          ]
        },
        {
          "name": "styleAstToString",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 57,
              "column": 2
            },
            "end": {
              "line": 59,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ast"
            }
          ]
        },
        {
          "name": "_gatherStyles",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 2
            },
            "end": {
              "line": 62,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template"
            }
          ]
        },
        {
          "name": "_getCssBuild",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 69,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template"
            }
          ]
        },
        {
          "name": "prepareTemplate",
          "description": "Prepare the styling and template for the given element type",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 2
            },
            "end": {
              "line": 117,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement"
            },
            {
              "name": "elementName",
              "type": "string"
            },
            {
              "name": "typeExtension",
              "type": "string="
            }
          ]
        },
        {
          "name": "_generateStaticStyle",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 123,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "info"
            },
            {
              "name": "rules"
            },
            {
              "name": "shadowroot"
            },
            {
              "name": "placeholder"
            }
          ]
        },
        {
          "name": "_prepareHost",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 124,
              "column": 2
            },
            "end": {
              "line": 146,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "host"
            }
          ]
        },
        {
          "name": "_ensureApplyShim",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 2
            },
            "end": {
              "line": 154,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_ensureCustomStyleInterface",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_ensure",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 171,
              "column": 2
            },
            "end": {
              "line": 174,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "flushCustomStyles",
          "description": "Flush and apply custom styles to document",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 178,
              "column": 2
            },
            "end": {
              "line": 199,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "styleElement",
          "description": "Apply styles for the given element",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 206,
              "column": 2
            },
            "end": {
              "line": 254,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "host",
              "type": "!HTMLElement"
            },
            {
              "name": "overrideProps",
              "type": "Object="
            }
          ]
        },
        {
          "name": "_styleOwnerForNode",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 255,
              "column": 2
            },
            "end": {
              "line": 266,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ]
        },
        {
          "name": "_isRootOwner",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 267,
              "column": 2
            },
            "end": {
              "line": 269,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ]
        },
        {
          "name": "_applyStyleProperties",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 270,
              "column": 2
            },
            "end": {
              "line": 286,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "host"
            },
            {
              "name": "styleInfo"
            }
          ]
        },
        {
          "name": "_updateProperties",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 287,
              "column": 2
            },
            "end": {
              "line": 304,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "host"
            },
            {
              "name": "styleInfo"
            }
          ]
        },
        {
          "name": "_mixinOverrideStyles",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 305,
              "column": 2
            },
            "end": {
              "line": 314,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props"
            },
            {
              "name": "overrides"
            }
          ]
        },
        {
          "name": "styleDocument",
          "description": "Update styles of the whole document",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 320,
              "column": 2
            },
            "end": {
              "line": 322,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "properties",
              "type": "Object="
            }
          ]
        },
        {
          "name": "styleSubtree",
          "description": "Update styles of a subtree",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 329,
              "column": 2
            },
            "end": {
              "line": 351,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "host",
              "type": "!HTMLElement"
            },
            {
              "name": "properties",
              "type": "Object="
            }
          ]
        },
        {
          "name": "_revalidateCustomStyleApplyShim",
          "description": "Custom Style operations",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 353,
              "column": 2
            },
            "end": {
              "line": 361,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "customStyles"
            }
          ]
        },
        {
          "name": "_applyCustomStyles",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 362,
              "column": 2
            },
            "end": {
              "line": 370,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "customStyles"
            }
          ]
        },
        {
          "name": "transformCustomStyleForDocument",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 371,
              "column": 2
            },
            "end": {
              "line": 389,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "style"
            }
          ]
        },
        {
          "name": "_revalidateApplyShim",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 390,
              "column": 2
            },
            "end": {
              "line": 397,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "style"
            }
          ]
        },
        {
          "name": "getComputedStyleValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 398,
              "column": 2
            },
            "end": {
              "line": 410,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            },
            {
              "name": "property"
            }
          ]
        },
        {
          "name": "setElementClass",
          "description": "any necessary ShadyCSS static and property based scoping selectors",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 414,
              "column": 2
            },
            "end": {
              "line": 443,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            },
            {
              "name": "classString"
            }
          ]
        },
        {
          "name": "_styleInfoForNode",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 444,
              "column": 2
            },
            "end": {
              "line": 446,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 32,
          "column": 15
        },
        "end": {
          "line": 447,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "ScopingShim"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\webcomponentsjs\\custom-elements-es5-adapter.js",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 3,
          "column": 546
        },
        "end": {
          "line": 3,
          "column": 644
        }
      },
      "privacy": "public",
      "superclass": "a",
      "name": "j"
    },
    {
      "description": "",
      "summary": "",
      "path": "components\\webcomponentsjs\\custom-elements-es5-adapter.js",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 3,
          "column": 546
        },
        "end": {
          "line": 3,
          "column": 644
        }
      },
      "privacy": "public",
      "superclass": "a",
      "name": "j"
    }
  ]
}
